// Generated by Haxe 3.4.0 (git build development @ a9c8d60)
(function ($hx_exports, $global) { "use strict";
$hx_exports["tannus"] = $hx_exports["tannus"] || {};
$hx_exports["tannus"]["sys"] = $hx_exports["tannus"]["sys"] || {};
;$hx_exports["tannus"]["ds"] = $hx_exports["tannus"]["ds"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Background = function() {
	this.ipcBus = electron_ipc_IpcBus.get();
};
$hxClasses["Background"] = Background;
Background.__name__ = ["Background"];
Background.main = function() {
	new Background().start();
};
Background.prototype = {
	start: function() {
		electron_ext_ExtApp.on("ready",function() {
			var this1 = new tannus_sys_CPath(electron_ext_ExtApp.getAppPath());
			var appDir = this1;
			var win = new electron_ext_BrowserWindow({ icon : tannus_sys_CPath.join([appDir,tannus_sys__$Path_Path_$Impl_$.fromString("assets/icon64.png")]).s, show : false, width : 640, height : 480});
			var dir = tannus_sys_CPath.join([appDir,tannus_sys__$Path_Path_$Impl_$.fromString("pages/index.html")]);
			win.loadURL("file://" + dir.s);
			win.once("ready-to-show",function() {
				win.show();
				win.maximize();
				win.focus();
			});
		});
	}
	,initTray: function() {
		var this1 = new tannus_sys_CPath(electron_ext_ExtApp.getAppPath());
		var appDir = this1;
		var icon = electron_ext_ExtNativeImage.createFromPath(tannus_sys_CPath.join([appDir,tannus_sys__$Path_Path_$Impl_$.fromString("assets/icon32.png")]).s);
		var this2 = new electron_ext_NTray(icon);
		var tray = this2;
		var trayMenu = electron_ext_Menu.buildFromTemplate([{ label : "Test Button"}]);
		tray.setContextMenu(trayMenu);
	}
	,onSocketConnected: function(socket) {
		socket.send("test","message from main process",function(response) {
			console.log("reply: " + response);
		});
	}
	,ipcBus: null
	,__class__: Background
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			var tmp = this.r;
			var tmp1 = len < 0 ? s : HxOverrides.substr(s,0,pos + len);
			this.r.m = tmp.exec(tmp1);
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = ["IntIterator"];
IntIterator.prototype = {
	min: null
	,max: null
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var i = $iterator(it)();
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.has = function(it,elt) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Slambda = function() { };
$hxClasses["Slambda"] = Slambda;
Slambda.__name__ = ["Slambda"];
var Slambda1 = function() { };
$hxClasses["Slambda1"] = Slambda1;
Slambda1.__name__ = ["Slambda1"];
var Slambda2 = function() { };
$hxClasses["Slambda2"] = Slambda2;
Slambda2.__name__ = ["Slambda2"];
var Slambda3 = function() { };
$hxClasses["Slambda3"] = Slambda3;
Slambda3.__name__ = ["Slambda3"];
var Slambda4 = function() { };
$hxClasses["Slambda4"] = Slambda4;
Slambda4.__name__ = ["Slambda4"];
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return o.__enum__;
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var electron_Tools = function() { };
$hxClasses["electron.Tools"] = electron_Tools;
electron_Tools.__name__ = ["electron","Tools"];
electron_Tools.defer = function(action) {
	process.nextTick(action);
};
var electron_ext_App = function() { };
$hxClasses["electron.ext.App"] = electron_ext_App;
electron_ext_App.__name__ = ["electron","ext","App"];
electron_ext_App.onReady = function(callback) {
	electron_ext_ExtApp.on("ready",callback);
};
electron_ext_App.quit = function() {
	electron_ext_ExtApp.quit();
};
electron_ext_App.exit = function(code) {
	electron_ext_ExtApp.exit(code);
};
electron_ext_App.relaunch = function(options) {
	electron_ext_ExtApp.relaunch(options);
};
electron_ext_App.isReady = function() {
	return electron_ext_ExtApp.isReady();
};
electron_ext_App.focus = function() {
	electron_ext_ExtApp.focus();
};
electron_ext_App.getAppPath = function() {
	var this1 = new tannus_sys_CPath(electron_ext_ExtApp.getAppPath());
	return this1;
};
electron_ext_App.getPath = function(name) {
	var this1 = new tannus_sys_CPath(electron_ext_ExtApp.getPath(name));
	return this1;
};
electron_ext_App.getVersion = function() {
	return electron_ext_ExtApp.getVersion();
};
electron_ext_App.getName = function() {
	return electron_ext_ExtApp.getName();
};
electron_ext_App.on = function(name,f) {
	electron_ext_ExtApp.on(name,f);
};
var electron_ext_BrowserWindow = require("electron").BrowserWindow;
var electron_ext_ExtApp = require("electron").app;
var electron_ext_ExtNativeImage = require("electron").nativeImage;
var electron_ext_IpcMain = require("electron").ipcMain;
var electron_ext_Menu = require("electron").Menu;
var electron_ext__$NativeImage_NativeImage_$Impl_$ = {};
$hxClasses["electron.ext._NativeImage.NativeImage_Impl_"] = electron_ext__$NativeImage_NativeImage_$Impl_$;
electron_ext__$NativeImage_NativeImage_$Impl_$.__name__ = ["electron","ext","_NativeImage","NativeImage_Impl_"];
electron_ext__$NativeImage_NativeImage_$Impl_$._new = function(img) {
	var this1 = img;
	return this1;
};
electron_ext__$NativeImage_NativeImage_$Impl_$.toPNG = function(this1) {
	return tannus_io_impl_NodeBinary.ofData(this1.toPNG());
};
electron_ext__$NativeImage_NativeImage_$Impl_$.toJPEG = function(this1,quality) {
	return tannus_io_impl_NodeBinary.ofData(this1.toJPEG(quality));
};
electron_ext__$NativeImage_NativeImage_$Impl_$.toBitmap = function(this1) {
	return tannus_io_impl_NodeBinary.ofData(this1.toBitmap());
};
electron_ext__$NativeImage_NativeImage_$Impl_$.getBitmap = function(this1) {
	return tannus_io_impl_NodeBinary.ofData(this1.getBitmap());
};
electron_ext__$NativeImage_NativeImage_$Impl_$.getSize = function(this1) {
	var s = this1.getSize();
	return new tannus_geom2_Rect(0,0,s.width,s.height);
};
electron_ext__$NativeImage_NativeImage_$Impl_$.crop = function(this1,x,y,w,h) {
	var this2 = this1.crop({ x : x, y : y, width : w, height : h});
	return this2;
};
electron_ext__$NativeImage_NativeImage_$Impl_$.createEmpty = function() {
	return electron_ext_ExtNativeImage.createEmpty();
};
electron_ext__$NativeImage_NativeImage_$Impl_$.createFromPath = function(path) {
	return electron_ext_ExtNativeImage.createFromPath(path);
};
electron_ext__$NativeImage_NativeImage_$Impl_$.createFromBuffer = function(buffer,options) {
	return electron_ext_ExtNativeImage.createFromBuffer(buffer,options);
};
electron_ext__$NativeImage_NativeImage_$Impl_$.createFromByteArray = function(bytes,options) {
	return electron_ext_ExtNativeImage.createFromBuffer(bytes.b,options);
};
electron_ext__$NativeImage_NativeImage_$Impl_$.createFromDataURL = function(url) {
	return electron_ext_ExtNativeImage.createFromDataURL(url);
};
electron_ext__$NativeImage_NativeImage_$Impl_$.ba = function(b) {
	return tannus_io_impl_NodeBinary.ofData(b);
};
var electron_ext__$Tray_Tray_$Impl_$ = {};
$hxClasses["electron.ext._Tray.Tray_Impl_"] = electron_ext__$Tray_Tray_$Impl_$;
electron_ext__$Tray_Tray_$Impl_$.__name__ = ["electron","ext","_Tray","Tray_Impl_"];
electron_ext__$Tray_Tray_$Impl_$._new = function(icon) {
	var this1 = new electron_ext_NTray(icon);
	return this1;
};
electron_ext__$Tray_Tray_$Impl_$.onClick = function(this1,handler) {
	this1.on("click",handler);
};
electron_ext__$Tray_Tray_$Impl_$.on = function(this1,name,handler) {
	this1.on(name,handler);
};
electron_ext__$Tray_Tray_$Impl_$.once = function(this1,name,handler) {
	this1.once(name,handler);
};
electron_ext__$Tray_Tray_$Impl_$.off = function(this1,name,handler) {
	this1.removeListener(name,handler);
};
var electron_ext_NTray = require("electron").Tray;
var electron_ext_WebContentsInterface = function() { };
$hxClasses["electron.ext.WebContentsInterface"] = electron_ext_WebContentsInterface;
electron_ext_WebContentsInterface.__name__ = ["electron","ext","WebContentsInterface"];
electron_ext_WebContentsInterface.prototype = {
	loadURL: null
	,downloadURL: null
	,getURL: null
	,getTitle: null
	,isDestroyed: null
	,isFocused: null
	,isLoading: null
	,isLoadingMainFrame: null
	,isWaitingForResponse: null
	,stop: null
	,reload: null
	,reloadIgnoringCache: null
	,canGoBack: null
	,canGoForward: null
	,canGoToOffset: null
	,clearHistory: null
	,goBack: null
	,goForward: null
	,goToIndex: null
	,goToOffset: null
	,isCrashed: null
	,getUserAgent: null
	,setUserAgent: null
	,insertCSS: null
	,executeJavaScript: null
	,isAudioMuted: null
	,setAudioMuted: null
	,setZoomFactor: null
	,getZoomFactor: null
	,setZoomLevel: null
	,getZoomLevel: null
	,undo: null
	,redo: null
	,cut: null
	,copy: null
	,copyImageAt: null
	,paste: null
	,pasteAndMatchStyle: null
	,'delete': null
	,selectAll: null
	,unselect: null
	,replace: null
	,insertText: null
	,addWorkSpace: null
	,removeWorkSpace: null
	,openDevTools: null
	,closeDevTools: null
	,isDevToolsOpened: null
	,isDevToolsFocused: null
	,toggleDevTools: null
	,inspectElement: null
	,session: null
	,hostWebContents: null
	,devToolsWebContents: null
	,__class__: electron_ext_WebContentsInterface
};
var electron_ipc_IpcAddress = function(id,type) {
	this.id = id;
	this.type = type;
};
$hxClasses["electron.ipc.IpcAddress"] = electron_ipc_IpcAddress;
electron_ipc_IpcAddress.__name__ = ["electron","ipc","IpcAddress"];
electron_ipc_IpcAddress.prototype = {
	clone: function() {
		return new electron_ipc_IpcAddress(this.id,this.type);
	}
	,hxSerialize: function(s) {
		var w = $bind(s,s.serialize);
		w(this.id);
		w(this.type);
	}
	,hxUnserialize: function(u) {
		var r = $bind(u,u.unserialize);
		this.id = r();
		this.type = r();
	}
	,id: null
	,type: null
	,__class__: electron_ipc_IpcAddress
};
var electron_ipc_IpcAddressType = $hxClasses["electron.ipc.IpcAddressType"] = { __ename__ : ["electron","ipc","IpcAddressType"], __constructs__ : ["TMain","TBrowserWindow"] };
electron_ipc_IpcAddressType.TMain = ["TMain",0];
electron_ipc_IpcAddressType.TMain.toString = $estr;
electron_ipc_IpcAddressType.TMain.__enum__ = electron_ipc_IpcAddressType;
electron_ipc_IpcAddressType.TBrowserWindow = function(windowId) { var $x = ["TBrowserWindow",1,windowId]; $x.__enum__ = electron_ipc_IpcAddressType; $x.toString = $estr; return $x; };
var electron_ipc_IpcBus = function() {
	this.sockets = new haxe_ds_StringMap();
	this.socketConnected = new tannus_io_Signal();
	this.__init();
};
$hxClasses["electron.ipc.IpcBus"] = electron_ipc_IpcBus;
electron_ipc_IpcBus.__name__ = ["electron","ipc","IpcBus"];
electron_ipc_IpcBus.get = function() {
	if(electron_ipc_IpcBus._instance == null) {
		electron_ipc_IpcBus._instance = new electron_ipc_IpcBus_$Main();
	}
	return electron_ipc_IpcBus._instance;
};
electron_ipc_IpcBus.prototype = {
	__init: function() {
		return;
	}
	,createSocket: function(id,peerType) {
		throw new js__$Boot_HaxeError("Not implemented!");
	}
	,canConnectTo: function(address) {
		return true;
	}
	,_address: function(id) {
		return new electron_ipc_IpcAddress(id,this.addressType);
	}
	,_broadcast: function(message) {
		throw new js__$Boot_HaxeError("Not implemented!");
	}
	,_socket: function(peer) {
		throw new js__$Boot_HaxeError("Not implemented!");
	}
	,socketConnected: null
	,addressType: null
	,sockets: null
	,__class__: electron_ipc_IpcBus
};
var electron_ipc_IpcBusPacket = $hxClasses["electron.ipc.IpcBusPacket"] = { __ename__ : ["electron","ipc","IpcBusPacket"], __constructs__ : ["Connect","Message"] };
electron_ipc_IpcBusPacket.Connect = function(address) { var $x = ["Connect",0,address]; $x.__enum__ = electron_ipc_IpcBusPacket; $x.toString = $estr; return $x; };
electron_ipc_IpcBusPacket.Message = function(message) { var $x = ["Message",1,message]; $x.__enum__ = electron_ipc_IpcBusPacket; $x.toString = $estr; return $x; };
var electron_ipc_IpcBus_$Main = function() {
	electron_ipc_IpcBus.call(this);
};
$hxClasses["electron.ipc.IpcBus_Main"] = electron_ipc_IpcBus_$Main;
electron_ipc_IpcBus_$Main.__name__ = ["electron","ipc","IpcBus_Main"];
electron_ipc_IpcBus_$Main.__super__ = electron_ipc_IpcBus;
electron_ipc_IpcBus_$Main.prototype = $extend(electron_ipc_IpcBus.prototype,{
	__init: function() {
		this.addressType = electron_ipc_IpcAddressType.TMain;
		electron_ext_IpcMain.on("ipc::sockets",$bind(this,this.__incoming_raw));
		electron_ext_IpcMain.on("ipc::sockets" + "-sync",$bind(this,this.__incoming_raw_sync));
	}
	,deliver: function(msg) {
		var key = msg.address.id;
		var _this = this.sockets;
		var socket = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(socket != null) {
			socket._deliver(msg);
		} else {
			throw new js__$Boot_HaxeError("Error: Socket not found");
		}
	}
	,__incoming_raw: function(event,values) {
		if(values.length > 0 && typeof(values[0]) == "string") {
			try {
				var str_data = values[0];
				var data = haxe_Unserializer.run(str_data);
				if(js_Boot.__instanceof(data,electron_ipc_IpcBusPacket)) {
					this.__incoming_packet(event,js_Boot.__cast(data , electron_ipc_IpcBusPacket));
				}
			} catch( error ) {
				return;
			}
		}
	}
	,__incoming_raw_sync: function(event,values) {
		console.log(values);
		if(values.length > 0 && typeof(values[0]) == "string") {
			var data = haxe_Unserializer.run(Std.string(values[0]));
			if(js_Boot.__instanceof(data,electron_ipc_IpcBusPacket)) {
				var packet = data;
				console.log("packet: " + Std.string(packet));
				this.__incoming_packet(event,packet);
			} else {
				throw new js__$Boot_HaxeError("TypeError: The " + "ipc::sockets" + "-sync channel is reserved by the internals of the sockets system");
			}
		} else {
			throw new js__$Boot_HaxeError("TypeError: Invalid input");
		}
	}
	,__incoming_packet: function(event,packet) {
		var _gthis = this;
		switch(packet[1]) {
		case 0:
			var address = packet[2];
			var status = this.canConnectTo(address);
			if(status) {
				var socket = this.sockets.get(address.id);
				if(socket == null) {
					var this1 = this.sockets;
					var k = address.id;
					socket = this._socket(address);
					var v = socket;
					this1.set(k,v);
				}
				process.nextTick(function() {
					_gthis.socketConnected.broadcast(socket);
				});
			}
			event.returnValue = status;
			break;
		case 1:
			var frozenMsg = packet[2];
			var message = frozenMsg.thaw();
			this.deliver(message);
			break;
		}
	}
	,_socket: function(peer) {
		return new electron_ipc_IpcSocket_$Main(this,new electron_ipc_IpcAddress(peer.id,this.addressType),peer);
	}
	,canConnectTo: function(a) {
		return true;
	}
	,_broadcast: function(message) {
		var _g = message.address.type;
		switch(_g[1]) {
		case 0:
			console.log("cum blisters");
			break;
		case 1:
			var windowId = _g[2];
			var $window = electron_ext_BrowserWindow.fromId(windowId);
			if($window == null) {
				throw new js__$Boot_HaxeError("Error: Invalid window id " + windowId);
			} else {
				this._sendToBrowserWindow($window,message);
			}
			break;
		}
	}
	,_sendToBrowserWindow: function(w,message) {
		var serializer = new haxe_Serializer();
		serializer.useCache = serializer.useEnumIndex = true;
		var frozenMsg = message.freeze();
		var packet = electron_ipc_IpcBusPacket.Message(frozenMsg);
		serializer.serialize(packet);
		var string_packet = serializer.toString();
		w.webContents.send("ipc::sockets",[string_packet]);
	}
	,__class__: electron_ipc_IpcBus_$Main
});
var electron_ipc_IpcFrozenMessage = function(type,id,channel,data,sender,address) {
	this.id = id;
	this.type = type;
	this.channel = channel;
	this.data = data;
	this.sender = sender;
	this.address = address;
};
$hxClasses["electron.ipc.IpcFrozenMessage"] = electron_ipc_IpcFrozenMessage;
electron_ipc_IpcFrozenMessage.__name__ = ["electron","ipc","IpcFrozenMessage"];
electron_ipc_IpcFrozenMessage.prototype = {
	clone: function() {
		return new electron_ipc_IpcFrozenMessage(Type.createEnumIndex(electron_ipc_IpcMessageType,this.type[1],this.type.slice(2).slice()),this.id,this.channel,this.data,this.sender.clone(),this.address.clone());
	}
	,thaw: function() {
		var cookedData = haxe_Unserializer.run(this.data);
		var message = new electron_ipc_IpcMessage(Type.createEnumIndex(electron_ipc_IpcMessageType,this.type[1],this.type.slice(2).slice()),this.channel,cookedData,this.sender.clone(),this.address.clone());
		message.id = this.id;
		return message;
	}
	,type: null
	,channel: null
	,id: null
	,data: null
	,sender: null
	,address: null
	,__class__: electron_ipc_IpcFrozenMessage
};
var electron_ipc_IpcMessage = function(type,channel,data,sender,address) {
	this.id = tannus_ds_Memory.allocRandomId(8);
	this.type = type;
	this.channel = channel;
	this.data = data;
	this.sender = sender;
	this.address = address;
};
$hxClasses["electron.ipc.IpcMessage"] = electron_ipc_IpcMessage;
electron_ipc_IpcMessage.__name__ = ["electron","ipc","IpcMessage"];
electron_ipc_IpcMessage.prototype = {
	clone: function() {
		return new electron_ipc_IpcMessage(this.type,this.channel,this.data,this.sender.clone(),this.address.clone());
	}
	,freeze: function() {
		var s = new haxe_Serializer();
		s.useCache = s.useEnumIndex = true;
		s.serialize(this.data);
		var frozenData = s.toString();
		return new electron_ipc_IpcFrozenMessage(this.type,this.id,this.channel,frozenData,this.sender.clone(),this.address.clone());
	}
	,reply: function(data) {
		return;
	}
	,getRecipientId: function() {
		return this.address.id;
	}
	,getSenderId: function() {
		return this.sender.id;
	}
	,id: null
	,type: null
	,channel: null
	,data: null
	,sender: null
	,address: null
	,__class__: electron_ipc_IpcMessage
};
var electron_ipc_IpcMessageType = $hxClasses["electron.ipc.IpcMessageType"] = { __ename__ : ["electron","ipc","IpcMessageType"], __constructs__ : ["TNormal","TDestroy","TReply"] };
electron_ipc_IpcMessageType.TNormal = ["TNormal",0];
electron_ipc_IpcMessageType.TNormal.toString = $estr;
electron_ipc_IpcMessageType.TNormal.__enum__ = electron_ipc_IpcMessageType;
electron_ipc_IpcMessageType.TDestroy = ["TDestroy",1];
electron_ipc_IpcMessageType.TDestroy.toString = $estr;
electron_ipc_IpcMessageType.TDestroy.__enum__ = electron_ipc_IpcMessageType;
electron_ipc_IpcMessageType.TReply = ["TReply",2];
electron_ipc_IpcMessageType.TReply.toString = $estr;
electron_ipc_IpcMessageType.TReply.__enum__ = electron_ipc_IpcMessageType;
var electron_ipc_IpcSocket = function(address) {
	this.address = address;
	this.ed = new tannus_io_EventDispatcher();
	this.ed.__checkEvents = false;
	this.awaitingReply = new haxe_ds_StringMap();
};
$hxClasses["electron.ipc.IpcSocket"] = electron_ipc_IpcSocket;
electron_ipc_IpcSocket.__name__ = ["electron","ipc","IpcSocket"];
electron_ipc_IpcSocket.create = function(address) {
	var _g = address.type;
	switch(_g[1]) {
	case 0:
		return new electron_ipc_IpcSocket(address);
	case 1:
		var windowId = _g[2];
		return new electron_ipc_IpcSocket(address);
	}
};
electron_ipc_IpcSocket.prototype = {
	on: function(channel,handler) {
		this.ed.on(channel,handler);
	}
	,once: function(channel,handler) {
		this.ed.once(channel,handler);
	}
	,_deliver: function(message) {
		throw new js__$Boot_HaxeError("Not implemented!");
	}
	,send: function(channel,data,onreply) {
		var message = new electron_ipc_IpcMessage(electron_ipc_IpcMessageType.TNormal,channel,data,this.address,this.peerAddress);
		var messageId = message.id;
		if(onreply != null) {
			var _this = this.awaitingReply;
			if(__map_reserved[messageId] != null) {
				_this.setReserved(messageId,onreply);
			} else {
				_this.h[messageId] = onreply;
			}
		}
		this.bus._broadcast(message);
	}
	,sendReply: function(message,data) {
		var replyMsg = new electron_ipc_IpcMessage(electron_ipc_IpcMessageType.TReply,message.channel,data,message.address,message.sender);
		replyMsg.id = message.id;
		this._deliver(replyMsg);
	}
	,address: null
	,peerAddress: null
	,bus: null
	,ed: null
	,awaitingReply: null
	,__class__: electron_ipc_IpcSocket
};
var electron_ipc_IpcSocket_$Main = function(bus,address,peerAddress) {
	electron_ipc_IpcSocket.call(this,address);
	this.bus = bus;
	this.peerAddress = peerAddress;
	var _g = this.peerAddress.type;
	switch(_g[1]) {
	case 0:
		throw new js__$Boot_HaxeError("Error: Cannot connect two IpcSocket_Main instances");
		break;
	case 1:
		var windowId = _g[2];
		this.window = electron_ext_BrowserWindow.fromId(windowId);
		if(this.window == null) {
			throw new js__$Boot_HaxeError("Error: Invalid BrowserWindow id " + windowId);
		}
		break;
	}
};
$hxClasses["electron.ipc.IpcSocket_Main"] = electron_ipc_IpcSocket_$Main;
electron_ipc_IpcSocket_$Main.__name__ = ["electron","ipc","IpcSocket_Main"];
electron_ipc_IpcSocket_$Main.__super__ = electron_ipc_IpcSocket;
electron_ipc_IpcSocket_$Main.prototype = $extend(electron_ipc_IpcSocket.prototype,{
	_deliver: function(msg) {
		var _g = msg.type;
		switch(_g[1]) {
		case 0:
			var f = $bind(this,this.sendReply);
			var a1 = msg;
			msg.reply = function(a2) {
				f(a1,a2);
			};
			this.ed.dispatch(msg.channel,msg);
			break;
		case 1:
			console.log("deleting IpcSocket..");
			break;
		case 2:
			var handler = this.awaitingReply.get(msg.id);
			if(handler != null) {
				handler(msg.data);
			}
			break;
		}
	}
	,window: null
	,__class__: electron_ipc_IpcSocket_$Main
});
var electron_ipc_IpcTools = function() { };
$hxClasses["electron.ipc.IpcTools"] = electron_ipc_IpcTools;
electron_ipc_IpcTools.__name__ = ["electron","ipc","IpcTools"];
electron_ipc_IpcTools.serialize = function(value) {
	var s = new haxe_Serializer();
	s.useCache = s.useEnumIndex = true;
	s.serialize(value);
	return s.toString();
};
electron_ipc_IpcTools.unserialize = function(data) {
	return haxe_Unserializer.run(data);
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,keys: null
	,__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
			break;
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case List:
				this.buf.b += "l";
				var v3 = v;
				var _g_head = v3.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i1 = val;
					this.serialize(i1);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v4 = v;
				var k = v4.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v4.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v5.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v6.getReserved(k5) : v6.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i2 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe_Serializer.BASE64.length;
					var this1 = new Array(length);
					b64 = this1;
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i3 = _g11++;
						b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64,i3);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i2 < max) {
					var b1 = v7.b[i2++];
					var b2 = v7.b[i2++];
					var b3 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b1 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCharCode(b64[b3 & 63]);
				}
				if(i2 == max) {
					var b11 = v7.b[i2++];
					var b21 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b11 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[b21 << 2 & 63]);
				} else if(i2 == max + 1) {
					var b12 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b12 >> 2]);
					this.buf.b += String.fromCharCode(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g[2];
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(Type.getEnumName(e));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.b += ":";
			var l1 = v["length"];
			this.buf.b += Std.string(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) {
				var i4 = _g12++;
				this.serialize(v[i4]);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				return false;
			} else throw(e);
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw new js__$Boot_HaxeError("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw new js__$Boot_HaxeError("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = ["haxe","io","Input"];
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,__class__: haxe_io_BytesInput
});
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.isAbsolute = function(path) {
	if(StringTools.startsWith(path,"/")) {
		return true;
	}
	if(path.charAt(1) == ":") {
		return true;
	}
	return false;
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_macro_ComplexType = $hxClasses["haxe.macro.ComplexType"] = { __ename__ : ["haxe","macro","ComplexType"], __constructs__ : ["TPath","TFunction","TAnonymous","TParent","TExtend","TOptional"] };
haxe_macro_ComplexType.TPath = function(p) { var $x = ["TPath",0,p]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TFunction = function(args,ret) { var $x = ["TFunction",1,args,ret]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TAnonymous = function(fields) { var $x = ["TAnonymous",2,fields]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TParent = function(t) { var $x = ["TParent",3,t]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TExtend = function(p,fields) { var $x = ["TExtend",4,p,fields]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
haxe_macro_ComplexType.TOptional = function(t) { var $x = ["TOptional",5,t]; $x.__enum__ = haxe_macro_ComplexType; $x.toString = $estr; return $x; };
var haxe_macro_TypeParam = $hxClasses["haxe.macro.TypeParam"] = { __ename__ : ["haxe","macro","TypeParam"], __constructs__ : ["TPType","TPExpr"] };
haxe_macro_TypeParam.TPType = function(t) { var $x = ["TPType",0,t]; $x.__enum__ = haxe_macro_TypeParam; $x.toString = $estr; return $x; };
haxe_macro_TypeParam.TPExpr = function(e) { var $x = ["TPExpr",1,e]; $x.__enum__ = haxe_macro_TypeParam; $x.toString = $estr; return $x; };
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var tannus_ds_ArrayTools = function() { };
$hxClasses["tannus.ds.ArrayTools"] = tannus_ds_ArrayTools;
tannus_ds_ArrayTools.__name__ = ["tannus","ds","ArrayTools"];
tannus_ds_ArrayTools.equal = function(a) {
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		var _g3 = i;
		var _g2 = a.length;
		while(_g3 < _g2) {
			var j = _g3++;
			if(a[i] != a[j]) {
				return false;
			}
		}
	}
	return true;
};
tannus_ds_ArrayTools.compare = function(left,right,predicate) {
	if(left.length != right.length) {
		return false;
	} else {
		if(predicate == null) {
			predicate = function(x,y) {
				return x == y;
			};
		}
		var _g1 = 0;
		var _g = left.length;
		while(_g1 < _g) {
			var i = _g1++;
			var l = left[i];
			var r = right[i];
			if(!predicate(l,r)) {
				return false;
			}
		}
		return true;
	}
};
tannus_ds_ArrayTools.pointerArray = function(a) {
	var res = [];
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = [_g1++];
		var this1 = (function(i1) {
			return function() {
				return a[i1[0]];
			};
		})(i);
		var this2 = (function(i2) {
			return function(v) {
				return a[i2[0]] = v;
			};
		})(i);
		var this3 = new tannus_io__$Pointer_Ref(this1,this2);
		res.push(this3);
	}
	return res;
};
tannus_ds_ArrayTools.without = function(list,blacklist,compare) {
	if(compare == null) {
		compare = function(x,y) {
			return x == y;
		};
	}
	var result = [];
	var x1 = $iterator(list)();
	while(x1.hasNext()) {
		var x2 = x1.next();
		var y1 = $iterator(blacklist)();
		while(y1.hasNext()) {
			var y2 = y1.next();
			if(compare(x2,y2)) {
				continue;
			}
		}
		result.push(x2);
	}
	return result;
};
tannus_ds_ArrayTools.firstMatch = function(list,test) {
	var item = $iterator(list)();
	while(item.hasNext()) {
		var item1 = item.next();
		if(test(item1)) {
			return item1;
		}
	}
	return null;
};
tannus_ds_ArrayTools.firstMatchIndex = function(list,test) {
	var _g1 = 0;
	var _g = list.length;
	while(_g1 < _g) {
		var index = _g1++;
		if(test(list[index])) {
			return index;
		}
	}
	return -1;
};
tannus_ds_ArrayTools.hasf = function(set,item,tester) {
	var x = $iterator(set)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(tester(x1,item)) {
			return true;
		}
	}
	return false;
};
tannus_ds_ArrayTools.unique = function(set,tester) {
	if(tester == null) {
		tester = function(x,y) {
			return x == y;
		};
	}
	var results = [];
	var _g = 0;
	while(_g < set.length) {
		var item = set[_g];
		++_g;
		if(!tannus_ds_ArrayTools.hasf(results,item,tester)) {
			results.push(item);
		}
	}
	return results;
};
tannus_ds_ArrayTools.union = function(one,other) {
	return one.filter(function(item) {
		return Lambda.has(other,item);
	});
};
tannus_ds_ArrayTools.intersection = function(one,two) {
	if(one.length < two.length) {
		return one.filter(function(item) {
			return !Lambda.has(two,item);
		});
	} else {
		return two.filter(function(item1) {
			return !Lambda.has(one,item1);
		});
	}
};
tannus_ds_ArrayTools.flatten = function(set) {
	var res = [];
	var _g = 0;
	while(_g < set.length) {
		var sub = set[_g];
		++_g;
		res = res.concat(sub);
	}
	return res;
};
tannus_ds_ArrayTools.last = function(list,v) {
	if(v == null) {
		return list[list.length - 1];
	} else {
		return list[list.length - 1] = v;
	}
};
tannus_ds_ArrayTools.before = function(list,val) {
	return list.slice(0,list.indexOf(val) != -1 ? list.indexOf(val) : list.length);
};
tannus_ds_ArrayTools.after = function(list,val) {
	return list.slice(list.indexOf(val) != -1 ? list.indexOf(val) + 1 : 0);
};
tannus_ds_ArrayTools.times = function(list,n) {
	var res = list.slice();
	var _g1 = 0;
	var _g = n - 1;
	while(_g1 < _g) {
		var i = _g1++;
		res = res.concat(list.slice());
	}
	return res;
};
tannus_ds_ArrayTools.min = function(list,predicate) {
	var m = null;
	var x = $iterator(list)();
	while(x.hasNext()) {
		var x1 = x.next();
		var score = predicate(x1);
		if(m == null || score < m[1]) {
			var this1 = [x1,score];
			m = this1;
		}
	}
	if(m == null) {
		return null;
	}
	return m[0];
};
tannus_ds_ArrayTools.max = function(list,predicate) {
	var m = null;
	var x = $iterator(list)();
	while(x.hasNext()) {
		var x1 = x.next();
		var score = predicate(x1);
		if(m == null || score > m[1]) {
			var this1 = [x1,score];
			m = this1;
		}
	}
	if(m == null) {
		return null;
	}
	return m[0];
};
tannus_ds_ArrayTools.minmax = function(list,predicate) {
	var l = null;
	var h = null;
	var x = $iterator(list)();
	while(x.hasNext()) {
		var x1 = x.next();
		var score = predicate(x1);
		if(l == null || score < l[1]) {
			var this1 = [x1,score];
			l = this1;
		} else if(h == null || score > h[1]) {
			var this2 = [x1,score];
			h = this2;
		}
	}
	if(l == null || h == null) {
		throw new js__$Boot_HaxeError("Error: Iterable must not be empty!");
	}
	return { "min" : l[0], "max" : h[0]};
};
tannus_ds_ArrayTools.splitfilter = function(list,pred) {
	var res = { "pass" : [], "fail" : []};
	var _g = 0;
	while(_g < list.length) {
		var item = list[_g];
		++_g;
		(pred(item) ? res.pass : res.fail).push(item);
	}
	return res;
};
tannus_ds_ArrayTools.partition = function(list,pred) {
	var results = [[],[]];
	var _g = 0;
	while(_g < list.length) {
		var x = list[_g];
		++_g;
		results[pred(x) ? 0 : 1].push(x);
	}
	return results;
};
tannus_ds_ArrayTools.mapfilter = function(list,test,map) {
	var results = [];
	var _g = 0;
	while(_g < list.length) {
		var x = list[_g];
		++_g;
		if(test(x)) {
			results.push(map(x));
		}
	}
	return results;
};
tannus_ds_ArrayTools.zip = function(left,right) {
	var pairs = [];
	var _g1 = 0;
	var _g = left.length;
	while(_g1 < _g) {
		var i = _g1++;
		var this1 = new tannus_ds_CPair(left[i],right[i]);
		pairs.push(this1);
	}
	return pairs;
};
tannus_ds_ArrayTools.zipmap = function(left,right,predicate) {
	var pairs = tannus_ds_ArrayTools.zip(left,right);
	var _g = [];
	var _g1 = 0;
	while(_g1 < pairs.length) {
		var p = pairs[_g1];
		++_g1;
		_g.push(predicate(p.left,p.right));
	}
	return _g;
};
tannus_ds_ArrayTools.gridify = function(arr) {
	return tannus_ds_Grid.fromArray2(arr);
};
tannus_ds_ArrayTools.lpad = function(list,len,value) {
	if(list.length >= len) {
		return list;
	} else {
		var res = list.slice();
		while(res.length < len) res.unshift(value);
		return res;
	}
};
tannus_ds_ArrayTools.rpad = function(list,len,value) {
	if(list.length >= len) {
		return list;
	} else {
		var res = list.slice();
		while(res.length < len) res.push(value);
		return res;
	}
};
tannus_ds_ArrayTools.every = function(list,test) {
	var x = $iterator(list)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(!test(x1)) {
			return false;
		}
	}
	return true;
};
tannus_ds_ArrayTools.chunk = function(array,size) {
	var chunks = [];
	var chunk = [];
	var _g = 0;
	while(_g < array.length) {
		var item = array[_g];
		++_g;
		if(chunk.length == size) {
			chunks.push(chunk);
			chunk = [];
		} else {
			chunk.push(item);
		}
	}
	if(chunk.length > 0) {
		chunks.push(chunk);
	}
	return chunks;
};
tannus_ds_ArrayTools.any = function(items,test) {
	var item = $iterator(items)();
	while(item.hasNext()) {
		var item1 = item.next();
		if(test(item1)) {
			return true;
		}
	}
	return false;
};
var tannus_ds_Comparable = function() { };
$hxClasses["tannus.ds.Comparable"] = tannus_ds_Comparable;
tannus_ds_Comparable.__name__ = ["tannus","ds","Comparable"];
tannus_ds_Comparable.prototype = {
	equals: null
	,__class__: tannus_ds_Comparable
};
var tannus_ds__$DataView_DataView_$Impl_$ = {};
$hxClasses["tannus.ds._DataView.DataView_Impl_"] = tannus_ds__$DataView_DataView_$Impl_$;
tannus_ds__$DataView_DataView_$Impl_$.__name__ = ["tannus","ds","_DataView","DataView_Impl_"];
tannus_ds__$DataView_DataView_$Impl_$._new = function(size,value) {
	var this1 = new tannus_ds_data_Data(size,value);
	return this1;
};
tannus_ds__$DataView_DataView_$Impl_$.get = function(this1,index) {
	return this1.get(index);
};
tannus_ds__$DataView_DataView_$Impl_$.set = function(this1,i,v) {
	return this1.set(i,v);
};
tannus_ds__$DataView_DataView_$Impl_$.fromVector = function(vector) {
	return new tannus_ds_data_Data(0).reset(vector);
};
tannus_ds__$DataView_DataView_$Impl_$.fromArray = function(array) {
	var impl = array.slice(0);
	return new tannus_ds_data_Data(0).reset(impl);
};
var tannus_ds__$Delta_Delta_$Impl_$ = {};
$hxClasses["tannus.ds._Delta.Delta_Impl_"] = tannus_ds__$Delta_Delta_$Impl_$;
tannus_ds__$Delta_Delta_$Impl_$.__name__ = ["tannus","ds","_Delta","Delta_Impl_"];
tannus_ds__$Delta_Delta_$Impl_$.__properties__ = {get_previous:"get_previous",get_current:"get_current"}
tannus_ds__$Delta_Delta_$Impl_$._new = function(cur,prev) {
	var this1;
	var this2 = [cur,prev];
	this1 = this2;
	return this1;
};
tannus_ds__$Delta_Delta_$Impl_$.toString = function(this1) {
	var res = "Delta(";
	if(this1[1] != null) {
		res += "from " + Std.string(this1[1]) + " ";
	}
	res += "to " + Std.string(this1[0]) + ")";
	return res;
};
tannus_ds__$Delta_Delta_$Impl_$.toPair = function(this1) {
	return [this1[1],this1[0]];
};
tannus_ds__$Delta_Delta_$Impl_$.get_current = function(this1) {
	return this1[0];
};
tannus_ds__$Delta_Delta_$Impl_$.get_previous = function(this1) {
	return this1[1];
};
var tannus_ds_Destructible = function() { };
$hxClasses["tannus.ds.Destructible"] = tannus_ds_Destructible;
tannus_ds_Destructible.__name__ = ["tannus","ds","Destructible"];
tannus_ds_Destructible.prototype = {
	destroy: null
	,__class__: tannus_ds_Destructible
};
var tannus_ds__$Dict_Dict_$Impl_$ = {};
$hxClasses["tannus.ds._Dict.Dict_Impl_"] = tannus_ds__$Dict_Dict_$Impl_$;
tannus_ds__$Dict_Dict_$Impl_$.__name__ = ["tannus","ds","_Dict","Dict_Impl_"];
tannus_ds__$Dict_Dict_$Impl_$.get = function(this1,key) {
	return this1.get(key);
};
tannus_ds__$Dict_Dict_$Impl_$.set = function(this1,key,value) {
	return this1.set(key,value);
};
tannus_ds__$Dict_Dict_$Impl_$.toStringDict = function(v) {
	return new tannus_ds_dict_StringDict();
};
tannus_ds__$Dict_Dict_$Impl_$.toIntDict = function(v) {
	return new tannus_ds_dict_IntDict();
};
tannus_ds__$Dict_Dict_$Impl_$.toEnumValueDict = function(v) {
	return new tannus_ds_dict_EnumValueDict();
};
tannus_ds__$Dict_Dict_$Impl_$.toIComparableDict = function(v) {
	return new tannus_ds_dict_IComparableDict();
};
tannus_ds__$Dict_Dict_$Impl_$.toComparableDict = function(v) {
	return new tannus_ds_dict_ComparableDict();
};
var tannus_ds__$EitherType_EitherType_$Impl_$ = {};
$hxClasses["tannus.ds._EitherType.EitherType_Impl_"] = tannus_ds__$EitherType_EitherType_$Impl_$;
tannus_ds__$EitherType_EitherType_$Impl_$.__name__ = ["tannus","ds","_EitherType","EitherType_Impl_"];
tannus_ds__$EitherType_EitherType_$Impl_$.__properties__ = {get_type:"get_type"}
tannus_ds__$EitherType_EitherType_$Impl_$._new = function(e) {
	var this1 = e;
	return this1;
};
tannus_ds__$EitherType_EitherType_$Impl_$.get_type = function(this1) {
	return this1;
};
tannus_ds__$EitherType_EitherType_$Impl_$.toLeft = function(this1) {
	var _g = this1;
	switch(_g[1]) {
	case 0:
		var lv = _g[2];
		return lv;
	case 1:
		var rv = _g[2];
		throw new js__$Boot_HaxeError("EitherTypeError: " + Std.string(rv) + " was not the expected value!");
		break;
	}
};
tannus_ds__$EitherType_EitherType_$Impl_$.toRight = function(this1) {
	var _g = this1;
	switch(_g[1]) {
	case 0:
		var lv = _g[2];
		throw new js__$Boot_HaxeError("EitherTypeError: " + Std.string(lv) + " was not the expected value!");
		break;
	case 1:
		var rv = _g[2];
		return rv;
	}
};
tannus_ds__$EitherType_EitherType_$Impl_$.fromL = function(v) {
	var this1 = tannus_ds_Either.Left(v);
	return this1;
};
tannus_ds__$EitherType_EitherType_$Impl_$.fromR = function(v) {
	var this1 = tannus_ds_Either.Right(v);
	return this1;
};
var tannus_ds_Either = $hxClasses["tannus.ds.Either"] = { __ename__ : ["tannus","ds","Either"], __constructs__ : ["Left","Right"] };
tannus_ds_Either.Left = function(value) { var $x = ["Left",0,value]; $x.__enum__ = tannus_ds_Either; $x.toString = $estr; return $x; };
tannus_ds_Either.Right = function(value) { var $x = ["Right",1,value]; $x.__enum__ = tannus_ds_Either; $x.toString = $estr; return $x; };
var tannus_ds_IComparable = function() { };
$hxClasses["tannus.ds.IComparable"] = tannus_ds_IComparable;
tannus_ds_IComparable.__name__ = ["tannus","ds","IComparable"];
tannus_ds_IComparable.prototype = {
	compareTo: null
	,__class__: tannus_ds_IComparable
};
var tannus_ds_Range = function(mi,ma) {
	this.min = mi;
	this.max = ma;
};
$hxClasses["tannus.ds.Range"] = tannus_ds_Range;
tannus_ds_Range.__name__ = ["tannus","ds","Range"];
tannus_ds_Range.__interfaces__ = [tannus_ds_IComparable];
tannus_ds_Range.prototype = {
	contains: function(v) {
		if(v > this.min) {
			return v < this.max;
		} else {
			return false;
		}
	}
	,clamp: function(v) {
		if(v < this.min) {
			return this.min;
		} else if(v > this.max) {
			return this.max;
		} else {
			return v;
		}
	}
	,toString: function() {
		return "Range(" + Std.string(this.min) + " => " + Std.string(this.max) + ")";
	}
	,compareTo: function(other) {
		return tannus_math_TMath.compareChain([Reflect.compare(this.min,other.min),Reflect.compare(this.max,other.max)]);
	}
	,get_size: function() {
		return this.max - this.min;
	}
	,min: null
	,max: null
	,__class__: tannus_ds_Range
	,__properties__: {get_size:"get_size"}
};
var tannus_ds_FloatRange = function(mi,ma) {
	tannus_ds_Range.call(this,mi,ma);
};
$hxClasses["tannus.ds.FloatRange"] = tannus_ds_FloatRange;
tannus_ds_FloatRange.__name__ = ["tannus","ds","FloatRange"];
tannus_ds_FloatRange.__super__ = tannus_ds_Range;
tannus_ds_FloatRange.prototype = $extend(tannus_ds_Range.prototype,{
	__class__: tannus_ds_FloatRange
});
var tannus_ds_FunctionTools = function() { };
$hxClasses["tannus.ds.FunctionTools"] = tannus_ds_FunctionTools;
tannus_ds_FunctionTools.__name__ = ["tannus","ds","FunctionTools"];
tannus_ds_FunctionTools.memoize = function(f,str) {
	if(str == null) {
		str = Std.string;
	}
	var cache = new haxe_ds_StringMap();
	return Reflect.makeVarArgs(function(args) {
		var key = str(args);
		if(__map_reserved[key] != null ? cache.existsReserved(key) : cache.h.hasOwnProperty(key)) {
			return __map_reserved[key] != null ? cache.getReserved(key) : cache.h[key];
		} else {
			var result = f.apply(null,args);
			var value = result;
			if(__map_reserved[key] != null) {
				cache.setReserved(key,value);
			} else {
				cache.h[key] = value;
			}
			return result;
		}
	});
};
var tannus_ds_Grid = function(w,h) {
	this.w = w;
	this.h = h;
	var this1 = new Array(w * h);
	this.data = this1;
};
$hxClasses["tannus.ds.Grid"] = tannus_ds_Grid;
tannus_ds_Grid.__name__ = ["tannus","ds","Grid"];
tannus_ds_Grid.fromArray = function(dat,w,h) {
	var grid = new tannus_ds_Grid(w,h);
	grid.data = dat.slice(0);
	return grid;
};
tannus_ds_Grid.fromArray2 = function(dat) {
	var h = dat.length;
	if(h > 0) {
		var w = dat[0].length;
		if(w <= 0) {
			throw new js__$Boot_HaxeError("GridError: Grid width must be >= 0");
		}
		return tannus_ds_Grid.fromArray(tannus_ds_ArrayTools.flatten(dat),w,h);
	} else {
		throw new js__$Boot_HaxeError("GridError: Grid height must be >= 0");
	}
};
tannus_ds_Grid.prototype = {
	set: function(x,y,value) {
		if(!(x >= this.w || x < 0 || (y >= this.h || y < 0))) {
			return this.data[x + y * this.w] = value;
		} else {
			return value;
		}
	}
	,setAt: function(pos,value) {
		return this.set(pos._x,pos._y,value);
	}
	,get: function(x,y) {
		if(x >= this.w || x < 0 || (y >= this.h || y < 0)) {
			return null;
		}
		return this.data[x + y * this.w];
	}
	,at: function(pos) {
		var _gthis = this;
		var f = $bind(this,this.get);
		var x = pos._x;
		var y = pos._y;
		var g = function() {
			return f(x,y);
		};
		var f1 = $bind(this,this.set);
		var x1 = pos._x;
		var y1 = pos._y;
		var this1 = new tannus_io__$Pointer_Ref(g,function(a1) {
			return f1(x1,y1,a1);
		});
		var ref = this1;
		ref.deleter = function() {
			_gthis.remove(pos._x,pos._y);
		};
		return ref;
	}
	,pos: function(x,y) {
		return new tannus_ds_GridPos(x,y);
	}
	,posOf: function(value) {
		var _g1 = 0;
		var _g = this.data.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.data[i] == value) {
				return this.pos(i % this.w,i / this.w | 0);
			}
		}
		return null;
	}
	,valueAt: function(pos) {
		return this.get(pos._x,pos._y);
	}
	,remove: function(x,y) {
		var v = this.get(x,y);
		this.data[x + y * this.w] = null;
		return v != null;
	}
	,iterator: function() {
		return new tannus_ds__$Grid_GridValueIterator(this);
	}
	,positions: function() {
		return new tannus_ds__$Grid_GridPosIterator(this);
	}
	,index: function(x,y) {
		return x + y * this.w;
	}
	,position: function(index) {
		return new tannus_ds_GridPos(index % this.w,index / this.w | 0);
	}
	,get_length: function() {
		return this.data.length;
	}
	,w: null
	,h: null
	,data: null
	,__class__: tannus_ds_Grid
	,__properties__: {get_length:"get_length"}
};
var tannus_ds__$Grid_GridValueIterator = function(g) {
	this.grid = g;
	this.it = this.grid.positions();
};
$hxClasses["tannus.ds._Grid.GridValueIterator"] = tannus_ds__$Grid_GridValueIterator;
tannus_ds__$Grid_GridValueIterator.__name__ = ["tannus","ds","_Grid","GridValueIterator"];
tannus_ds__$Grid_GridValueIterator.prototype = {
	hasNext: function() {
		return this.it.hasNext();
	}
	,next: function() {
		var p = this.it.next();
		return this.grid.get(p._x,p._y);
	}
	,grid: null
	,it: null
	,__class__: tannus_ds__$Grid_GridValueIterator
};
var tannus_ds__$Grid_GridPosIterator = function(g) {
	this.grid = g;
	this.it = new IntIterator(0,g.data.length);
};
$hxClasses["tannus.ds._Grid.GridPosIterator"] = tannus_ds__$Grid_GridPosIterator;
tannus_ds__$Grid_GridPosIterator.__name__ = ["tannus","ds","_Grid","GridPosIterator"];
tannus_ds__$Grid_GridPosIterator.prototype = {
	hasNext: function() {
		var _this = this.it;
		return _this.min < _this.max;
	}
	,next: function() {
		var _this = this.grid;
		var index = this.it.min++;
		return new tannus_ds_GridPos(index % _this.w,index / _this.w | 0);
	}
	,grid: null
	,it: null
	,__class__: tannus_ds__$Grid_GridPosIterator
};
var tannus_ds_GridPos = function(x,y) {
	this._x = x;
	this._y = y;
};
$hxClasses["tannus.ds.GridPos"] = tannus_ds_GridPos;
tannus_ds_GridPos.__name__ = ["tannus","ds","GridPos"];
tannus_ds_GridPos.prototype = {
	left: function() {
		return new tannus_ds_GridPos(this._x - 1,this._y);
	}
	,right: function() {
		return new tannus_ds_GridPos(this._x + 1,this._y);
	}
	,top: function() {
		return new tannus_ds_GridPos(this._x,this._y - 1);
	}
	,bottom: function() {
		return new tannus_ds_GridPos(this._x,this._y + 1);
	}
	,toString: function() {
		return "(" + this._x + ", " + this._y + ")";
	}
	,_x: null
	,get_x: function() {
		return this._x;
	}
	,_y: null
	,get_y: function() {
		return this._y;
	}
	,__class__: tannus_ds_GridPos
	,__properties__: {get_y:"get_y",get_x:"get_x"}
};
var tannus_ds_MapTools = function() { };
$hxClasses["tannus.ds.MapTools"] = tannus_ds_MapTools;
tannus_ds_MapTools.__name__ = ["tannus","ds","MapTools"];
tannus_ds_MapTools.keyArray = function(self) {
	var _g = [];
	var k = self.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		_g.push(k1);
	}
	return _g;
};
tannus_ds_MapTools.pull = function(o,source) {
	var key = source.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var v = source.get(key1);
		o.set(key1,v);
	}
};
tannus_ds_MapTools.toObject = function(self) {
	var o = { };
	var key = self.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var value = __map_reserved[key1] != null ? self.getReserved(key1) : self.h[key1];
		var tmp;
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + key1];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](value);
		} else {
			o[key1] = value;
		}
		var tmp2;
		if(o == null) {
			null;
		} else {
			var tmp3;
			if(o.__properties__) {
				tmp2 = o.__properties__["get_" + key1];
				tmp3 = tmp2;
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				o[tmp2]();
			}
		}
	}
	return o;
};
var tannus_ds__$Maybe_Maybe_$Impl_$ = {};
$hxClasses["tannus.ds._Maybe.Maybe_Impl_"] = tannus_ds__$Maybe_Maybe_$Impl_$;
tannus_ds__$Maybe_Maybe_$Impl_$.__name__ = ["tannus","ds","_Maybe","Maybe_Impl_"];
tannus_ds__$Maybe_Maybe_$Impl_$.__properties__ = {get_value:"get_value",get_exists:"get_exists"}
tannus_ds__$Maybe_Maybe_$Impl_$._new = function(x) {
	var this1 = x;
	return this1;
};
tannus_ds__$Maybe_Maybe_$Impl_$.or = function(this1,alt) {
	if(this1 != null) {
		return this1;
	} else {
		return alt;
	}
};
tannus_ds__$Maybe_Maybe_$Impl_$.orGetter = function(this1,gettr) {
	if(this1 != null) {
		return this1;
	} else {
		return gettr();
	}
};
tannus_ds__$Maybe_Maybe_$Impl_$.runIf = function(this1,f) {
	if(this1 != null) {
		return f(this1 != null ? this1 : this1);
	} else {
		return null;
	}
};
tannus_ds__$Maybe_Maybe_$Impl_$.get_exists = function(this1) {
	return this1 != null;
};
tannus_ds__$Maybe_Maybe_$Impl_$.get_value = function(this1) {
	return this1 != null ? this1 : this1;
};
tannus_ds__$Maybe_Maybe_$Impl_$.orDie = function(this1,error) {
	if(this1 == null) {
		throw js__$Boot_HaxeError.wrap(error);
	}
	return this1 != null ? this1 : this1;
};
tannus_ds__$Maybe_Maybe_$Impl_$.toNonNullable = function(this1) {
	if(this1 != null) {
		return this1;
	} else {
		return this1;
	}
};
tannus_ds__$Maybe_Maybe_$Impl_$.toBoolean = function(this1) {
	return this1 != null;
};
var tannus_ds_Memory = function() { };
$hxClasses["tannus.ds.Memory"] = tannus_ds_Memory;
tannus_ds_Memory.__name__ = ["tannus","ds","Memory"];
tannus_ds_Memory.uniqueIdInt = function() {
	var id = tannus_ds_Memory.state;
	tannus_ds_Memory.state++;
	return id;
};
tannus_ds_Memory.uniqueIdString = function(prefix) {
	if(prefix == null) {
		prefix = "";
	}
	return prefix + tannus_ds_Memory.uniqueIdInt();
};
tannus_ds_Memory.allocRandomId = function(digits) {
	var id = "";
	var r = new tannus_math_Random();
	var _g1 = 0;
	var _g = digits;
	while(_g1 < _g) {
		var i = _g1++;
		var range = [0,0];
		var letter = Math.floor(r.nextInt() / 2147483647 * 2) == 1;
		if(letter) {
			var upper = Math.floor(r.nextInt() / 2147483647 * 2) == 1;
			if(upper) {
				range = [65,90];
			} else {
				range = [97,122];
			}
		} else {
			range = [48,57];
		}
		var min = range[0];
		var n = Math.floor(r.nextInt() / 2147483647 * (range[1] - min + 1) + min);
		var this1;
		if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
			throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
		}
		this1 = n;
		var c = this1;
		id += String.fromCharCode(c);
	}
	if(Lambda.has(tannus_ds_Memory.used,id)) {
		return tannus_ds_Memory.allocRandomId(digits);
	} else {
		tannus_ds_Memory.used.push(id);
		return id;
	}
};
tannus_ds_Memory.freeRandomId = function(id) {
	return HxOverrides.remove(tannus_ds_Memory.used,id);
};
var tannus_ds__$Method_Method_$Impl_$ = {};
$hxClasses["tannus.ds._Method.Method_Impl_"] = tannus_ds__$Method_Method_$Impl_$;
tannus_ds__$Method_Method_$Impl_$.__name__ = ["tannus","ds","_Method","Method_Impl_"];
tannus_ds__$Method_Method_$Impl_$.__properties__ = {get_call:"get_call"}
tannus_ds__$Method_Method_$Impl_$._new = function(func,ctx) {
	var this1;
	var o = ctx;
	var a1 = func;
	this1 = function(a2) {
		return Reflect.callMethod(o,a1,a2);
	};
	return this1;
};
tannus_ds__$Method_Method_$Impl_$.get_call = function(this1) {
	return Reflect.makeVarArgs(this1);
};
tannus_ds__$Method_Method_$Impl_$.fromFunction = function(f) {
	var this1;
	var a1 = f;
	this1 = function(a2) {
		return Reflect.callMethod(null,a1,a2);
	};
	return this1;
};
var tannus_ds__$Obj_Obj_$Impl_$ = {};
$hxClasses["tannus.ds._Obj.Obj_Impl_"] = tannus_ds__$Obj_Obj_$Impl_$;
tannus_ds__$Obj_Obj_$Impl_$.__name__ = ["tannus","ds","_Obj","Obj_Impl_"];
tannus_ds__$Obj_Obj_$Impl_$._new = function(o) {
	var this1 = tannus_ds_CObj.create(o);
	return this1;
};
tannus_ds__$Obj_Obj_$Impl_$.toDyn = function(this1) {
	return this1.o;
};
tannus_ds__$Obj_Obj_$Impl_$.get = function(this1,key) {
	var o = this1.o;
	var tmp;
	var tmp1;
	if(o == null) {
		tmp1 = null;
	} else {
		var tmp2;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + key];
			tmp2 = tmp;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = o[tmp]();
		} else {
			tmp1 = o[key];
		}
	}
	return tmp1;
};
tannus_ds__$Obj_Obj_$Impl_$.mget = function(this1,key) {
	var o = this1.o;
	var tmp;
	var tmp1;
	if(o == null) {
		tmp1 = null;
	} else {
		var tmp2;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + key];
			tmp2 = tmp;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = o[tmp]();
		} else {
			tmp1 = o[key];
		}
	}
	return tmp1;
};
tannus_ds__$Obj_Obj_$Impl_$.set = function(this1,key,val) {
	return this1.set(key,val);
};
tannus_ds__$Obj_Obj_$Impl_$.fromDynamic = function(d) {
	return tannus_ds_CObj.create(d);
};
var tannus_ds_CObj = $hx_exports["tannus"]["ds"]["Obj"] = function(obj) {
	this.o = obj;
	this.refCache = new haxe_ds_StringMap();
};
$hxClasses["tannus.ds.CObj"] = tannus_ds_CObj;
tannus_ds_CObj.__name__ = ["tannus","ds","CObj"];
tannus_ds_CObj.create = function(o) {
	if(js_Boot.__instanceof(o,tannus_ds_CObj)) {
		return o;
	} else {
		return new tannus_ds_CObj(o);
	}
};
tannus_ds_CObj.prototype = {
	keys: function() {
		return Reflect.fields(this.o);
	}
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.o,key);
	}
	,get: function(key) {
		var o = this.o;
		var tmp;
		if(o == null) {
			return null;
		} else {
			var tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + key];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return o[tmp]();
			} else {
				return o[key];
			}
		}
	}
	,set: function(key,val) {
		var o = this.o;
		var tmp;
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + key];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](val);
		} else {
			o[key] = val;
		}
		var o1 = this.o;
		var tmp2;
		var tmp3;
		if(o1 == null) {
			tmp3 = null;
		} else {
			var tmp4;
			if(o1.__properties__) {
				tmp2 = o1.__properties__["get_" + key];
				tmp4 = tmp2;
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				tmp3 = o1[tmp2]();
			} else {
				tmp3 = o1[key];
			}
		}
		return tmp3;
	}
	,method: function(name) {
		var _e = this.o;
		var f = function(func,args) {
			return func.apply(_e,args);
		};
		var o = this.o;
		var tmp;
		var a1;
		if(o == null) {
			a1 = null;
		} else {
			var a11;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + name];
				a11 = tmp;
			} else {
				a11 = false;
			}
			if(a11) {
				a1 = o[tmp]();
			} else {
				a1 = o[name];
			}
		}
		var a12 = a1;
		return Reflect.makeVarArgs(function(a2) {
			return f(a12,a2);
		});
	}
	,call: function(name,args) {
		var o = this.o;
		var o1 = this.o;
		var tmp;
		var func;
		if(o1 == null) {
			func = null;
		} else {
			var func1;
			if(o1.__properties__) {
				tmp = o1.__properties__["get_" + name];
				func1 = tmp;
			} else {
				func1 = false;
			}
			if(func1) {
				func = o1[tmp]();
			} else {
				func = o1[name];
			}
		}
		return func.apply(o,args);
	}
	,field: function(key) {
		var _gthis = this;
		var _this = this.refCache;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.refCache;
			if(__map_reserved[key] != null) {
				return _this1.getReserved(key);
			} else {
				return _this1.h[key];
			}
		} else {
			var this1;
			var f = $bind(this,this.get);
			var a1 = key;
			var f1 = $bind(this,this.set);
			var a11 = key;
			this1 = new tannus_io__$Pointer_Ref(function() {
				return f(a1);
			},function(a2) {
				return f1(a11,a2);
			});
			var ref = this1;
			var _this2 = this.refCache;
			if(__map_reserved[key] != null) {
				_this2.setReserved(key,ref);
			} else {
				_this2.h[key] = ref;
			}
			return ref;
		}
	}
	,remove: function(key) {
		return Reflect.deleteField(this.o,key);
	}
	,pluck: function(keys) {
		var o = { };
		var copy = tannus_ds_CObj.create(o);
		var _g = 0;
		var _g1 = this.keys();
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			if(Lambda.has(keys,k)) {
				var o1 = this.o;
				var tmp;
				var val;
				if(o1 == null) {
					val = null;
				} else {
					var val1;
					if(o1.__properties__) {
						tmp = o1.__properties__["get_" + k];
						val1 = tmp;
					} else {
						val1 = false;
					}
					if(val1) {
						val = o1[tmp]();
					} else {
						val = o1[k];
					}
				}
				copy.set(k,val);
			}
		}
		return copy;
	}
	,rawclone: function() {
		var o = { };
		var copy = tannus_ds_CObj.create(o);
		var _g = 0;
		var _g1 = this.keys();
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			var o1 = this.o;
			var tmp;
			var val;
			if(o1 == null) {
				val = null;
			} else {
				var val1;
				if(o1.__properties__) {
					tmp = o1.__properties__["get_" + k];
					val1 = tmp;
				} else {
					val1 = false;
				}
				if(val1) {
					val = o1[tmp]();
				} else {
					val = o1[k];
				}
			}
			copy.set(k,val);
		}
		return copy;
	}
	,clone: function() {
		var o = this.o;
		var klass = o == null ? null : js_Boot.getClass(o);
		if(klass != null) {
			var copi = Type.createEmptyInstance(klass);
			var ocopy = tannus_ds_CObj.create(copi);
			var _g = 0;
			var _g1 = this.keys();
			while(_g < _g1.length) {
				var k = _g1[_g];
				++_g;
				var o1 = this.o;
				var tmp;
				var val;
				if(o1 == null) {
					val = null;
				} else {
					var val1;
					if(o1.__properties__) {
						tmp = o1.__properties__["get_" + k];
						val1 = tmp;
					} else {
						val1 = false;
					}
					if(val1) {
						val = o1[tmp]();
					} else {
						val = o1[k];
					}
				}
				ocopy.set(k,val);
			}
			return ocopy;
		} else {
			return Reflect.copy(this.o);
		}
	}
	,defineGetter: function(key,getter) {
		var o = this.o;
		var o1 = this.o;
		var tmp;
		var func;
		if(o1 == null) {
			func = null;
		} else {
			var func1;
			if(o1.__properties__) {
				tmp = o1.__properties__["get_" + "__defineGetter__"];
				func1 = tmp;
			} else {
				func1 = false;
			}
			if(func1) {
				func = o1[tmp]();
			} else {
				func = o1["__defineGetter__"];
			}
		}
		func.apply(o,[key,getter]);
	}
	,defineSetter: function(key,setter) {
		var o = this.o;
		var o1 = this.o;
		var tmp;
		var func;
		if(o1 == null) {
			func = null;
		} else {
			var func1;
			if(o1.__properties__) {
				tmp = o1.__properties__["get_" + "__defineSetter__"];
				func1 = tmp;
			} else {
				func1 = false;
			}
			if(func1) {
				func = o1[tmp]();
			} else {
				func = o1["__defineSetter__"];
			}
		}
		func.apply(o,[key,setter]);
	}
	,defineProperty: function(name,pointer) {
		var getter = pointer.getter;
		var o = this.o;
		var o1 = this.o;
		var tmp;
		var func;
		if(o1 == null) {
			func = null;
		} else {
			var func1;
			if(o1.__properties__) {
				tmp = o1.__properties__["get_" + "__defineGetter__"];
				func1 = tmp;
			} else {
				func1 = false;
			}
			if(func1) {
				func = o1[tmp]();
			} else {
				func = o1["__defineGetter__"];
			}
		}
		func.apply(o,[name,getter]);
		var setter = pointer.setter;
		var o2 = this.o;
		var o3 = this.o;
		var tmp1;
		var func2;
		if(o3 == null) {
			func2 = null;
		} else {
			var func3;
			if(o3.__properties__) {
				tmp1 = o3.__properties__["get_" + "__defineSetter__"];
				func3 = tmp1;
			} else {
				func3 = false;
			}
			if(func3) {
				func2 = o3[tmp1]();
			} else {
				func2 = o3["__defineSetter__"];
			}
		}
		func2.apply(o2,[name,setter]);
	}
	,o: null
	,refCache: null
	,__class__: tannus_ds_CObj
};
var tannus_ds__$Object_Object_$Impl_$ = {};
$hxClasses["tannus.ds._Object.Object_Impl_"] = tannus_ds__$Object_Object_$Impl_$;
tannus_ds__$Object_Object_$Impl_$.__name__ = ["tannus","ds","_Object","Object_Impl_"];
tannus_ds__$Object_Object_$Impl_$.__properties__ = {get_keys:"get_keys"}
tannus_ds__$Object_Object_$Impl_$._new = function(o) {
	var this1 = o;
	return this1;
};
tannus_ds__$Object_Object_$Impl_$.get_keys = function(this1) {
	return Reflect.fields(this1);
};
tannus_ds__$Object_Object_$Impl_$.get = function(this1,key) {
	var tmp;
	var tmp1;
	if(this1 == null) {
		tmp1 = null;
	} else {
		var tmp2;
		if(this1.__properties__) {
			tmp = this1.__properties__["get_" + key];
			tmp2 = tmp;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = this1[tmp]();
		} else {
			tmp1 = this1[key];
		}
	}
	return tmp1;
};
tannus_ds__$Object_Object_$Impl_$.rawget = function(this1,key) {
	var tmp;
	var tmp1;
	if(this1 == null) {
		tmp1 = null;
	} else {
		var tmp2;
		if(this1.__properties__) {
			tmp = this1.__properties__["get_" + key];
			tmp2 = tmp;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = this1[tmp]();
		} else {
			tmp1 = this1[key];
		}
	}
	return tmp1;
};
tannus_ds__$Object_Object_$Impl_$.set = function(this1,key,value) {
	var tmp;
	var tmp1;
	if(this1.__properties__) {
		tmp = this1.__properties__["set_" + key];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		this1[tmp](value);
	} else {
		this1[key] = value;
	}
	var tmp2;
	var tmp3;
	if(this1 == null) {
		tmp3 = null;
	} else {
		var tmp4;
		if(this1.__properties__) {
			tmp2 = this1.__properties__["get_" + key];
			tmp4 = tmp2;
		} else {
			tmp4 = false;
		}
		if(tmp4) {
			tmp3 = this1[tmp2]();
		} else {
			tmp3 = this1[key];
		}
	}
	return tmp3;
};
tannus_ds__$Object_Object_$Impl_$.exists = function(this1,key) {
	return Object.prototype.hasOwnProperty.call(this1,key);
};
tannus_ds__$Object_Object_$Impl_$.remove = function(this1,key) {
	Reflect.deleteField(this1,key);
};
tannus_ds__$Object_Object_$Impl_$.clone = function(this1) {
	var c = { };
	var _g = 0;
	var _g1 = Reflect.fields(this1);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		var tmp;
		var value;
		if(this1 == null) {
			value = null;
		} else {
			var value1;
			if(this1.__properties__) {
				tmp = this1.__properties__["get_" + k];
				value1 = tmp;
			} else {
				value1 = false;
			}
			if(value1) {
				value = this1[tmp]();
			} else {
				value = this1[k];
			}
		}
		var value2 = value;
		var tmp1;
		var tmp2;
		if(c.__properties__) {
			tmp1 = c.__properties__["set_" + k];
			tmp2 = tmp1;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			c[tmp1](value2);
		} else {
			c[k] = value2;
		}
		var tmp3;
		if(c == null) {
			null;
		} else {
			var tmp4;
			if(c.__properties__) {
				tmp3 = c.__properties__["get_" + k];
				tmp4 = tmp3;
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				c[tmp3]();
			}
		}
	}
	return c;
};
tannus_ds__$Object_Object_$Impl_$.pairs = function(this1) {
	return Reflect.fields(this1).map(function(k) {
		var tmp;
		var tmp1;
		if(this1 == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(this1.__properties__) {
				tmp = this1.__properties__["get_" + k];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = this1[tmp]();
			} else {
				tmp1 = this1[k];
			}
		}
		return { "name" : k, "value" : tmp1};
	});
};
tannus_ds__$Object_Object_$Impl_$.iterator = function(this1) {
	var this2 = this1;
	return HxOverrides.iter(Reflect.fields(this2).map(function(k) {
		var tmp;
		var _this;
		if(this2 == null) {
			_this = null;
		} else {
			var _this1;
			if(this2.__properties__) {
				tmp = this2.__properties__["get_" + k];
				_this1 = tmp;
			} else {
				_this1 = false;
			}
			if(_this1) {
				_this = this2[tmp]();
			} else {
				_this = this2[k];
			}
		}
		return { "name" : k, "value" : _this};
	}));
};
tannus_ds__$Object_Object_$Impl_$.increment = function(this1,other) {
	var _g = 0;
	var _g1 = Reflect.fields(other);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(this1,key)) {
			var tmp;
			var value;
			if(other == null) {
				value = null;
			} else {
				var value1;
				if(other.__properties__) {
					tmp = other.__properties__["get_" + key];
					value1 = tmp;
				} else {
					value1 = false;
				}
				if(value1) {
					value = other[tmp]();
				} else {
					value = other[key];
				}
			}
			var value2 = value;
			var tmp1;
			var tmp2;
			if(this1.__properties__) {
				tmp1 = this1.__properties__["set_" + key];
				tmp2 = tmp1;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				this1[tmp1](value2);
			} else {
				this1[key] = value2;
			}
			var tmp3;
			if(this1 == null) {
				null;
			} else {
				var tmp4;
				if(this1.__properties__) {
					tmp3 = this1.__properties__["get_" + key];
					tmp4 = tmp3;
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					this1[tmp3]();
				}
			}
		}
	}
	var this2 = this1;
	return this2;
};
tannus_ds__$Object_Object_$Impl_$.plus = function(this1,other) {
	var res = tannus_ds__$Object_Object_$Impl_$.clone(this1);
	var _g = 0;
	var _g1 = Reflect.fields(other);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(res,k)) {
			var tmp;
			var value;
			if(other == null) {
				value = null;
			} else {
				var value1;
				if(other.__properties__) {
					tmp = other.__properties__["get_" + k];
					value1 = tmp;
				} else {
					value1 = false;
				}
				if(value1) {
					value = other[tmp]();
				} else {
					value = other[k];
				}
			}
			var value2 = value;
			var tmp1;
			var tmp2;
			if(res.__properties__) {
				tmp1 = res.__properties__["set_" + k];
				tmp2 = tmp1;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				res[tmp1](value2);
			} else {
				res[k] = value2;
			}
			var tmp3;
			if(res == null) {
				null;
			} else {
				var tmp4;
				if(res.__properties__) {
					tmp3 = res.__properties__["get_" + k];
					tmp4 = tmp3;
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					res[tmp3]();
				}
			}
		}
	}
	return res;
};
tannus_ds__$Object_Object_$Impl_$.write = function(this1,o) {
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		var tmp;
		var value;
		if(o == null) {
			value = null;
		} else {
			var value1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + k];
				value1 = tmp;
			} else {
				value1 = false;
			}
			if(value1) {
				value = o[tmp]();
			} else {
				value = o[k];
			}
		}
		var value2 = value;
		var tmp1;
		var tmp2;
		if(this1.__properties__) {
			tmp1 = this1.__properties__["set_" + k];
			tmp2 = tmp1;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			this1[tmp1](value2);
		} else {
			this1[k] = value2;
		}
		var tmp3;
		if(this1 == null) {
			null;
		} else {
			var tmp4;
			if(this1.__properties__) {
				tmp3 = this1.__properties__["get_" + k];
				tmp4 = tmp3;
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				this1[tmp3]();
			}
		}
	}
};
tannus_ds__$Object_Object_$Impl_$.method = function(this1,mname) {
	var func;
	var tmp;
	var this2;
	if(this1 == null) {
		this2 = null;
	} else {
		var this3;
		if(this1.__properties__) {
			tmp = this1.__properties__["get_" + mname];
			this3 = tmp;
		} else {
			this3 = false;
		}
		if(this3) {
			this2 = this1[tmp]();
		} else {
			this2 = this1[mname];
		}
	}
	var this4 = this2;
	if(this4 != null) {
		func = this4;
	} else {
		func = this4;
	}
	var this5;
	var o = this1;
	var a1 = func;
	this5 = function(a2) {
		return Reflect.callMethod(o,a1,a2);
	};
	return this5;
};
tannus_ds__$Object_Object_$Impl_$.plucka = function(this1,keys) {
	return tannus_ds__$Object_Object_$Impl_$._plk(this1,keys);
};
tannus_ds__$Object_Object_$Impl_$._plk = function(this1,keys,mtarget) {
	var target = mtarget != null ? mtarget : { };
	var _g = 0;
	while(_g < keys.length) {
		var k = keys[_g];
		++_g;
		var tmp;
		var value;
		if(this1 == null) {
			value = null;
		} else {
			var value1;
			if(this1.__properties__) {
				tmp = this1.__properties__["get_" + k];
				value1 = tmp;
			} else {
				value1 = false;
			}
			if(value1) {
				value = this1[tmp]();
			} else {
				value = this1[k];
			}
		}
		var value2 = value;
		var tmp1;
		var tmp2;
		if(target.__properties__) {
			tmp1 = target.__properties__["set_" + k];
			tmp2 = tmp1;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			target[tmp1](value2);
		} else {
			target[k] = value2;
		}
		var tmp3;
		if(target == null) {
			null;
		} else {
			var tmp4;
			if(target.__properties__) {
				tmp3 = target.__properties__["get_" + k];
				tmp4 = tmp3;
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				target[tmp3]();
			}
		}
	}
	return target;
};
tannus_ds__$Object_Object_$Impl_$["is"] = function(this1,oreg) {
	var this2 = new tannus_nore_CSelector(oreg);
	var sel = this2;
	return sel.test(this1);
};
tannus_ds__$Object_Object_$Impl_$.toMap = function(this1) {
	var m = new haxe_ds_StringMap();
	var this2 = this1;
	var p = HxOverrides.iter(Reflect.fields(this2).map(function(k) {
		var tmp;
		var _this;
		if(this2 == null) {
			_this = null;
		} else {
			var _this1;
			if(this2.__properties__) {
				tmp = this2.__properties__["get_" + k];
				_this1 = tmp;
			} else {
				_this1 = false;
			}
			if(_this1) {
				_this = this2[tmp]();
			} else {
				_this = this2[k];
			}
		}
		return { "name" : k, "value" : _this};
	}));
	while(p.hasNext()) {
		var p1 = p.next();
		var key = p1.name;
		var value = p1.value;
		if(__map_reserved[key] != null) {
			m.setReserved(key,value);
		} else {
			m.h[key] = value;
		}
	}
	return m;
};
tannus_ds__$Object_Object_$Impl_$.fromMap = function(map) {
	var this1 = { };
	var o = this1;
	var key = map.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var value = __map_reserved[key1] != null ? map.getReserved(key1) : map.h[key1];
		var tmp;
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + key1];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](value);
		} else {
			o[key1] = value;
		}
		var tmp2;
		if(o == null) {
			null;
		} else {
			var tmp3;
			if(o.__properties__) {
				tmp2 = o.__properties__["get_" + key1];
				tmp3 = tmp2;
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				o[tmp2]();
			}
		}
	}
	return o;
};
var tannus_ds__$Pair_Pair_$Impl_$ = {};
$hxClasses["tannus.ds._Pair.Pair_Impl_"] = tannus_ds__$Pair_Pair_$Impl_$;
tannus_ds__$Pair_Pair_$Impl_$.__name__ = ["tannus","ds","_Pair","Pair_Impl_"];
tannus_ds__$Pair_Pair_$Impl_$._new = function(l,r) {
	var this1 = new tannus_ds_CPair(l,r);
	return this1;
};
tannus_ds__$Pair_Pair_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_ds__$Pair_Pair_$Impl_$.swap = function(this1) {
	var this2 = new tannus_ds_CPair(this1.right,this1.left);
	return this2;
};
tannus_ds__$Pair_Pair_$Impl_$.eq = function(this1,other) {
	if(this1.left == other.left) {
		return this1.right == other.right;
	} else {
		return false;
	}
};
var tannus_ds_CPair = function(l,r) {
	this.left = l;
	this.right = r;
};
$hxClasses["tannus.ds.CPair"] = tannus_ds_CPair;
tannus_ds_CPair.__name__ = ["tannus","ds","CPair"];
tannus_ds_CPair.prototype = {
	equals: function(other) {
		if(this.left == other.left) {
			return this.right == other.right;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "Pair(" + Std.string(this.left) + ", " + Std.string(this.right) + ")";
	}
	,swap: function() {
		var this1 = new tannus_ds_CPair(this.right,this.left);
		return this1;
	}
	,left: null
	,right: null
	,__class__: tannus_ds_CPair
};
var tannus_ds_Stack = function(dat) {
	this.data = dat != null ? dat : [];
};
$hxClasses["tannus.ds.Stack"] = tannus_ds_Stack;
tannus_ds_Stack.__name__ = ["tannus","ds","Stack"];
tannus_ds_Stack.prototype = {
	peek: function(d) {
		if(d == null) {
			d = 0;
		}
		return this.data[d];
	}
	,pop: function() {
		return this.data.shift();
	}
	,add: function(item) {
		this.data.unshift(item);
	}
	,under: function(item) {
		this.data.push(item);
	}
	,bottom: function() {
		return this.data.pop();
	}
	,remove: function(v) {
		return HxOverrides.remove(this.data,v);
	}
	,next: function(item) {
		if(item != null) {
			this.add(item);
		} else {
			item = this.pop();
		}
		return item;
	}
	,last: function(item) {
		if(item != null) {
			this.under(item);
		} else {
			item = this.bottom();
		}
		return item;
	}
	,copy: function() {
		return new tannus_ds_Stack(this.data.slice());
	}
	,iterator: function() {
		return new tannus_ds__$Stack_StackIterator(this);
	}
	,getData: function() {
		return this.data;
	}
	,get_empty: function() {
		return this.data.length == 0;
	}
	,data: null
	,__class__: tannus_ds_Stack
	,__properties__: {get_empty:"get_empty"}
};
var tannus_ds__$Stack_StackIterator = function(s) {
	this.stack = s;
};
$hxClasses["tannus.ds._Stack.StackIterator"] = tannus_ds__$Stack_StackIterator;
tannus_ds__$Stack_StackIterator.__name__ = ["tannus","ds","_Stack","StackIterator"];
tannus_ds__$Stack_StackIterator.prototype = {
	hasNext: function() {
		return !this.stack.get_empty();
	}
	,next: function() {
		return this.stack.pop();
	}
	,stack: null
	,__class__: tannus_ds__$Stack_StackIterator
};
var tannus_ds_StringUtils = $hx_exports["StringTools"] = function() { };
$hxClasses["tannus.ds.StringUtils"] = tannus_ds_StringUtils;
tannus_ds_StringUtils.__name__ = ["tannus","ds","StringUtils"];
tannus_ds_StringUtils.byteAt = function(s,i) {
	if(i <= s.length - 1) {
		var n = HxOverrides.cca(s,i);
		var this1;
		if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
			throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
		}
		this1 = n;
		return this1;
	} else {
		throw new js__$Boot_HaxeError("IndexOutOfBoundError: " + i + " is not within range(0, " + (s.length - 1) + ")");
	}
};
tannus_ds_StringUtils.byteMap = function(s,f) {
	var res = "";
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		var this1;
		if(i <= s.length - 1) {
			var n = HxOverrides.cca(s,i);
			var this2;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
				throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
			}
			this2 = n;
			this1 = this2;
		} else {
			throw new js__$Boot_HaxeError("IndexOutOfBoundError: " + i + " is not within range(0, " + (s.length - 1) + ")");
		}
		res += String.fromCharCode(f(this1));
	}
	return res;
};
tannus_ds_StringUtils.toCamelCase = function(s,sep) {
	if(sep == null) {
		sep = "-";
	}
	var parts = s.split(sep);
	if(parts.length <= 1) {
		return parts.join("");
	}
	var result = "";
	result += parts.shift().toLowerCase();
	var _g = 0;
	while(_g < parts.length) {
		var x = parts[_g];
		++_g;
		result += tannus_ds_StringUtils.capitalize(x);
	}
	return result;
};
tannus_ds_StringUtils.toDashed = function(s) {
	return tannus_ds_StringUtils.camelWords(s).join("-");
};
tannus_ds_StringUtils.camelWords = function(s) {
	var words = [];
	var word = "";
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		var c;
		if(i <= s.length - 1) {
			var n = HxOverrides.cca(s,i);
			var this1;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
				throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
			}
			this1 = n;
			c = this1;
		} else {
			throw new js__$Boot_HaxeError("IndexOutOfBoundError: " + i + " is not within range(0, " + (s.length - 1) + ")");
		}
		if(c >= 65 && c <= 90) {
			words.push(word);
			word = String.fromCharCode(c).toLowerCase();
		} else {
			word += String.fromCharCode(c);
		}
	}
	if(word.length != 0) {
		words.push(word);
	}
	return words;
};
tannus_ds_StringUtils.count = function(str,pattern) {
	var _g = pattern;
	switch(_g[1]) {
	case 0:
		var sub = _g[2];
		var pos = 0;
		var n = 0;
		var step = sub.length;
		while(true) {
			pos = str.indexOf(sub,pos);
			if(pos >= 0) {
				++n;
				pos += step;
			} else {
				break;
			}
		}
		return n;
	case 1:
		var pat = _g[2];
		var e = pat;
		return tannus_io__$RegEx_RegEx_$Impl_$.matches(e,str).length;
	}
};
tannus_ds_StringUtils.strip = function(str,pat) {
	var _g = pat;
	switch(_g[1]) {
	case 0:
		var repl = _g[2];
		return StringTools.replace(str,repl,"");
	case 1:
		var patt = _g[2];
		var res = str;
		var reg = patt;
		var bits = tannus_io__$RegEx_RegEx_$Impl_$.matches(reg,res);
		var _g1 = 0;
		while(_g1 < bits.length) {
			var bit = bits[_g1];
			++_g1;
			res = StringTools.replace(res,bit[0],"");
		}
		return res;
	}
};
tannus_ds_StringUtils.remove = function(str,sub) {
	var i = str.indexOf(sub);
	if(i == -1) {
		return str;
	} else if(i == 0) {
		return str.substring(i + sub.length);
	} else {
		return str.substring(0,i) + str.substring(i + 1);
	}
};
tannus_ds_StringUtils.wrap = function(str,wrapper,end) {
	if(end == null) {
		end = wrapper;
	}
	return wrapper + str + end;
};
tannus_ds_StringUtils.capitalize = function(s,fancy) {
	if(fancy == null) {
		fancy = false;
	}
	if(!fancy) {
		return s.substring(0,1).toUpperCase() + s.substring(1).toLowerCase();
	} else {
		var res = "";
		var lwan = false;
		var _g1 = 0;
		var _g = s.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c;
			if(i <= s.length - 1) {
				var n = HxOverrides.cca(s,i);
				var this1;
				if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
					throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
				}
				this1 = n;
				c = this1;
			} else {
				throw new js__$Boot_HaxeError("IndexOutOfBoundError: " + i + " is not within range(0, " + (s.length - 1) + ")");
			}
			if(c >= 48 && c <= 57 || (c >= 65 && c <= 90 || c >= 97 && c <= 122)) {
				if(c >= 65 && c <= 90 || c >= 97 && c <= 122) {
					var l = String.fromCharCode(c);
					res += lwan ? l.toLowerCase() : l.toUpperCase();
				} else {
					res += String.fromCharCode(c);
				}
				lwan = true;
			} else {
				res += String.fromCharCode(c);
				lwan = false;
			}
		}
		return res;
	}
};
tannus_ds_StringUtils.has = function(str,sub) {
	var i;
	try {
		i = str.indexOf(sub);
	} catch( err ) {
		i = -1;
	}
	return i != -1;
};
tannus_ds_StringUtils.slice = function(str,pos,len) {
	if(len != null) {
		return HxOverrides.substr(str,pos,len);
	} else {
		return str.substring(pos);
	}
};
tannus_ds_StringUtils.before = function(s,del) {
	if(del != "" && tannus_ds_StringUtils.has(s,del)) {
		return s.substring(0,s.indexOf(del));
	} else {
		return s;
	}
};
tannus_ds_StringUtils.beforeLast = function(s,del) {
	if(del != "" && tannus_ds_StringUtils.has(s,del)) {
		return s.substring(0,s.lastIndexOf(del));
	} else {
		return s;
	}
};
tannus_ds_StringUtils.after = function(s,del) {
	if(del != "" && tannus_ds_StringUtils.has(s,del)) {
		return s.substring(s.indexOf(del) + del.length);
	} else {
		return s;
	}
};
tannus_ds_StringUtils.afterLast = function(s,del) {
	if(del != "" && tannus_ds_StringUtils.has(s,del)) {
		return s.substring(s.lastIndexOf(del) + del.length);
	} else {
		return "";
	}
};
tannus_ds_StringUtils.separate = function(s,sep,last) {
	if(last == null) {
		last = false;
	}
	var this1;
	var this2 = [(last ? tannus_ds_StringUtils.beforeLast : tannus_ds_StringUtils.before)(s,sep),(last ? tannus_ds_StringUtils.afterLast : tannus_ds_StringUtils.after)(s,sep)];
	this1 = this2;
	return this1;
};
tannus_ds_StringUtils.lastByte = function(s) {
	var n = HxOverrides.cca(s,s.length - 1);
	var this1;
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
		throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	}
	this1 = n;
	return this1;
};
tannus_ds_StringUtils.empty = function(s) {
	return s.length == 0;
};
tannus_ds_StringUtils.times = function(s,count) {
	if(count == 0) {
		return "";
	} else {
		var res = s;
		var _g1 = 0;
		var _g = --count;
		while(_g1 < _g) {
			var i = _g1++;
			res += s;
		}
		return res;
	}
};
tannus_ds_StringUtils.isNumeric = function(s) {
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		var this1;
		if(i <= s.length - 1) {
			var n = HxOverrides.cca(s,i);
			var this2;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
				throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
			}
			this2 = n;
			this1 = this2;
		} else {
			throw new js__$Boot_HaxeError("IndexOutOfBoundError: " + i + " is not within range(0, " + (s.length - 1) + ")");
		}
		if(!(this1 >= 48 && this1 <= 57)) {
			return false;
		}
	}
	return true;
};
var tannus_ds__$StringUtils_Sep_$Impl_$ = {};
$hxClasses["tannus.ds._StringUtils.Sep_Impl_"] = tannus_ds__$StringUtils_Sep_$Impl_$;
tannus_ds__$StringUtils_Sep_$Impl_$.__name__ = ["tannus","ds","_StringUtils","Sep_Impl_"];
tannus_ds__$StringUtils_Sep_$Impl_$.__properties__ = {get_after:"get_after",get_before:"get_before"}
tannus_ds__$StringUtils_Sep_$Impl_$._new = function(a,b) {
	var this1;
	var this2 = [a,b];
	this1 = this2;
	return this1;
};
tannus_ds__$StringUtils_Sep_$Impl_$.get_before = function(this1) {
	return this1[0];
};
tannus_ds__$StringUtils_Sep_$Impl_$.get_after = function(this1) {
	return this1[1];
};
var tannus_ds__$TwoTuple_TwoTuple_$Impl_$ = {};
$hxClasses["tannus.ds._TwoTuple.TwoTuple_Impl_"] = tannus_ds__$TwoTuple_TwoTuple_$Impl_$;
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.__name__ = ["tannus","ds","_TwoTuple","TwoTuple_Impl_"];
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.__properties__ = {set_two:"set_two",get_two:"get_two",set_one:"set_one",get_one:"get_one"}
tannus_ds__$TwoTuple_TwoTuple_$Impl_$._new = function(a,b) {
	var this1 = [a,b];
	return this1;
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.get_one = function(this1) {
	return this1[0];
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.set_one = function(this1,v) {
	return this1[0] = v;
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.get_two = function(this1) {
	return this1[1];
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.set_two = function(this1,v) {
	return this1[1] = v;
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.toString = function(this1) {
	return "(" + Std.string(this1[0]) + ", " + Std.string(this1[1]) + ")";
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.toArray = function(this1) {
	return this1;
};
var tannus_ds_data_IData = function() { };
$hxClasses["tannus.ds.data.IData"] = tannus_ds_data_IData;
tannus_ds_data_IData.__name__ = ["tannus","ds","data","IData"];
tannus_ds_data_IData.prototype = {
	get_capacity: null
	,get_length: null
	,get_full: null
	,get: null
	,set: null
	,has: null
	,add: null
	,fill: null
	,sets: null
	,__class__: tannus_ds_data_IData
	,__properties__: {get_full:"get_full",get_length:"get_length",get_capacity:"get_capacity"}
};
var tannus_ds_data_BoundData = function(refs) {
	this.d = refs.slice(0);
	this.size = [this.d.length,this.d.length];
};
$hxClasses["tannus.ds.data.BoundData"] = tannus_ds_data_BoundData;
tannus_ds_data_BoundData.__name__ = ["tannus","ds","data","BoundData"];
tannus_ds_data_BoundData.__interfaces__ = [tannus_ds_data_IData];
tannus_ds_data_BoundData.prototype = {
	get: function(index) {
		return ($_=this.d[index],$bind($_,$_.get))();
	}
	,set: function(index,value) {
		return ($_=this.d[index],$bind($_,$_.set))(value);
	}
	,has: function(index) {
		return ($_=this.d[index],$bind($_,$_.get))() != null;
	}
	,add: function(value) {
		var _g1 = 0;
		var _g = this.size[0];
		while(_g1 < _g) {
			var i = _g1++;
			if(($_=this.d[i],$bind($_,$_.get))() == null) {
				($_=this.d[i],$bind($_,$_.set))(value);
				return i;
			}
		}
		return -1;
	}
	,fill: function(value) {
		var _g1 = 0;
		var _g = this.size[0];
		while(_g1 < _g) {
			var i = _g1++;
			($_=this.d[i],$bind($_,$_.set))(value);
		}
	}
	,sets: function(values) {
		var _g1 = 0;
		var _g = values.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.d[i].set(values[i]);
		}
	}
	,get_capacity: function() {
		return this.size[0];
	}
	,get_length: function() {
		return this.size[1];
	}
	,get_full: function() {
		return this.size[1] == this.size[0];
	}
	,size: null
	,d: null
	,__class__: tannus_ds_data_BoundData
	,__properties__: {get_full:"get_full",get_length:"get_length",get_capacity:"get_capacity"}
};
var tannus_ds_data_Data = function(len,value) {
	this.size = [len,0];
	var length = this.size[0];
	var this1 = new Array(length);
	this.d = this1;
	var _g1 = 0;
	var _g = this.size[0];
	while(_g1 < _g) {
		var i = _g1++;
		this.set(i,value);
	}
};
$hxClasses["tannus.ds.data.Data"] = tannus_ds_data_Data;
tannus_ds_data_Data.__name__ = ["tannus","ds","data","Data"];
tannus_ds_data_Data.__interfaces__ = [tannus_ds_data_IData];
tannus_ds_data_Data.fromDataImpl = function(impl) {
	return new tannus_ds_data_Data(0).reset(impl);
};
tannus_ds_data_Data.fromArray = function(array) {
	var impl = array.slice(0);
	return new tannus_ds_data_Data(0).reset(impl);
};
tannus_ds_data_Data.prototype = {
	get: function(index) {
		return this.d[index];
	}
	,set: function(index,value) {
		var delta = 0;
		if(value != null && this.d[index] == null) {
			delta = 1;
		} else if(value == null && this.d[index] != null) {
			delta = -1;
		}
		this.d[index] = value;
		this.size[1] += delta;
		return this.d[index];
	}
	,has: function(index) {
		return this.d[index] != null;
	}
	,add: function(value) {
		var index = 0;
		while(index < this.size[0]) {
			if(this.d[index] == null) {
				this.set(index,value);
				return index;
			}
			++index;
		}
		return -1;
	}
	,fill: function(value) {
		var _g1 = 0;
		var _g = this.size[0];
		while(_g1 < _g) {
			var i = _g1++;
			this.set(i,value);
		}
	}
	,sets: function(values) {
		var _g1 = 0;
		var _g = values.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.set(i,values[i]);
		}
	}
	,reset: function(impl) {
		this.d = impl;
		this.size = [this.d.length,0];
		var _g1 = 0;
		var _g = this.d.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.d[i] != null) {
				this.size[1]++;
			}
		}
		return this;
	}
	,get_capacity: function() {
		return this.size[0];
	}
	,get_length: function() {
		return this.size[1];
	}
	,get_full: function() {
		return this.size[1] == this.size[0];
	}
	,size: null
	,d: null
	,__class__: tannus_ds_data_Data
	,__properties__: {get_full:"get_full",get_length:"get_length",get_capacity:"get_capacity"}
};
var tannus_ds_dict_IDict = function() { };
$hxClasses["tannus.ds.dict.IDict"] = tannus_ds_dict_IDict;
tannus_ds_dict_IDict.__name__ = ["tannus","ds","dict","IDict"];
tannus_ds_dict_IDict.prototype = {
	get: null
	,set: null
	,reference: null
	,exists: null
	,remove: null
	,iterator: null
	,keys: null
	,pairs: null
	,hxSerialize: null
	,hxUnserialize: null
	,__class__: tannus_ds_dict_IDict
};
var tannus_ds_dict_ComparableDict = function() {
	this._pairs = new List();
};
$hxClasses["tannus.ds.dict.ComparableDict"] = tannus_ds_dict_ComparableDict;
tannus_ds_dict_ComparableDict.__name__ = ["tannus","ds","dict","ComparableDict"];
tannus_ds_dict_ComparableDict.__interfaces__ = [tannus_ds_dict_IDict];
tannus_ds_dict_ComparableDict.prototype = {
	pair: function(key,value) {
		var _g_head = this._pairs.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var p = val;
			if(p[0].equals(key)) {
				return p;
			}
		}
		if(value != null) {
			var this1;
			var this2 = [key,value];
			this1 = this2;
			var pair = this1;
			this._pairs.add(pair);
			return pair;
		} else {
			return null;
		}
	}
	,get: function(key) {
		var p = this.pair(key);
		if(p != null) {
			return p[1];
		} else {
			return null;
		}
	}
	,set: function(key,value) {
		var p = this.pair(key,value);
		return p[1] = value;
	}
	,reference: function(key) {
		var this1;
		var f = $bind(this,this.get);
		var a1 = key;
		var f1 = $bind(this,this.set);
		var a11 = key;
		this1 = new tannus_io__$Pointer_Ref(function() {
			return f(a1);
		},function(a2) {
			return f1(a11,a2);
		});
		return this1;
	}
	,exists: function(key) {
		return this.pair(key) != null;
	}
	,remove: function(key) {
		var p = this.pair(key);
		if(p != null) {
			return this._pairs.remove(p);
		} else {
			return false;
		}
	}
	,iterator: function() {
		return new tannus_ds_dict_ComparableDictIterator(this);
	}
	,keys: function() {
		return new tannus_ds_dict_ComparableDictKeyIterator(this);
	}
	,pairs: function() {
		return new _$List_ListIterator(this._pairs.h);
	}
	,hxSerialize: function(s) {
		var f = $bind(s,s.serialize);
		var w = function(v) {
			f(v);
		};
		var _g = [];
		var pair = this.pairs();
		while(pair.hasNext()) {
			var pair1 = pair.next();
			_g.push(pair1);
		}
		var pl = _g;
		w(pl.length);
		var _g1 = 0;
		while(_g1 < pl.length) {
			var p = pl[_g1];
			++_g1;
			w(p[0]);
			w(p[1]);
		}
	}
	,hxUnserialize: function(u) {
		this._pairs = new List();
		var count = u.unserialize();
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			this.set(u.unserialize(),u.unserialize());
		}
	}
	,_pairs: null
	,__class__: tannus_ds_dict_ComparableDict
};
var tannus_ds_dict_ComparableDictIterator = function(cd) {
	this.it = new _$List_ListIterator(cd._pairs.h);
};
$hxClasses["tannus.ds.dict.ComparableDictIterator"] = tannus_ds_dict_ComparableDictIterator;
tannus_ds_dict_ComparableDictIterator.__name__ = ["tannus","ds","dict","ComparableDictIterator"];
tannus_ds_dict_ComparableDictIterator.prototype = {
	hasNext: function() {
		return this.it.hasNext();
	}
	,next: function() {
		return this.it.next()[1];
	}
	,it: null
	,__class__: tannus_ds_dict_ComparableDictIterator
};
var tannus_ds_dict_ComparableDictKeyIterator = function(cd) {
	this.it = new _$List_ListIterator(cd._pairs.h);
};
$hxClasses["tannus.ds.dict.ComparableDictKeyIterator"] = tannus_ds_dict_ComparableDictKeyIterator;
tannus_ds_dict_ComparableDictKeyIterator.__name__ = ["tannus","ds","dict","ComparableDictKeyIterator"];
tannus_ds_dict_ComparableDictKeyIterator.prototype = {
	hasNext: function() {
		return this.it.hasNext();
	}
	,next: function() {
		return this.it.next()[0];
	}
	,it: null
	,__class__: tannus_ds_dict_ComparableDictKeyIterator
};
var tannus_ds_dict_EnumValueDict = function() {
	this.m = new haxe_ds_EnumValueMap();
};
$hxClasses["tannus.ds.dict.EnumValueDict"] = tannus_ds_dict_EnumValueDict;
tannus_ds_dict_EnumValueDict.__name__ = ["tannus","ds","dict","EnumValueDict"];
tannus_ds_dict_EnumValueDict.__interfaces__ = [tannus_ds_dict_IDict];
tannus_ds_dict_EnumValueDict.prototype = {
	get: function(key) {
		return this.m.get(key);
	}
	,set: function(k,v) {
		this.m.set(k,v);
		return this.m.get(k);
	}
	,reference: function(key) {
		var f = ($_=this.m,$bind($_,$_.get));
		var a1 = key;
		var this1;
		var f1 = $bind(this,this.set);
		var k = key;
		this1 = new tannus_io__$Pointer_Ref(function() {
			return f(a1);
		},function(v) {
			return f1(k,v);
		});
		return this1;
	}
	,exists: function(k) {
		return this.m.exists(k);
	}
	,remove: function(k) {
		return this.m.remove(k);
	}
	,iterator: function() {
		return this.m.iterator();
	}
	,keys: function() {
		return this.m.keys();
	}
	,pairs: function() {
		return new tannus_ds_dict_EVDPairIterator(this);
	}
	,hxSerialize: function(s) {
		var f = $bind(s,s.serialize);
		var w = function(v) {
			f(v);
		};
		var _g = [];
		var pair = new tannus_ds_dict_EVDPairIterator(this);
		while(pair.hasNext()) {
			var pair1 = pair.next();
			_g.push(pair1);
		}
		var pl = _g;
		w(pl.length);
		var _g1 = 0;
		while(_g1 < pl.length) {
			var p = pl[_g1];
			++_g1;
			w(p[0]);
			w(p[1]);
		}
	}
	,hxUnserialize: function(u) {
		var count = u.unserialize();
		this.m = new haxe_ds_EnumValueMap();
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			this.set(u.unserialize(),u.unserialize());
		}
	}
	,m: null
	,__class__: tannus_ds_dict_EnumValueDict
};
var tannus_ds_dict_EVDPairIterator = function(d) {
	this.dict = d;
	this.it = this.dict.m.keys();
};
$hxClasses["tannus.ds.dict.EVDPairIterator"] = tannus_ds_dict_EVDPairIterator;
tannus_ds_dict_EVDPairIterator.__name__ = ["tannus","ds","dict","EVDPairIterator"];
tannus_ds_dict_EVDPairIterator.prototype = {
	hasNext: function() {
		return this.it.hasNext();
	}
	,next: function() {
		var k = this.it.next();
		var this1;
		var this2 = [k,this.dict.m.get(k)];
		this1 = this2;
		return this1;
	}
	,dict: null
	,it: null
	,__class__: tannus_ds_dict_EVDPairIterator
};
var tannus_ds_dict_IComparableDict = function() {
	this.t = new tannus_ds_dict_IComparableTree();
};
$hxClasses["tannus.ds.dict.IComparableDict"] = tannus_ds_dict_IComparableDict;
tannus_ds_dict_IComparableDict.__name__ = ["tannus","ds","dict","IComparableDict"];
tannus_ds_dict_IComparableDict.__interfaces__ = [tannus_ds_dict_IDict];
tannus_ds_dict_IComparableDict.prototype = {
	get: function(key) {
		return this.t.get(key);
	}
	,set: function(key,value) {
		this.t.set(key,value);
		return this.t.get(key);
	}
	,reference: function(key) {
		var f = ($_=this.t,$bind($_,$_.get));
		var a1 = key;
		var this1;
		var f1 = $bind(this,this.set);
		var a11 = key;
		this1 = new tannus_io__$Pointer_Ref(function() {
			return f(a1);
		},function(a2) {
			return f1(a11,a2);
		});
		return this1;
	}
	,exists: function(key) {
		return this.t.exists(key);
	}
	,remove: function(key) {
		return this.t.remove(key);
	}
	,iterator: function() {
		return this.t.iterator();
	}
	,keys: function() {
		return this.t.keys();
	}
	,pairs: function() {
		return new tannus_ds_dict_ICDPairIterator(this);
	}
	,hxSerialize: function(s) {
		var f = $bind(s,s.serialize);
		var w = function(v) {
			f(v);
		};
		var _g = [];
		var pair = new tannus_ds_dict_ICDPairIterator(this);
		while(pair.hasNext()) {
			var pair1 = pair.next();
			_g.push(pair1);
		}
		var pl = _g;
		w(pl.length);
		var _g1 = 0;
		while(_g1 < pl.length) {
			var p = pl[_g1];
			++_g1;
			w(p[0]);
			w(p[1]);
		}
	}
	,hxUnserialize: function(u) {
		var count = u.unserialize();
		this.t = new tannus_ds_dict_IComparableTree();
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			this.set(u.unserialize(),u.unserialize());
		}
	}
	,t: null
	,__class__: tannus_ds_dict_IComparableDict
};
var tannus_ds_dict_IComparableTree = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["tannus.ds.dict.IComparableTree"] = tannus_ds_dict_IComparableTree;
tannus_ds_dict_IComparableTree.__name__ = ["tannus","ds","dict","IComparableTree"];
tannus_ds_dict_IComparableTree.__super__ = haxe_ds_BalancedTree;
tannus_ds_dict_IComparableTree.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(x,y) {
		return x.compareTo(y);
	}
	,__class__: tannus_ds_dict_IComparableTree
});
var tannus_ds_dict_ICDPairIterator = function(dict) {
	this.d = dict;
	this.i = this.d.t.keys();
};
$hxClasses["tannus.ds.dict.ICDPairIterator"] = tannus_ds_dict_ICDPairIterator;
tannus_ds_dict_ICDPairIterator.__name__ = ["tannus","ds","dict","ICDPairIterator"];
tannus_ds_dict_ICDPairIterator.prototype = {
	d: null
	,i: null
	,hasNext: function() {
		return this.i.hasNext();
	}
	,next: function() {
		var k = this.i.next();
		var this1;
		var this2 = [k,this.d.t.get(k)];
		this1 = this2;
		return this1;
	}
	,__class__: tannus_ds_dict_ICDPairIterator
};
var tannus_ds_dict_IntDict = function() {
	this.m = new haxe_ds_IntMap();
};
$hxClasses["tannus.ds.dict.IntDict"] = tannus_ds_dict_IntDict;
tannus_ds_dict_IntDict.__name__ = ["tannus","ds","dict","IntDict"];
tannus_ds_dict_IntDict.__interfaces__ = [tannus_ds_dict_IDict];
tannus_ds_dict_IntDict.prototype = {
	get: function(key) {
		return this.m.h[key];
	}
	,set: function(k,v) {
		this.m.h[k] = v;
		return this.m.h[k];
	}
	,reference: function(key) {
		var f = ($_=this.m,$bind($_,$_.get));
		var a1 = key;
		var this1;
		var f1 = $bind(this,this.set);
		var k = key;
		this1 = new tannus_io__$Pointer_Ref(function() {
			return f(a1);
		},function(v) {
			return f1(k,v);
		});
		return this1;
	}
	,exists: function(k) {
		return this.m.h.hasOwnProperty(k);
	}
	,remove: function(k) {
		return this.m.remove(k);
	}
	,iterator: function() {
		return this.m.iterator();
	}
	,keys: function() {
		return this.m.keys();
	}
	,pairs: function() {
		return new tannus_ds_dict_IntDictPairIterator(this);
	}
	,hxSerialize: function(s) {
		var f = $bind(s,s.serialize);
		var w = function(v) {
			f(v);
		};
		var _g = [];
		var pair = new tannus_ds_dict_IntDictPairIterator(this);
		while(pair.hasNext()) {
			var pair1 = pair.next();
			_g.push(pair1);
		}
		var pl = _g;
		w(pl.length);
		var _g1 = 0;
		while(_g1 < pl.length) {
			var p = pl[_g1];
			++_g1;
			w(p[0]);
			w(p[1]);
		}
	}
	,hxUnserialize: function(u) {
		var count = u.unserialize();
		this.m = new haxe_ds_IntMap();
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			this.set(u.unserialize(),u.unserialize());
		}
	}
	,m: null
	,__class__: tannus_ds_dict_IntDict
};
var tannus_ds_dict_IntDictPairIterator = function(d) {
	this.dict = d;
	this.it = this.dict.m.keys();
};
$hxClasses["tannus.ds.dict.IntDictPairIterator"] = tannus_ds_dict_IntDictPairIterator;
tannus_ds_dict_IntDictPairIterator.__name__ = ["tannus","ds","dict","IntDictPairIterator"];
tannus_ds_dict_IntDictPairIterator.prototype = {
	hasNext: function() {
		return this.it.hasNext();
	}
	,next: function() {
		var k = this.it.next();
		var this1;
		var this2 = [k,this.dict.m.h[k]];
		this1 = this2;
		return this1;
	}
	,dict: null
	,it: null
	,__class__: tannus_ds_dict_IntDictPairIterator
};
var tannus_ds_dict__$Pair_Pair_$Impl_$ = {};
$hxClasses["tannus.ds.dict._Pair.Pair_Impl_"] = tannus_ds_dict__$Pair_Pair_$Impl_$;
tannus_ds_dict__$Pair_Pair_$Impl_$.__name__ = ["tannus","ds","dict","_Pair","Pair_Impl_"];
tannus_ds_dict__$Pair_Pair_$Impl_$.__properties__ = {set_value:"set_value",get_value:"get_value",get_key:"get_key"}
tannus_ds_dict__$Pair_Pair_$Impl_$._new = function(key,value) {
	var this1;
	var this2 = [key,value];
	this1 = this2;
	return this1;
};
tannus_ds_dict__$Pair_Pair_$Impl_$.get_key = function(this1) {
	return this1[0];
};
tannus_ds_dict__$Pair_Pair_$Impl_$.get_value = function(this1) {
	return this1[1];
};
tannus_ds_dict__$Pair_Pair_$Impl_$.set_value = function(this1,v) {
	return this1[1] = v;
};
var tannus_ds_dict_StringDict = function() {
	this.m = new haxe_ds_StringMap();
};
$hxClasses["tannus.ds.dict.StringDict"] = tannus_ds_dict_StringDict;
tannus_ds_dict_StringDict.__name__ = ["tannus","ds","dict","StringDict"];
tannus_ds_dict_StringDict.__interfaces__ = [tannus_ds_dict_IDict];
tannus_ds_dict_StringDict.prototype = {
	get: function(key) {
		var _this = this.m;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,set: function(k,v) {
		var _this = this.m;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,v);
		} else {
			_this.h[k] = v;
		}
		var _this1 = this.m;
		if(__map_reserved[k] != null) {
			return _this1.getReserved(k);
		} else {
			return _this1.h[k];
		}
	}
	,reference: function(key) {
		var f = ($_=this.m,$bind($_,$_.get));
		var a1 = key;
		var this1;
		var f1 = $bind(this,this.set);
		var k = key;
		this1 = new tannus_io__$Pointer_Ref(function() {
			return f(a1);
		},function(v) {
			return f1(k,v);
		});
		return this1;
	}
	,exists: function(k) {
		var _this = this.m;
		if(__map_reserved[k] != null) {
			return _this.existsReserved(k);
		} else {
			return _this.h.hasOwnProperty(k);
		}
	}
	,remove: function(k) {
		return this.m.remove(k);
	}
	,iterator: function() {
		var _this = this.m;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	}
	,keys: function() {
		return this.m.keys();
	}
	,pairs: function() {
		return new tannus_ds_dict_StringDictPairIterator(this);
	}
	,hxSerialize: function(s) {
		var f = $bind(s,s.serialize);
		var w = function(v) {
			f(v);
		};
		var _g = [];
		var pair = new tannus_ds_dict_StringDictPairIterator(this);
		while(pair.hasNext()) {
			var pair1 = pair.next();
			_g.push(pair1);
		}
		var pl = _g;
		w(pl.length);
		var _g1 = 0;
		while(_g1 < pl.length) {
			var p = pl[_g1];
			++_g1;
			w(p[0]);
			w(p[1]);
		}
	}
	,hxUnserialize: function(u) {
		var count = u.unserialize();
		this.m = new haxe_ds_StringMap();
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			this.set(u.unserialize(),u.unserialize());
		}
	}
	,m: null
	,__class__: tannus_ds_dict_StringDict
};
var tannus_ds_dict_StringDictPairIterator = function(d) {
	this.dict = d;
	this.it = this.dict.m.keys();
};
$hxClasses["tannus.ds.dict.StringDictPairIterator"] = tannus_ds_dict_StringDictPairIterator;
tannus_ds_dict_StringDictPairIterator.__name__ = ["tannus","ds","dict","StringDictPairIterator"];
tannus_ds_dict_StringDictPairIterator.prototype = {
	hasNext: function() {
		return this.it.hasNext();
	}
	,next: function() {
		var k = this.it.next();
		var _this = this.dict.m;
		var this1;
		var this2 = [k,__map_reserved[k] != null ? _this.getReserved(k) : _this.h[k]];
		this1 = this2;
		return this1;
	}
	,dict: null
	,it: null
	,__class__: tannus_ds_dict_StringDictPairIterator
};
var tannus_ds_tuples__$Tup2_Tup2_$Impl_$ = {};
$hxClasses["tannus.ds.tuples._Tup2.Tup2_Impl_"] = tannus_ds_tuples__$Tup2_Tup2_$Impl_$;
tannus_ds_tuples__$Tup2_Tup2_$Impl_$.__name__ = ["tannus","ds","tuples","_Tup2","Tup2_Impl_"];
tannus_ds_tuples__$Tup2_Tup2_$Impl_$.__properties__ = {set__1:"set__1",get__1:"get__1",set__0:"set__0",get__0:"get__0"}
tannus_ds_tuples__$Tup2_Tup2_$Impl_$._new = function(a,b) {
	var this1 = [a,b];
	return this1;
};
tannus_ds_tuples__$Tup2_Tup2_$Impl_$.get__0 = function(this1) {
	return this1[0];
};
tannus_ds_tuples__$Tup2_Tup2_$Impl_$.set__0 = function(this1,v) {
	return this1[0] = v;
};
tannus_ds_tuples__$Tup2_Tup2_$Impl_$.get__1 = function(this1) {
	return this1[1];
};
tannus_ds_tuples__$Tup2_Tup2_$Impl_$.set__1 = function(this1,v) {
	return this1[1] = v;
};
var tannus_geom__$Angle_Angle_$Impl_$ = {};
$hxClasses["tannus.geom._Angle.Angle_Impl_"] = tannus_geom__$Angle_Angle_$Impl_$;
tannus_geom__$Angle_Angle_$Impl_$.__name__ = ["tannus","geom","_Angle","Angle_Impl_"];
tannus_geom__$Angle_Angle_$Impl_$._new = function(v) {
	var this1 = new tannus_geom_CAngle(v);
	return this1;
};
tannus_geom__$Angle_Angle_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_geom__$Angle_Angle_$Impl_$.toFloat = function(this1) {
	return this1.toFloat();
};
tannus_geom__$Angle_Angle_$Impl_$.plusAngle = function(this1,o) {
	var this2 = new tannus_geom_CAngle(this1.v + o.v);
	return this2;
};
tannus_geom__$Angle_Angle_$Impl_$.plusFloat = function(this1,o) {
	var this2 = new tannus_geom_CAngle(this1.v + o);
	return this2;
};
tannus_geom__$Angle_Angle_$Impl_$.fromFloat = function(v) {
	var this1 = new tannus_geom_CAngle(v);
	return this1;
};
var tannus_geom_CAngle = function(_v) {
	this.v = _v;
};
$hxClasses["tannus.geom.CAngle"] = tannus_geom_CAngle;
tannus_geom_CAngle.__name__ = ["tannus","geom","CAngle"];
tannus_geom_CAngle.prototype = {
	compliment: function() {
		var this1 = new tannus_geom_CAngle(360 - this.v);
		return this1;
	}
	,invert: function() {
		var this1 = new tannus_geom_CAngle(-this.v);
		return this1;
	}
	,toString: function() {
		return this.v + "°";
	}
	,toFloat: function() {
		return this.v;
	}
	,get_degrees: function() {
		return this.v;
	}
	,set_degrees: function(_v) {
		return this.v = _v;
	}
	,get_radians: function() {
		return this.v * Math.PI / 180;
	}
	,set_radians: function(_v) {
		this.v = _v * (Math.PI / 180);
		return this.v * Math.PI / 180;
	}
	,get_x: function() {
		return Math.cos(this.v * Math.PI / 180);
	}
	,get_y: function() {
		return Math.sin(this.v * Math.PI / 180);
	}
	,v: null
	,__class__: tannus_geom_CAngle
	,__properties__: {get_y:"get_y",get_x:"get_x",set_radians:"set_radians",get_radians:"get_radians",set_degrees:"set_degrees",get_degrees:"get_degrees"}
};
var tannus_geom__$Area_Area_$Impl_$ = {};
$hxClasses["tannus.geom._Area.Area_Impl_"] = tannus_geom__$Area_Area_$Impl_$;
tannus_geom__$Area_Area_$Impl_$.__name__ = ["tannus","geom","_Area","Area_Impl_"];
tannus_geom__$Area_Area_$Impl_$.__properties__ = {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"}
tannus_geom__$Area_Area_$Impl_$._new = function(w,h) {
	if(h == null) {
		h = 0;
	}
	if(w == null) {
		w = 0;
	}
	var this1;
	var this2 = [w,h];
	this1 = this2;
	return this1;
};
tannus_geom__$Area_Area_$Impl_$.get_width = function(this1) {
	return this1[0];
};
tannus_geom__$Area_Area_$Impl_$.set_width = function(this1,nw) {
	return this1[0] = nw;
};
tannus_geom__$Area_Area_$Impl_$.get_height = function(this1) {
	return this1[1];
};
tannus_geom__$Area_Area_$Impl_$.set_height = function(this1,nh) {
	return this1[1] = nh;
};
tannus_geom__$Area_Area_$Impl_$.clone = function(this1) {
	var this2;
	var this3 = [this1[0],this1[1]];
	this2 = this3;
	return this2;
};
tannus_geom__$Area_Area_$Impl_$.resize = function(this1,nw,nh,mr) {
	if(mr == null) {
		mr = false;
	}
	if(mr) {
		var w = this1[0];
		var h = this1[1];
		if(nw != null) {
			var rat = h / w;
			w = nw;
			h = w * rat;
			var this2;
			var this3 = [w,h];
			this2 = this3;
			return this2;
		} else if(nh != null) {
			var rat1 = w / h;
			h = nh;
			w = h * rat1;
			var this4;
			var this5 = [w,h];
			this4 = this5;
			return this4;
		} else {
			throw new js__$Boot_HaxeError("GeometryError: Cannot maintain ration if both [width] and [height] are assigned!");
		}
	} else {
		var w1 = nw != null ? nw : this1[0];
		var h1 = nh != null ? nh : this1[1];
		var this6;
		var this7 = [w1,h1];
		this6 = this7;
		return this6;
	}
};
tannus_geom__$Area_Area_$Impl_$.toFloatTuple = function(this1) {
	return this1;
};
tannus_geom__$Area_Area_$Impl_$.toIntTuple = function(this1) {
	var this2 = [Math.round(this1[0]),Math.round(this1[1])];
	return this2;
};
tannus_geom__$Area_Area_$Impl_$.fromTwoTuple = function(t) {
	var this1;
	var this2 = [t[0],t[1]];
	this1 = this2;
	return this1;
};
tannus_geom__$Area_Area_$Impl_$.toRectangle = function(this1) {
	var this2 = new tannus_geom_CRectangle(0,0,this1[0],this1[1]);
	return this2;
};
tannus_geom__$Area_Area_$Impl_$.fromRectangle = function(r) {
	var this1;
	var this2 = [r.width,r.height];
	this1 = this2;
	return this1;
};
tannus_geom__$Area_Area_$Impl_$.toString = function(this1) {
	return "Area<" + this1[0] + "x" + this1[1] + ">";
};
tannus_geom__$Area_Area_$Impl_$.fromString = function(s) {
	var w;
	var h;
	s = StringTools.replace(StringTools.replace(StringTools.replace(s,"Area",""),"<",""),">","");
	var a = s.split("x").map(function(x) {
		return Std.parseFloat(x);
	});
	var this1;
	var this2 = [a[0],a[1]];
	this1 = this2;
	return this1;
};
tannus_geom__$Area_Area_$Impl_$.toFloatArray = function(this1) {
	return [this1[0],this1[1]];
};
tannus_geom__$Area_Area_$Impl_$.toIntArray = function(this1) {
	return [this1[0],this1[1]].map(Math.round);
};
tannus_geom__$Area_Area_$Impl_$.fromFloatArray = function(a) {
	var this1;
	var this2 = [a[0],a[1]];
	this1 = this2;
	return this1;
};
tannus_geom__$Area_Area_$Impl_$.fromIntArray = function(a) {
	var this1;
	var this2 = [a[0],a[1]];
	this1 = this2;
	return this1;
};
tannus_geom__$Area_Area_$Impl_$.i = function(f) {
	return Math.round(f);
};
var tannus_geom_OldArea = function(w,h) {
	if(h == null) {
		h = 0;
	}
	if(w == null) {
		w = 0;
	}
	this.width = w;
	this.height = h;
};
$hxClasses["tannus.geom.OldArea"] = tannus_geom_OldArea;
tannus_geom_OldArea.__name__ = ["tannus","geom","OldArea"];
tannus_geom_OldArea.prototype = {
	width: null
	,height: null
	,__class__: tannus_geom_OldArea
};
var tannus_geom_Line = function(o,t) {
	this.one = o;
	this.two = t;
};
$hxClasses["tannus.geom.Line"] = tannus_geom_Line;
tannus_geom_Line.__name__ = ["tannus","geom","Line"];
tannus_geom_Line.prototype = {
	intersects: function(other) {
		var sl = new tannus_geom_Line(this.two.minusPoint(this.one),other.two.minusPoint(other.one));
		var s = (-sl.one.get_y() * (this.one.get_x() - other.one.get_x()) + sl.one.get_x() * (this.one.get_y() - other.one.get_y())) / (-sl.two.get_x() * sl.one.get_y() + sl.one.get_x() * sl.two.get_y());
		var t = (sl.two.get_x() * (this.one.get_y() - other.one.get_y()) - sl.two.get_y() * (this.one.get_x() - other.one.get_x())) / (-sl.two.get_x() * sl.one.get_y() + sl.one.get_x() * sl.two.get_y());
		if(s >= 0 && s <= 1) {
			if(t >= 0) {
				return t <= 1;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,toString: function() {
		return "Line<(" + this.one.get_x() + ", " + this.one.get_y() + ") => (" + this.two.get_x() + ", " + this.two.get_y() + ")>";
	}
	,getPoint: function(d) {
		var dist = d;
		var this1 = new tannus_geom_CVelocity(dist,this.one.angleTo(this.two));
		var vel = this1;
		var res = vel.get_vector();
		res.moveByPoint(this.one);
		res.clamp();
		return res;
	}
	,along: function(d) {
		return this.one.lerp(this.two,d);
	}
	,getVertices: function() {
		var pts = [];
		this.one.clamp();
		this.two.clamp();
		var _g1 = 0;
		var _g = Math.round(this.one.distanceFrom(this.two));
		while(_g1 < _g) {
			var i = _g1++;
			pts.push(this.getPoint(i));
		}
		var this1 = new tannus_geom_VertexArray(pts);
		return this1;
	}
	,get_slope: function() {
		return (this.one.get_y() - this.two.get_y()) / (this.one.get_x() - this.two.get_x());
	}
	,get_slopeRatio: function() {
		var this1 = new tannus_math_CRatio(this.one.get_y() - this.two.get_y(),this.one.get_x() - this.two.get_x());
		return this1;
	}
	,get_length: function() {
		return this.one.distanceFrom(this.two);
	}
	,get_start: function() {
		return this.one;
	}
	,set_start: function(ns) {
		return this.one = ns;
	}
	,get_end: function() {
		return this.two;
	}
	,set_end: function(ne) {
		return this.two = ne;
	}
	,get_mid: function() {
		return this.one.lerp(this.two,0.5);
	}
	,get_angle: function() {
		return this.one.angleTo(this.two);
	}
	,get_rectangle: function() {
		var min;
		var this1 = this.one;
		var other = this.two;
		var this2 = new tannus_geom_TPoint(0,0,0);
		var min1 = this1.distanceFrom(this2);
		var this3 = new tannus_geom_TPoint(0,0,0);
		if(min1 > other.distanceFrom(this3)) {
			min = this.two;
		} else {
			min = this.one;
		}
		var max;
		var this4 = this.one;
		var other1 = this.two;
		var this5 = new tannus_geom_TPoint(0,0,0);
		var max1 = this4.distanceFrom(this5);
		var this6 = new tannus_geom_TPoint(0,0,0);
		if(max1 > other1.distanceFrom(this6)) {
			max = this.one;
		} else {
			max = this.two;
		}
		var this7 = new tannus_geom_CRectangle(min.get_x(),min.get_y(),max.get_x() - min.get_x(),max.get_y() - min.get_y());
		return this7;
	}
	,get_sx: function() {
		return this.one.get_x();
	}
	,set_sx: function(v) {
		return this.one.set_x(v);
	}
	,get_sy: function() {
		return this.one.get_y();
	}
	,set_sy: function(v) {
		return this.one.set_y(v);
	}
	,get_ex: function() {
		return this.two.get_x();
	}
	,set_ex: function(v) {
		return this.two.set_x(v);
	}
	,get_ey: function() {
		return this.two.get_y();
	}
	,set_ey: function(v) {
		return this.two.set_y(v);
	}
	,one: null
	,two: null
	,__class__: tannus_geom_Line
	,__properties__: {set_ey:"set_ey",get_ey:"get_ey",set_ex:"set_ex",get_ex:"get_ex",set_sy:"set_sy",get_sy:"get_sy",set_sx:"set_sx",get_sx:"get_sx",get_rectangle:"get_rectangle",get_angle:"get_angle",get_mid:"get_mid",set_end:"set_end",get_end:"get_end",set_start:"set_start",get_start:"get_start",get_length:"get_length",get_slopeRatio:"get_slopeRatio",get_slope:"get_slope"}
};
var tannus_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["tannus.geom.Matrix"] = tannus_geom_Matrix;
tannus_geom_Matrix.__name__ = ["tannus","geom","Matrix"];
tannus_geom_Matrix.prototype = {
	clone: function() {
		return new tannus_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new tannus_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,toString: function() {
		return "Matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos,newpos) {
		if(newpos == null) {
			var this1 = new tannus_geom_TPoint(0,0,0);
			newpos = this1;
		}
		var x = pos.get_x();
		var y = pos.get_y();
		newpos.set_x(this.a * x + this.c * y + this.tx);
		newpos.set_y(this.b * x + this.d * y + this.ty);
		return newpos;
	}
	,translate: function(dx,dy) {
		var m = new tannus_geom_Matrix();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__class__: tannus_geom_Matrix
};
var tannus_geom__$Point_Point_$Impl_$ = {};
$hxClasses["tannus.geom._Point.Point_Impl_"] = tannus_geom__$Point_Point_$Impl_$;
tannus_geom__$Point_Point_$Impl_$.__name__ = ["tannus","geom","_Point","Point_Impl_"];
tannus_geom__$Point_Point_$Impl_$.__properties__ = {get_d:"get_d",set_iz:"set_iz",get_iz:"get_iz",set_iy:"set_iy",get_iy:"get_iy",set_ix:"set_ix",get_ix:"get_ix",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
tannus_geom__$Point_Point_$Impl_$._new = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new tannus_geom_TPoint(x,y,z);
	return this1;
};
tannus_geom__$Point_Point_$Impl_$.get_x = function(this1) {
	return this1.get_x();
};
tannus_geom__$Point_Point_$Impl_$.set_x = function(this1,nx) {
	return this1.set_x(nx);
};
tannus_geom__$Point_Point_$Impl_$.get_y = function(this1) {
	return this1.get_y();
};
tannus_geom__$Point_Point_$Impl_$.set_y = function(this1,ny) {
	return this1.set_y(ny);
};
tannus_geom__$Point_Point_$Impl_$.get_z = function(this1) {
	return this1.get_z();
};
tannus_geom__$Point_Point_$Impl_$.set_z = function(this1,nz) {
	return this1.set_z(nz);
};
tannus_geom__$Point_Point_$Impl_$.get_ix = function(this1) {
	return this1.get_x() | 0;
};
tannus_geom__$Point_Point_$Impl_$.set_ix = function(this1,nix) {
	return this1.set_x(nix) | 0;
};
tannus_geom__$Point_Point_$Impl_$.get_iy = function(this1) {
	return this1.get_y() | 0;
};
tannus_geom__$Point_Point_$Impl_$.set_iy = function(this1,niy) {
	return this1.set_y(niy) | 0;
};
tannus_geom__$Point_Point_$Impl_$.get_iz = function(this1) {
	return this1.get_z() | 0;
};
tannus_geom__$Point_Point_$Impl_$.set_iz = function(this1,niz) {
	return this1.set_z(niz) | 0;
};
tannus_geom__$Point_Point_$Impl_$.get_d = function(this1) {
	var this2 = new tannus_geom_TPoint(0,0,0);
	return this1.distanceFrom(this2);
};
tannus_geom__$Point_Point_$Impl_$.transform = function(this1,m) {
	return m.transformPoint(this1.clone());
};
tannus_geom__$Point_Point_$Impl_$.moveByPoint = function(this1,p) {
	return this1.moveByPoint(p);
};
tannus_geom__$Point_Point_$Impl_$.moveByFloat = function(this1,n) {
	return this1.moveByFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.moveByInt = function(this1,n) {
	return this1.moveByFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.plusPoint = function(this1,other) {
	return this1.plusPoint(other);
};
tannus_geom__$Point_Point_$Impl_$.plusFloat = function(this1,n) {
	return this1.plusFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.plusInt = function(this1,n) {
	return this1.plusFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.iminusPoint = function(this1,p) {
	return this1.iminusPoint(p);
};
tannus_geom__$Point_Point_$Impl_$.iminusFloat = function(this1,n) {
	return this1.iminusFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.minusPoint = function(this1,p) {
	return this1.minusPoint(p);
};
tannus_geom__$Point_Point_$Impl_$.minusFloat = function(this1,n) {
	return this1.minusFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.minusInt = function(this1,n) {
	return this1.minusFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.dividePoint = function(this1,p) {
	return this1.dividePoint(p);
};
tannus_geom__$Point_Point_$Impl_$.divideFloat = function(this1,d) {
	return this1.divideFloat(d);
};
tannus_geom__$Point_Point_$Impl_$.multPoint = function(this1,p) {
	return this1.multPoint(p);
};
tannus_geom__$Point_Point_$Impl_$.multFloat = function(this1,n) {
	return this1.multFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.negate = function(this1) {
	return this1.negate();
};
tannus_geom__$Point_Point_$Impl_$.greaterThan = function(this1,other) {
	var this2 = new tannus_geom_TPoint(0,0,0);
	var tmp = this1.distanceFrom(this2);
	var this3 = new tannus_geom_TPoint(0,0,0);
	return tmp > other.distanceFrom(this3);
};
tannus_geom__$Point_Point_$Impl_$.lessThan = function(this1,other) {
	var this2 = new tannus_geom_TPoint(0,0,0);
	var tmp = this1.distanceFrom(this2);
	var this3 = new tannus_geom_TPoint(0,0,0);
	return !(tmp > other.distanceFrom(this3));
};
tannus_geom__$Point_Point_$Impl_$.equals = function(this1,p) {
	return this1.equals(p);
};
tannus_geom__$Point_Point_$Impl_$.nequals = function(this1,p) {
	return this1.nequals(p);
};
tannus_geom__$Point_Point_$Impl_$.vectorize = function(this1,r) {
	var this2 = new tannus_geom_TPoint(tannus_math__$Percent_Percent_$Impl_$.percent(this1.get_x(),r.width),tannus_math__$Percent_Percent_$Impl_$.percent(this1.get_y(),r.height),0);
	return this2;
};
tannus_geom__$Point_Point_$Impl_$.devectorize = function(this1,r) {
	var this2 = this1.get_x();
	var px = this2;
	var this3 = this1.get_y();
	var py = this3;
	var this4 = new tannus_geom_TPoint(r.width * (px / 100),r.height * (py / 100),0);
	return this4;
};
tannus_geom__$Point_Point_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_geom__$Point_Point_$Impl_$.toArray = function(this1) {
	return this1.toArray();
};
tannus_geom__$Point_Point_$Impl_$.fromFloatArray = function(a) {
	return tannus_geom_TPoint.fromFloatArray(a);
};
tannus_geom__$Point_Point_$Impl_$.fromIntArray = function(a) {
	return tannus_geom_TPoint.fromFloatArray(a);
};
tannus_geom__$Point_Point_$Impl_$.perc = function(what,of) {
	return tannus_math__$Percent_Percent_$Impl_$.percent(what,of);
};
tannus_geom__$Point_Point_$Impl_$.createLinked = function(x,y,z) {
	return new tannus_geom_LinkedPoint(x,y,z);
};
tannus_geom__$Point_Point_$Impl_$.createLinkedFromPointRef = function(p) {
	var this1 = function() {
		return p().get_x();
	};
	var this2 = function(v) {
		return p().set_x(v);
	};
	var this3 = new tannus_io__$Pointer_Ref(this1,this2);
	var x = this3;
	var this4 = function() {
		return p().get_y();
	};
	var this5 = function(v1) {
		return p().set_y(v1);
	};
	var this6 = new tannus_io__$Pointer_Ref(this4,this5);
	var y = this6;
	var this7 = function() {
		return p().get_z();
	};
	var this8 = function(v2) {
		return p().set_z(v2);
	};
	var this9 = new tannus_io__$Pointer_Ref(this7,this8);
	var z = this9;
	return new tannus_geom_LinkedPoint(x,y,z);
};
var tannus_geom_TPoint = function(x,y,z) {
	this._x = x;
	this._y = y;
	this._z = z;
};
$hxClasses["tannus.geom.TPoint"] = tannus_geom_TPoint;
tannus_geom_TPoint.__name__ = ["tannus","geom","TPoint"];
tannus_geom_TPoint.__interfaces__ = [tannus_ds_Comparable];
tannus_geom_TPoint.fromFloatArray = function(a) {
	var ma = a;
	var this1;
	var this2 = ma[0];
	var this3 = ma[1];
	var this4 = ma[2];
	this1 = new tannus_geom_TPoint(this2 != null ? this2 : 0,this3 != null ? this3 : 0,this4 != null ? this4 : 0);
	return this1;
};
tannus_geom_TPoint.prototype = {
	angleTo: function(other) {
		var x1 = this.get_x();
		var y1 = this.get_y();
		var x2 = other.get_x();
		var this1 = new tannus_geom_CAngle(Math.atan2(other.get_y() - y1,x2 - x1) * 180 / 3.141592653589793);
		return this1;
	}
	,distanceFrom: function(other) {
		return Math.sqrt(Math.pow(Math.abs(this.get_x() - other.get_x()),2) + Math.pow(Math.abs(this.get_y() - other.get_y()),2));
	}
	,copyFrom: function(p) {
		this.set_x(p.get_x());
		this.set_y(p.get_y());
		this.set_z(p.get_z());
	}
	,plusPoint: function(other) {
		var this1 = new tannus_geom_TPoint(this.get_x() + other.get_x(),this.get_y() + other.get_y(),this.get_z() + other.get_z());
		return this1;
	}
	,plusFloat: function(n) {
		var this1 = new tannus_geom_TPoint(this.get_x() + n,this.get_y() + n,this.get_z() + n);
		return this1;
	}
	,moveByPoint: function(other) {
		var _g = this;
		_g.set_x(_g.get_x() + other.get_x());
		var _g1 = this;
		_g1.set_y(_g1.get_y() + other.get_y());
		var _g2 = this;
		_g2.set_z(_g2.get_z() + other.get_z());
		return this;
	}
	,moveByFloat: function(n) {
		var _g = this;
		_g.set_x(_g.get_x() + n);
		var _g1 = this;
		_g1.set_y(_g1.get_y() + n);
		var _g2 = this;
		_g2.set_z(_g2.get_z() + n);
		return this;
	}
	,minusPoint: function(other) {
		var this1 = new tannus_geom_TPoint(this.get_x() - other.get_x(),this.get_y() - other.get_y(),this.get_z() - other.get_z());
		return this1;
	}
	,minusFloat: function(n) {
		var this1 = new tannus_geom_TPoint(this.get_x() - n,this.get_y() - n,this.get_z() - n);
		return this1;
	}
	,iminusPoint: function(other) {
		this.moveByPoint(other.negate());
		return this;
	}
	,iminusFloat: function(n) {
		this.moveByFloat(-n);
		return this;
	}
	,dividePoint: function(d) {
		var this1 = new tannus_geom_TPoint(this.get_x() / d.get_x(),this.get_y() / d.get_y(),this.get_z() != 0 ? this.get_z() / d.get_z() : 0);
		return this1;
	}
	,divideFloat: function(f) {
		var this1 = new tannus_geom_TPoint(this.get_x() / f,this.get_y() / f,this.get_z() != 0 ? this.get_z() / f : 0);
		return this1;
	}
	,multPoint: function(p) {
		var this1 = new tannus_geom_TPoint(this.get_x() * p.get_x(),this.get_y() * p.get_y(),this.get_z() * p.get_z());
		return this1;
	}
	,multFloat: function(n) {
		var this1 = new tannus_geom_TPoint(this.get_x() * n,this.get_y() * n,this.get_z() * n);
		return this1;
	}
	,negate: function() {
		return this.multFloat(-1);
	}
	,clone: function() {
		var this1 = new tannus_geom_TPoint(this.get_x(),this.get_y(),this.get_z());
		return this1;
	}
	,clamp: function() {
		this.set_x(this.get_x() | 0);
		this.set_y(this.get_y() | 0);
		this.set_z(this.get_z() | 0);
	}
	,clamped: function() {
		var this1 = new tannus_geom_TPoint(this.get_x() | 0,this.get_y() | 0,this.get_z() | 0);
		return this1;
	}
	,lerp: function(other,weight) {
		var a = this.get_x();
		var x = a + weight * (other.get_x() - a);
		var a1 = this.get_y();
		var y = a1 + weight * (other.get_y() - a1);
		var a2 = this.get_z();
		var this1 = new tannus_geom_TPoint(x,y,a2 + weight * (other.get_z() - a2));
		return this1;
	}
	,mutate: function(f) {
		var this1 = new tannus_geom_TPoint(f(this.get_x()),f(this.get_y()),f(this.get_z()));
		return this1;
	}
	,imutate: function(f) {
		this.set_x(f(this.get_x()));
		this.set_y(f(this.get_y()));
		this.set_z(f(this.get_z()));
		return this;
	}
	,equals: function(other) {
		if(this.get_x() == other.get_x() && this.get_y() == other.get_y()) {
			return this.get_z() == other.get_z();
		} else {
			return false;
		}
	}
	,nequals: function(other) {
		return !this.equals(other);
	}
	,toString: function() {
		return "Point(" + this.get_x() + ", " + this.get_y() + ", " + this.get_z() + ")";
	}
	,toArray: function() {
		return [this.get_x(),this.get_y(),this.get_z()];
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,get_z: function() {
		return this._z;
	}
	,set_x: function(v) {
		return this._x = v;
	}
	,set_y: function(v) {
		return this._y = v;
	}
	,set_z: function(v) {
		return this._z = v;
	}
	,_x: null
	,_y: null
	,_z: null
	,__class__: tannus_geom_TPoint
	,__properties__: {set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var tannus_geom_LinkedPoint = function(x,y,z) {
	var _gthis = this;
	tannus_geom_TPoint.call(this,0,0,0);
	this.rx = x;
	this.ry = y;
	var tmp;
	if(z != null) {
		tmp = z;
	} else {
		var this1 = function() {
			return _gthis._z;
		};
		var this2 = function(v) {
			return _gthis._z = v;
		};
		var this3 = new tannus_io__$Pointer_Ref(this1,this2);
		tmp = this3;
	}
	this.rz = tmp;
};
$hxClasses["tannus.geom.LinkedPoint"] = tannus_geom_LinkedPoint;
tannus_geom_LinkedPoint.__name__ = ["tannus","geom","LinkedPoint"];
tannus_geom_LinkedPoint.__super__ = tannus_geom_TPoint;
tannus_geom_LinkedPoint.prototype = $extend(tannus_geom_TPoint.prototype,{
	get_x: function() {
		return this.rx.get();
	}
	,get_y: function() {
		return this.ry.get();
	}
	,get_z: function() {
		return this.rz.get();
	}
	,set_x: function(v) {
		return this.rx.set(v);
	}
	,set_y: function(v) {
		return this.ry.set(v);
	}
	,set_z: function(v) {
		return this.rz.set(v);
	}
	,rx: null
	,ry: null
	,rz: null
	,__class__: tannus_geom_LinkedPoint
});
var tannus_geom__$Rectangle_Rectangle_$Impl_$ = {};
$hxClasses["tannus.geom._Rectangle.Rectangle_Impl_"] = tannus_geom__$Rectangle_Rectangle_$Impl_$;
tannus_geom__$Rectangle_Rectangle_$Impl_$.__name__ = ["tannus","geom","_Rectangle","Rectangle_Impl_"];
tannus_geom__$Rectangle_Rectangle_$Impl_$._new = function(_x,_y,_width,_height) {
	if(_height == null) {
		_height = 0;
	}
	if(_width == null) {
		_width = 0;
	}
	if(_y == null) {
		_y = 0;
	}
	if(_x == null) {
		_x = 0;
	}
	var this1 = new tannus_geom_CRectangle(_x,_y,_width,_height);
	return this1;
};
tannus_geom__$Rectangle_Rectangle_$Impl_$.eq = function(this1,o) {
	return this1.equals(o);
};
tannus_geom__$Rectangle_Rectangle_$Impl_$.floatDiv = function(this1,o) {
	return this1.divide(tannus_ds__$EitherType_EitherType_$Impl_$.fromL(o));
};
tannus_geom__$Rectangle_Rectangle_$Impl_$.rectDiv = function(this1,r) {
	var this2 = tannus_ds_Either.Right(r);
	return this1.divide(this2);
};
tannus_geom__$Rectangle_Rectangle_$Impl_$.fromArray = function(a) {
	switch(a.length) {
	case 2:
		var h = a[1];
		var w = a[0];
		var this1 = new tannus_geom_CRectangle(0,0,w,h);
		return this1;
	case 4:
		var h1 = a[3];
		var w1 = a[2];
		var y = a[1];
		var x = a[0];
		var this2 = new tannus_geom_CRectangle(x,y,w1,h1);
		return this2;
	default:
		var this3 = new tannus_geom_CRectangle(a[0],a[1],a[2],a[3]);
		return this3;
	}
};
tannus_geom__$Rectangle_Rectangle_$Impl_$.fromRect2D = function(rect) {
	var this1 = new tannus_geom_CRectangle(rect.d.get(0),rect.d.get(1),rect.d.get(2),rect.d.get(3));
	return this1;
};
var tannus_geom_Shape = function() { };
$hxClasses["tannus.geom.Shape"] = tannus_geom_Shape;
tannus_geom_Shape.__name__ = ["tannus","geom","Shape"];
tannus_geom_Shape.prototype = {
	getVertices: null
	,__class__: tannus_geom_Shape
};
var tannus_geom_CRectangle = function(_x,_y,_width,_height) {
	if(_height == null) {
		_height = 0;
	}
	if(_width == null) {
		_width = 0;
	}
	if(_y == null) {
		_y = 0;
	}
	if(_x == null) {
		_x = 0;
	}
	this.x = _x;
	this.y = _y;
	this.z = 0;
	this.width = _width;
	this.height = _height;
	this.depth = 0;
};
$hxClasses["tannus.geom.CRectangle"] = tannus_geom_CRectangle;
tannus_geom_CRectangle.__name__ = ["tannus","geom","CRectangle"];
tannus_geom_CRectangle.__interfaces__ = [tannus_geom_Shape];
tannus_geom_CRectangle.perc = function(what,of) {
	return tannus_math__$Percent_Percent_$Impl_$.percent(what,of);
};
tannus_geom_CRectangle.prototype = {
	clone: function() {
		var this1 = new tannus_geom_CRectangle(this.x,this.y,this.width,this.height);
		var r = this1;
		r.z = this.z;
		r.depth = this.depth;
		return r;
	}
	,cloneFrom: function(other) {
		this.x = other.x;
		this.y = other.y;
		this.z = other.z;
		this.width = other.width;
		this.height = other.height;
		this.depth = other.depth;
	}
	,equals: function(other) {
		if(this.x == other.x && this.y == other.y && this.z == other.z && this.width == other.width && this.height == other.height) {
			return this.depth == other.depth;
		} else {
			return false;
		}
	}
	,divide: function(div) {
		var _g = div;
		switch(_g[1]) {
		case 0:
			var f = _g[2];
			var this1 = new tannus_geom_CRectangle(this.x,this.y,this.width / f,this.height / f);
			return this1;
		case 1:
			var r = _g[2];
			var this2 = new tannus_geom_CRectangle(this.x,this.y,this.width / r.width,this.height / r.height);
			return this2;
		}
	}
	,contains: function(ox,oy) {
		if(ox > this.x && ox < this.x + this.width) {
			if(oy > this.y) {
				return oy < this.y + this.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		var ox = point.get_x();
		var oy = point.get_y();
		if(ox > this.x && ox < this.x + this.width) {
			if(oy > this.y) {
				return oy < this.y + this.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,containsRect: function(o) {
		var this1 = new tannus_geom_TPoint(o.x + o.width / 2,o.y + o.height / 2,0);
		var point = this1;
		var ox = point.get_x();
		var oy = point.get_y();
		if(ox > this.x && ox < this.x + this.width && (oy > this.y && oy < this.y + this.height)) {
			return true;
		} else {
			var _g = 0;
			var _g1 = o.get_corners();
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				var ox1 = p.get_x();
				var oy1 = p.get_y();
				if(ox1 > this.x && ox1 < this.x + this.width && (oy1 > this.y && oy1 < this.y + this.height)) {
					return true;
				}
			}
			return false;
		}
	}
	,enlarge: function(dw,dh) {
		var _g = this;
		_g.width += dw;
		var _g1 = this;
		_g1.height += dh;
		this.x -= dw / 2;
		this.y -= dh / 2;
	}
	,move: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,scale: function(sw,sh) {
		if(sw != null) {
			var ratio = sw / this.width;
			this.width = sw;
			this.height = ratio * this.height;
		} else if(sh != null) {
			var ratio1 = sh / this.height;
			this.width = ratio1 * this.width;
			this.height = sh;
		} else {
			return;
		}
	}
	,scaled: function(sw,sh) {
		var s = this.clone();
		s.scale(sw,sh);
		return s;
	}
	,percentScale: function(amount) {
		this.width *= amount / 100;
		this.height *= amount / 100;
	}
	,percentScaled: function(amount) {
		var this1 = new tannus_geom_CRectangle(this.x,this.y,this.width * (amount / 100),this.height * (amount / 100));
		return this1;
	}
	,rotated: function(angle) {
		var rads = angle.v * Math.PI / 180;
		var nw = Math.abs(this.width * Math.sin(rads) + Math.abs(this.height * Math.cos(rads)));
		var nh = Math.abs(this.width * Math.cos(rads) + Math.abs(this.height * Math.sin(rads)));
		var this1 = new tannus_geom_CRectangle(this.x,this.y,nw,nh);
		return this1;
	}
	,split: function(count,vertical) {
		if(vertical == null) {
			vertical = true;
		}
		var all = [];
		if(vertical) {
			var ph = this.height / count;
			var _g1 = 0;
			var _g = count;
			while(_g1 < _g) {
				var i = _g1++;
				var this1 = new tannus_geom_CRectangle(this.x,this.y + i * ph,this.width,ph);
				all.push(this1);
			}
		} else {
			var pw = this.width / count;
			var _g11 = 0;
			var _g2 = count;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var this2 = new tannus_geom_CRectangle(this.x + i1 * pw,this.y,pw,this.height);
				all.push(this2);
			}
		}
		return all;
	}
	,split2: function(count) {
		return this.split(count,true).map(function(r) {
			return r.split(count,false);
		});
	}
	,bisect: function(mode) {
		if(mode == null) {
			mode = true;
		}
		var pair = [];
		if(mode) {
			var this1 = new tannus_geom_TPoint(this.x,this.y,0);
			var this2 = new tannus_geom_TPoint(this.x + this.width,this.y,0);
			var this3 = new tannus_geom_TPoint(this.x + this.width,this.y + this.height,0);
			pair.push(new tannus_geom_Triangle(this1,this2,this3));
			var this4 = new tannus_geom_TPoint(this.x,this.y,0);
			var this5 = new tannus_geom_TPoint(this.x,this.y + this.height,0);
			var this6 = new tannus_geom_TPoint(this.x + this.width,this.y + this.height,0);
			pair.push(new tannus_geom_Triangle(this4,this5,this6));
		} else {
			var this7 = new tannus_geom_TPoint(this.x + this.width,this.y,0);
			var this8 = new tannus_geom_TPoint(this.x + this.width,this.y + this.height,0);
			var this9 = new tannus_geom_TPoint(this.x,this.y + this.height,0);
			pair.push(new tannus_geom_Triangle(this7,this8,this9));
			var this10 = new tannus_geom_TPoint(this.x,this.y + this.height,0);
			var this11 = new tannus_geom_TPoint(this.x,this.y,0);
			var this12 = new tannus_geom_TPoint(this.x + this.width,this.y,0);
			pair.push(new tannus_geom_Triangle(this10,this11,this12));
		}
		return pair;
	}
	,bisect2: function() {
		return tannus_ds_ArrayTools.flatten(this.bisect().map(function(t) {
			return t.bisect();
		}));
	}
	,crop: function(cr) {
		var corners = cr.get_corners().map($bind(this,this.containsPoint));
		if(Lambda.has(corners,false)) {
			return null;
		}
		var this1 = new tannus_geom_CRectangle(this.x,this.y,cr.x - this.x,this.height);
		var left = this1;
		var this2 = new tannus_geom_CRectangle(cr.x,this.y,cr.width,cr.y - this.y);
		var top = this2;
		var this3 = new tannus_geom_CRectangle(cr.x,cr.y + cr.height,cr.width,this.y + this.height);
		var bottom = this3;
		bottom.height -= bottom.y;
		var this4 = new tannus_geom_CRectangle(cr.x + cr.width,this.y,0,this.height);
		var right = this4;
		right.width = this.x + this.width - right.x;
		return { "top" : top, "left" : left, "bottom" : bottom, "right" : right};
	}
	,vectorize: function(r) {
		var this1 = new tannus_geom_TPoint(this.x,this.y,0);
		var this2 = this1;
		var this3 = new tannus_geom_TPoint(tannus_math__$Percent_Percent_$Impl_$.percent(this2.get_x(),r.width),tannus_math__$Percent_Percent_$Impl_$.percent(this2.get_y(),r.height),0);
		var pos = this3;
		var this4;
		var this5 = [tannus_math__$Percent_Percent_$Impl_$.percent(this.width,r.width),tannus_math__$Percent_Percent_$Impl_$.percent(this.height,r.height)];
		this4 = this5;
		var dim = this4;
		var this6 = new tannus_geom_CRectangle(pos.get_x(),pos.get_y(),dim[0],dim[1]);
		return this6;
	}
	,devectorize: function(r) {
		var px = this.x;
		var py = this.y;
		var pw = this.width;
		var ph = this.height;
		var this1 = new tannus_geom_CRectangle(r.width * (px / 100),r.height * (py / 100),r.width * (pw / 100),r.height * (ph / 100));
		return this1;
	}
	,getVertices: function(precision) {
		var self = this;
		var this1 = new tannus_geom_TPoint(self.x,self.y,0);
		var this2 = new tannus_geom_TPoint(self.x + self.width,self.y,0);
		var this3 = new tannus_geom_TPoint(self.x + self.width,self.y + self.height,0);
		var this4 = new tannus_geom_TPoint(self.x,self.y + self.height,0);
		var this5 = new tannus_geom_VertexArray([this1,this2,this3,this4]);
		var verts = this5;
		return verts;
	}
	,getCornerPointers: function() {
		var _gthis = this;
		var this1 = function() {
			var this2 = new tannus_geom_TPoint(_gthis.x,_gthis.y,0);
			return this2;
		};
		var this3 = function(v) {
			return _gthis.set_topLeft(v);
		};
		var this4 = new tannus_io__$Pointer_Ref(this1,this3);
		var this5 = function() {
			var this6 = new tannus_geom_TPoint(_gthis.x + _gthis.width,_gthis.y,0);
			return this6;
		};
		var this7 = function(v1) {
			return _gthis.set_topRight(v1);
		};
		var this8 = new tannus_io__$Pointer_Ref(this5,this7);
		var this9 = function() {
			var this10 = new tannus_geom_TPoint(_gthis.x,_gthis.y + _gthis.height,0);
			return this10;
		};
		var this11 = function(v2) {
			return _gthis.set_bottomLeft(v2);
		};
		var this12 = new tannus_io__$Pointer_Ref(this9,this11);
		var this13 = function() {
			var this14 = new tannus_geom_TPoint(_gthis.x + _gthis.width,_gthis.y + _gthis.height,0);
			return this14;
		};
		var this15 = function(v3) {
			return _gthis.set_bottomRight(v3);
		};
		var this16 = new tannus_io__$Pointer_Ref(this13,this15);
		var result = [this4,this8,this12,this16];
		return result;
	}
	,layers: function() {
		var results = [];
		var _g1 = Math.round(this.z);
		var _g = Math.round(this.z + this.depth);
		while(_g1 < _g) {
			var i = _g1++;
			var this1 = new tannus_geom_CRectangle(this.x,this.y,this.width,this.height);
			var layer = this1;
			layer.z = i;
			results.push(layer);
		}
		return results;
	}
	,toString: function() {
		return "Rectangle(" + this.x + ", " + this.y + ", " + this.width + ", " + this.height + ")";
	}
	,toArray: function() {
		return [this.x,this.y,this.width,this.height];
	}
	,get_position: function() {
		var this1 = new tannus_geom_TPoint(this.x,this.y,this.z);
		return this1;
	}
	,set_position: function(np) {
		this.x = np.get_x();
		this.y = np.get_y();
		this.z = np.get_z();
		var this1 = new tannus_geom_TPoint(this.x,this.y,this.z);
		return this1;
	}
	,get_corners: function() {
		var this1 = new tannus_geom_TPoint(this.x,this.y,0);
		var this2 = new tannus_geom_TPoint(this.x + this.width,this.y,0);
		var this3 = new tannus_geom_TPoint(this.x,this.y + this.height,0);
		var this4 = new tannus_geom_TPoint(this.x + this.width,this.y + this.height,0);
		return [this1,this2,this3,this4];
	}
	,get_area: function() {
		return this.width * this.height;
	}
	,get_centerX: function() {
		return this.x + this.width / 2;
	}
	,set_centerX: function(v) {
		return this.x = v - this.width / 2;
	}
	,get_centerY: function() {
		return this.y + this.height / 2;
	}
	,set_centerY: function(v) {
		return this.y = v - this.height / 2;
	}
	,get_center: function() {
		var this1 = new tannus_geom_TPoint(this.x + this.width / 2,this.y + this.height / 2,0);
		return this1;
	}
	,set_center: function(nc) {
		this.x = nc.get_x() - this.width / 2;
		this.y = nc.get_y() - this.height / 2;
		return nc;
	}
	,get_topRight: function() {
		var this1 = new tannus_geom_TPoint(this.x + this.width,this.y,0);
		return this1;
	}
	,set_topRight: function(v) {
		this.x = v.get_x() - this.width;
		this.y = v.get_y();
		var this1 = new tannus_geom_TPoint(this.x + this.width,this.y,0);
		return this1;
	}
	,get_topLeft: function() {
		var this1 = new tannus_geom_TPoint(this.x,this.y,0);
		return this1;
	}
	,set_topLeft: function(v) {
		this.x = v.get_x();
		this.y = v.get_y();
		var this1 = new tannus_geom_TPoint(this.x,this.y,0);
		return this1;
	}
	,get_bottomLeft: function() {
		var this1 = new tannus_geom_TPoint(this.x,this.y + this.height,0);
		return this1;
	}
	,set_bottomLeft: function(v) {
		this.x = v.get_x();
		this.y = v.get_y() - this.height;
		var this1 = new tannus_geom_TPoint(this.x,this.y + this.height,0);
		return this1;
	}
	,get_bottomRight: function() {
		var this1 = new tannus_geom_TPoint(this.x + this.width,this.y + this.height,0);
		return this1;
	}
	,set_bottomRight: function(v) {
		this.x = v.get_x() - this.width;
		this.y = v.get_y() - this.height;
		var this1 = new tannus_geom_TPoint(this.x + this.width,this.y + this.height,0);
		return this1;
	}
	,get_w: function() {
		return this.width;
	}
	,set_w: function(nw) {
		return this.width = nw;
	}
	,get_h: function() {
		return this.height;
	}
	,set_h: function(nh) {
		return this.height = nh;
	}
	,get_d: function() {
		return this.depth;
	}
	,set_d: function(nd) {
		return this.depth = nd;
	}
	,x: null
	,y: null
	,z: null
	,width: null
	,height: null
	,depth: null
	,__class__: tannus_geom_CRectangle
	,__properties__: {set_d:"set_d",get_d:"get_d",set_h:"set_h",get_h:"get_h",set_w:"set_w",get_w:"get_w",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottomLeft:"set_bottomLeft",get_bottomLeft:"get_bottomLeft",set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_topRight:"set_topRight",get_topRight:"get_topRight",set_center:"set_center",get_center:"get_center",set_centerY:"set_centerY",get_centerY:"get_centerY",set_centerX:"set_centerX",get_centerX:"get_centerX",get_area:"get_area",get_corners:"get_corners",set_position:"set_position",get_position:"get_position"}
};
var tannus_geom_Triangle = function(x,y,z) {
	var tmp;
	if(x != null) {
		tmp = x;
	} else {
		var this1 = new tannus_geom_TPoint(0,0,0);
		tmp = this1;
	}
	this.one = tmp;
	var tmp1;
	if(y != null) {
		tmp1 = y;
	} else {
		var this2 = new tannus_geom_TPoint(0,0,0);
		tmp1 = this2;
	}
	this.two = tmp1;
	var tmp2;
	if(z != null) {
		tmp2 = z;
	} else {
		var this3 = new tannus_geom_TPoint(0,0,0);
		tmp2 = this3;
	}
	this.three = tmp2;
};
$hxClasses["tannus.geom.Triangle"] = tannus_geom_Triangle;
tannus_geom_Triangle.__name__ = ["tannus","geom","Triangle"];
tannus_geom_Triangle.__interfaces__ = [tannus_geom_Shape];
tannus_geom_Triangle.prototype = {
	clone: function() {
		return new tannus_geom_Triangle(this.one.clone(),this.two.clone(),this.three.clone());
	}
	,bisect: function() {
		var _this = new tannus_geom_Line(this.one,this.three);
		var mp = _this.one.lerp(_this.two,0.5);
		var l = new tannus_geom_Triangle(this.one,this.two,mp);
		var r = new tannus_geom_Triangle(mp,this.two,this.three);
		return [l,r];
	}
	,containsPoint: function(p) {
		var a = this.three.minusPoint(this.one);
		var b = this.two.minusPoint(this.one);
		var c = p.minusPoint(this.one);
		var dot_aa = a.get_x() * a.get_x() + a.get_y() * a.get_y();
		var dot_ab = a.get_x() * b.get_x() + a.get_y() * b.get_y();
		var dot_ac = a.get_x() * c.get_x() + a.get_y() * c.get_y();
		var dot_bb = b.get_x() * b.get_x() + b.get_y() * b.get_y();
		var dot_bc = b.get_x() * c.get_x() + b.get_y() * c.get_y();
		var invDenom = 1 / (dot_aa * dot_bb - dot_ab * dot_ab);
		var u = (dot_bb * dot_ac - dot_ab * dot_bc) * invDenom;
		var v = (dot_aa * dot_bc - dot_ab * dot_ac) * invDenom;
		if(u >= 0 && v >= 0) {
			return u + v < 1;
		} else {
			return false;
		}
	}
	,dot: function(x,y) {
		return x.get_x() * y.get_x() + x.get_y() * y.get_y();
	}
	,vectorize: function(r) {
		var c = new tannus_geom_Triangle(this.one.clone(),this.two.clone(),this.three.clone());
		var this1 = this.one;
		var this2 = new tannus_geom_TPoint(tannus_math__$Percent_Percent_$Impl_$.percent(this1.get_x(),r.width),tannus_math__$Percent_Percent_$Impl_$.percent(this1.get_y(),r.height),0);
		c.one = this2;
		var this3 = this.two;
		var this4 = new tannus_geom_TPoint(tannus_math__$Percent_Percent_$Impl_$.percent(this3.get_x(),r.width),tannus_math__$Percent_Percent_$Impl_$.percent(this3.get_y(),r.height),0);
		c.two = this4;
		var this5 = this.three;
		var this6 = new tannus_geom_TPoint(tannus_math__$Percent_Percent_$Impl_$.percent(this5.get_x(),r.width),tannus_math__$Percent_Percent_$Impl_$.percent(this5.get_y(),r.height),0);
		c.three = this6;
		return c;
	}
	,devectorize: function(r) {
		var c = new tannus_geom_Triangle(this.one.clone(),this.two.clone(),this.three.clone());
		c.one = tannus_geom__$Point_Point_$Impl_$.devectorize(this.one,r);
		c.two = tannus_geom__$Point_Point_$Impl_$.devectorize(this.two,r);
		c.three = tannus_geom__$Point_Point_$Impl_$.devectorize(this.three,r);
		return c;
	}
	,getVertices: function(precision) {
		var lines = this.get_lines();
		var _g = [];
		var _g1 = 0;
		while(_g1 < lines.length) {
			var l = lines[_g1];
			++_g1;
			_g.push([l.one,l.two]);
		}
		var this1 = new tannus_geom_VertexArray(tannus_ds_ArrayTools.flatten(_g));
		return this1;
	}
	,get_center: function() {
		var cx = (this.one.get_x() + this.two.get_x() + this.three.get_x()) / 3;
		var cy = (this.one.get_y() + this.two.get_y() + this.three.get_y()) / 3;
		var cz = (this.one.get_z() + this.two.get_z() + this.three.get_z()) / 3;
		var this1 = new tannus_geom_TPoint(cx,cy,cz);
		return this1;
	}
	,one: null
	,two: null
	,three: null
	,get_lines: function() {
		var la = [];
		la.push(new tannus_geom_Line(this.one,this.two));
		la.push(new tannus_geom_Line(this.two,this.three));
		la.push(new tannus_geom_Line(this.three,this.one));
		return la;
	}
	,get_points: function() {
		return [this.one,this.two,this.three];
	}
	,set_points: function(v) {
		this.one = v[0];
		this.two = v[1];
		this.three = v[2];
		return [this.one,this.two,this.three];
	}
	,__class__: tannus_geom_Triangle
	,__properties__: {set_points:"set_points",get_points:"get_points",get_lines:"get_lines",get_center:"get_center"}
};
var tannus_geom__$Velocity_Velocity_$Impl_$ = {};
$hxClasses["tannus.geom._Velocity.Velocity_Impl_"] = tannus_geom__$Velocity_Velocity_$Impl_$;
tannus_geom__$Velocity_Velocity_$Impl_$.__name__ = ["tannus","geom","_Velocity","Velocity_Impl_"];
tannus_geom__$Velocity_Velocity_$Impl_$._new = function(speed,angle) {
	var this1 = new tannus_geom_CVelocity(speed,angle);
	return this1;
};
tannus_geom__$Velocity_Velocity_$Impl_$.invert = function(this1) {
	return this1.invert();
};
tannus_geom__$Velocity_Velocity_$Impl_$.plus = function(this1,other) {
	return this1.plus(other);
};
tannus_geom__$Velocity_Velocity_$Impl_$.minus = function(this1,other) {
	return this1.minus(other);
};
tannus_geom__$Velocity_Velocity_$Impl_$.toPoint = function(this1) {
	return this1.get_vector();
};
tannus_geom__$Velocity_Velocity_$Impl_$.fromPoint = function(p) {
	return tannus_geom_CVelocity.fromPoint(p);
};
var tannus_geom_CVelocity = function(speed,angle) {
	this.speed = speed;
	this.angle = angle;
};
$hxClasses["tannus.geom.CVelocity"] = tannus_geom_CVelocity;
tannus_geom_CVelocity.__name__ = ["tannus","geom","CVelocity"];
tannus_geom_CVelocity.fromVector = function(x,y) {
	var this1 = new tannus_geom_TPoint(x,y,0);
	return tannus_geom_CVelocity.fromPoint(this1);
};
tannus_geom_CVelocity.fromPoint = function(p) {
	var this1 = new tannus_geom_CAngle(0);
	var this2 = new tannus_geom_CVelocity(0,this1);
	var vel = this2;
	vel.set_vector(p);
	return vel;
};
tannus_geom_CVelocity.prototype = {
	setVector: function(vx,vy) {
		var this1 = new tannus_geom_TPoint(vx,vy,0);
		var e = this1;
		var this2 = new tannus_geom_TPoint(0,0,0);
		var l = new tannus_geom_Line(this2,e);
		this.speed = l.one.distanceFrom(l.two);
		var x2 = e.get_x();
		var this3 = new tannus_geom_CAngle(Math.atan2(e.get_y(),x2) * 180 / 3.141592653589793);
		this.angle = this3;
	}
	,clone: function() {
		var this1 = new tannus_geom_CVelocity(this.speed,this.angle);
		return this1;
	}
	,invert: function() {
		return tannus_geom_CVelocity.fromVector(-(Math.cos(this.angle.v * Math.PI / 180) * this.speed),-(Math.sin(this.angle.v * Math.PI / 180) * this.speed));
	}
	,plus: function(other) {
		return tannus_geom_CVelocity.fromPoint(this.get_vector().plusPoint(other.get_vector()));
	}
	,minus: function(other) {
		return tannus_geom_CVelocity.fromPoint(this.get_vector().minusPoint(other.get_vector()));
	}
	,lerp: function(other,weight) {
		var vec = this.get_vector().lerp(other.get_vector(),weight);
		return tannus_geom_CVelocity.fromPoint(vec);
	}
	,get_x: function() {
		return Math.cos(this.angle.v * Math.PI / 180) * this.speed;
	}
	,set_x: function(nx) {
		this.setVector(nx,Math.sin(this.angle.v * Math.PI / 180) * this.speed);
		return nx;
	}
	,get_y: function() {
		return Math.sin(this.angle.v * Math.PI / 180) * this.speed;
	}
	,set_y: function(ny) {
		this.setVector(Math.cos(this.angle.v * Math.PI / 180) * this.speed,ny);
		return ny;
	}
	,get_vector: function() {
		var this1 = new tannus_geom_TPoint(Math.cos(this.angle.v * Math.PI / 180) * this.speed,Math.sin(this.angle.v * Math.PI / 180) * this.speed,0);
		return this1;
	}
	,set_vector: function(v) {
		this.setVector(v.get_x(),v.get_y());
		return this.get_vector();
	}
	,speed: null
	,angle: null
	,__class__: tannus_geom_CVelocity
	,__properties__: {set_vector:"set_vector",get_vector:"get_vector",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var tannus_geom_VertexArray = function(v) {
	this.set_data(v != null ? v.slice() : []);
	var this1 = new tannus_ds_CPair(null,null);
	this._lines = this1;
	this._rect = null;
};
$hxClasses["tannus.geom.VertexArray"] = tannus_geom_VertexArray;
tannus_geom_VertexArray.__name__ = ["tannus","geom","VertexArray"];
tannus_geom_VertexArray.prototype = {
	resetCache: function() {
		var this1 = new tannus_ds_CPair(null,null);
		this._lines = this1;
		this._rect = null;
	}
	,get: function(i) {
		return this.data[i];
	}
	,set: function(i,p) {
		this.data[i] = p.clone();
		this.resetCache();
		return this.get(i);
	}
	,toImmutable: function(p) {
		if(!js_Boot.__instanceof(p,tannus_geom_ImmutablePoint)) {
			var np = new tannus_geom_ImmutablePoint(p.get_x(),p.get_y(),p.get_z());
			return np;
		} else {
			return p.clone();
		}
	}
	,toMutable: function(p) {
		if(js_Boot.__instanceof(p,tannus_geom_ImmutablePoint)) {
			var this1 = new tannus_geom_TPoint(0,0,0);
			var np = this1;
			np.copyFrom(p);
			return np;
		} else {
			return p;
		}
	}
	,iterator: function() {
		return new tannus_geom_VerticeIterator(this);
	}
	,push: function(p) {
		this.resetCache();
		return this.data.push(p.clone());
	}
	,pop: function() {
		this.resetCache();
		return this.data.pop();
	}
	,unshift: function(p) {
		this.resetCache();
		this.data.unshift(p.clone());
		return this.data.length;
	}
	,shift: function() {
		this.resetCache();
		return this.data.shift();
	}
	,concat: function(other) {
		var this1 = new tannus_geom_VertexArray(this.data.concat(other.data));
		return this1;
	}
	,append: function(other) {
		this.resetCache();
		this.set_data(this.data.concat(other.data));
		var this1 = new tannus_geom_VertexArray(this.data);
		return this1;
	}
	,clone: function() {
		return new tannus_geom_VertexArray(this.data);
	}
	,calculateLines: function(close) {
		if(close == null) {
			close = false;
		}
		var cached = close ? this._lines.right : this._lines.left;
		if(cached != null) {
			return cached;
		} else {
			var lines = [];
			var i = 0;
			var last = null;
			while(i < this.data.length) {
				var start = this.data[i];
				if(last == null) {
					last = start;
				} else {
					lines.push(new tannus_geom_Line(last,start));
					last = start;
				}
				++i;
			}
			if(close) {
				lines.push(new tannus_geom_Line(tannus_ds_ArrayTools.last(this.data),this.data[0]));
				this._lines.right = lines;
			} else {
				this._lines.left = lines;
			}
			return lines;
		}
	}
	,lineStack: function(close) {
		if(close == null) {
			close = false;
		}
		return new tannus_ds_Stack(this.calculateLines(close));
	}
	,pointStack: function() {
		var rdat = this.data.slice();
		rdat.reverse();
		return new tannus_ds_Stack(rdat);
	}
	,simplify: function(threshold) {
		if(threshold == null) {
			threshold = 2;
		}
		var lines = this.calculateLines();
		var ndata = [];
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			if(Math.round(line.one.distanceFrom(line.two)) <= threshold) {
				ndata.push(line.one.lerp(line.two,0.5));
			} else {
				ndata.push(line.one);
				ndata.push(line.two);
			}
		}
		this.set_data(ndata);
	}
	,each: function(f) {
		var points = this.pointStack();
		while(!points.get_empty()) {
			var p = points.pop();
			f(p);
		}
		this.resetCache();
	}
	,apply: function(m) {
		this.set_data(this.data.map(function(p) {
			return m.transformPoint(p);
		}));
	}
	,map: function(f) {
		return new tannus_geom_VertexArray(this.data.map(f));
	}
	,getContainingRect: function() {
		if(this._rect == null) {
			var xr = tannus_math_TMath.minmax(this.data,function(p) {
				return p.get_x();
			});
			var yr = tannus_math_TMath.minmax(this.data,function(p1) {
				return p1.get_y();
			});
			var this1 = new tannus_geom_CRectangle(xr.min,yr.min,xr.max - xr.min,yr.max - yr.min);
			this._rect = this1;
		}
		return this._rect;
	}
	,get_length: function() {
		return this.data.length;
	}
	,get_lines: function() {
		return this.calculateLines(true);
	}
	,get_rect: function() {
		return this.getContainingRect();
	}
	,get_first: function() {
		return this.get(0);
	}
	,get_last: function() {
		return this.get(this.data.length - 1);
	}
	,data: null
	,set_data: function(plist) {
		if(plist != this.data) {
			this.resetCache();
		}
		return this.data = plist;
	}
	,_lines: null
	,_rect: null
	,__class__: tannus_geom_VertexArray
	,__properties__: {set_data:"set_data",get_last:"get_last",get_first:"get_first",get_rect:"get_rect",get_lines:"get_lines",get_length:"get_length"}
};
var tannus_geom_VerticeIterator = function(va) {
	this.array = va;
	this.iter = new IntIterator(0,this.array.data.length);
};
$hxClasses["tannus.geom.VerticeIterator"] = tannus_geom_VerticeIterator;
tannus_geom_VerticeIterator.__name__ = ["tannus","geom","VerticeIterator"];
tannus_geom_VerticeIterator.prototype = {
	hasNext: function() {
		var _this = this.iter;
		return _this.min < _this.max;
	}
	,next: function() {
		return this.array.get(this.iter.min++);
	}
	,array: null
	,iter: null
	,__class__: tannus_geom_VerticeIterator
};
var tannus_geom_ImmutablePoint = function(x,y,z) {
	tannus_geom_TPoint.call(this,x,y,z);
};
$hxClasses["tannus.geom.ImmutablePoint"] = tannus_geom_ImmutablePoint;
tannus_geom_ImmutablePoint.__name__ = ["tannus","geom","ImmutablePoint"];
tannus_geom_ImmutablePoint.__super__ = tannus_geom_TPoint;
tannus_geom_ImmutablePoint.prototype = $extend(tannus_geom_TPoint.prototype,{
	set_x: function(v) {
		return v;
	}
	,set_y: function(v) {
		return v;
	}
	,set_z: function(v) {
		return v;
	}
	,write: function(p) {
		this._x = p.get_x();
		this._y = p.get_y();
		this._z = p.get_z();
	}
	,__class__: tannus_geom_ImmutablePoint
});
var tannus_geom__$Vertices_Vertices_$Impl_$ = {};
$hxClasses["tannus.geom._Vertices.Vertices_Impl_"] = tannus_geom__$Vertices_Vertices_$Impl_$;
tannus_geom__$Vertices_Vertices_$Impl_$.__name__ = ["tannus","geom","_Vertices","Vertices_Impl_"];
tannus_geom__$Vertices_Vertices_$Impl_$._new = function(v) {
	var this1 = new tannus_geom_VertexArray(v);
	return this1;
};
tannus_geom__$Vertices_Vertices_$Impl_$.clone = function(this1) {
	return this1.clone();
};
tannus_geom__$Vertices_Vertices_$Impl_$.map = function(this1,f) {
	return this1.map(f);
};
tannus_geom__$Vertices_Vertices_$Impl_$.get = function(this1,i) {
	return this1.get(i);
};
tannus_geom__$Vertices_Vertices_$Impl_$.set = function(this1,i,p) {
	return this1.set(i,p);
};
tannus_geom__$Vertices_Vertices_$Impl_$.isum = function(this1,other) {
	return this1.append(other);
};
tannus_geom__$Vertices_Vertices_$Impl_$.sum = function(this1,other) {
	var this2 = new tannus_geom_VertexArray(this1.data.concat(other.data));
	return this2;
};
tannus_geom__$Vertices_Vertices_$Impl_$.toPoints = function(this1) {
	var _g = [];
	var p = this1.iterator();
	while(p.hasNext()) {
		var p1 = p.next();
		_g.push(p1.clone());
	}
	return _g;
};
tannus_geom__$Vertices_Vertices_$Impl_$.fromPoints = function(list) {
	var this1 = new tannus_geom_VertexArray(list);
	return this1;
};
tannus_geom__$Vertices_Vertices_$Impl_$.toLines = function(this1) {
	return this1.calculateLines(true);
};
tannus_geom__$Vertices_Vertices_$Impl_$.fromLines = function(lines) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < lines.length) {
		var l = lines[_g1];
		++_g1;
		_g.push([l.one,l.two]);
	}
	var this1 = new tannus_geom_VertexArray(tannus_ds_ArrayTools.flatten(_g));
	return this1;
};
tannus_geom__$Vertices_Vertices_$Impl_$.fromShape = function(s) {
	return s.getVertices();
};
var tannus_geom2_Point = function(x,y,z) {
	var this1 = new tannus_ds_data_Data(3,0);
	this.d = this1;
	if(x == null) {
		x = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(z == null) {
		z = 0;
	}
	this.d.sets([x,y,z]);
};
$hxClasses["tannus.geom2.Point"] = tannus_geom2_Point;
tannus_geom2_Point.__name__ = ["tannus","geom2","Point"];
tannus_geom2_Point.prototype = {
	equals: function(other) {
		if(this.d.get(0) == other.d.get(0) && this.d.get(1) == other.d.get(1)) {
			return this.d.get(1) == other.d.get(1);
		} else {
			return false;
		}
	}
	,angleTo: function(other) {
		var x1 = this.d.get(0);
		var y1 = other.d.get(0);
		var x2 = this.d.get(1);
		var this1 = new tannus_geom_CAngle(Math.atan2(other.d.get(1) - y1,x2 - x1) * 180 / 3.141592653589793);
		return this1;
	}
	,distanceFrom: function(other) {
		return Math.sqrt(Math.pow(this.d.get(0) - other.d.get(0),2) + Math.pow(this.d.get(1) - other.d.get(1),2));
	}
	,copyFrom: function(other) {
		var v = other.d.get(0);
		this.d.set(0,v);
		var v1 = other.d.get(1);
		this.d.set(1,v1);
		var v2 = other.d.get(1);
		this.d.set(1,v2);
	}
	,mutate: function(f) {
		return new tannus_geom2_Point(f(this.d.get(0)),f(this.d.get(1)),f(this.d.get(1)));
	}
	,mutate2: function(o,f) {
		return new tannus_geom2_Point(f(this.d.get(0),o.d.get(0)),f(this.d.get(1),o.d.get(1)),f(this.d.get(1),o.d.get(1)));
	}
	,plusPoint: function(other) {
		return new tannus_geom2_Point(this.d.get(0) + other.d.get(0),this.d.get(1) + other.d.get(1),this.d.get(1) + other.d.get(1));
	}
	,minusPoint: function(o) {
		return new tannus_geom2_Point(this.d.get(0) - o.d.get(0),this.d.get(1) - o.d.get(1),this.d.get(1) - o.d.get(1));
	}
	,clone: function() {
		return new tannus_geom2_Point(this.d.get(0),this.d.get(1),this.d.get(1));
	}
	,lerp: function(other,weight) {
		var a = this.d.get(0);
		var tmp = a + weight * (other.d.get(0) - a);
		var a1 = this.d.get(1);
		var tmp1 = a1 + weight * (other.d.get(1) - a1);
		var a2 = this.d.get(1);
		return new tannus_geom2_Point(tmp,tmp1,a2 + weight * (other.d.get(1) - a2));
	}
	,round: function() {
		var f = Math.round;
		return new tannus_geom2_Point(f(this.d.get(0)),f(this.d.get(1)),f(this.d.get(1)));
	}
	,floor: function() {
		var f = Math.floor;
		return new tannus_geom2_Point(f(this.d.get(0)),f(this.d.get(1)),f(this.d.get(1)));
	}
	,ceil: function() {
		var f = Math.ceil;
		return new tannus_geom2_Point(f(this.d.get(0)),f(this.d.get(1)),f(this.d.get(1)));
	}
	,get_x: function() {
		return this.d.get(0);
	}
	,set_x: function(v) {
		return this.d.set(0,v);
	}
	,get_y: function() {
		return this.d.get(1);
	}
	,set_y: function(v) {
		return this.d.set(1,v);
	}
	,get_z: function() {
		return this.d.get(1);
	}
	,set_z: function(v) {
		return this.d.set(1,v);
	}
	,d: null
	,__class__: tannus_geom2_Point
	,__properties__: {set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var tannus_geom2_LinkedPoint = function(x_ref,y_ref,z_ref) {
	tannus_geom2_Point.call(this,0,0,0);
	this.d = new tannus_ds_data_BoundData([x_ref,y_ref,z_ref]);
};
$hxClasses["tannus.geom2.LinkedPoint"] = tannus_geom2_LinkedPoint;
tannus_geom2_LinkedPoint.__name__ = ["tannus","geom2","LinkedPoint"];
tannus_geom2_LinkedPoint.__super__ = tannus_geom2_Point;
tannus_geom2_LinkedPoint.prototype = $extend(tannus_geom2_Point.prototype,{
	__class__: tannus_geom2_LinkedPoint
});
var tannus_geom2_Rect = function(x,y,width,height) {
	var this1 = new tannus_ds_data_Data(4,0);
	this.d = this1;
	if(x == null) {
		x = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	this.d.sets([x,y,width,height]);
};
$hxClasses["tannus.geom2.Rect"] = tannus_geom2_Rect;
tannus_geom2_Rect.__name__ = ["tannus","geom2","Rect"];
tannus_geom2_Rect.prototype = {
	clone: function() {
		return new tannus_geom2_Rect(this.d.get(0),this.d.get(1),this.d.get(2),this.d.get(3));
	}
	,pull: function(src) {
		var v = src.d.get(0);
		this.d.set(0,v);
		var v1 = src.d.get(1);
		this.d.set(1,v1);
		var v2 = src.d.get(2);
		this.d.set(2,v2);
		var v3 = src.d.get(3);
		this.d.set(3,v3);
	}
	,equals: function(o) {
		if(this.d.get(0) == o.d.get(0) && this.d.get(1) == o.d.get(1) && this.d.get(2) == o.d.get(2)) {
			return this.d.get(3) == o.d.get(3);
		} else {
			return false;
		}
	}
	,contains: function(ox,oy) {
		if(ox > this.d.get(0) && ox < this.d.get(0) + this.d.get(2)) {
			if(oy > this.d.get(1)) {
				return oy < this.d.get(1) + this.d.get(3);
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,containsPoint: function(p) {
		return this.contains(p.d.get(0),p.d.get(1));
	}
	,getCorners: function() {
		return [new tannus_geom2_Point(this.d.get(0),this.d.get(1)),new tannus_geom2_Point(this.d.get(0) + this.d.get(2),this.d.get(1)),new tannus_geom2_Point(this.d.get(0),this.d.get(1) + this.d.get(3)),new tannus_geom2_Point(this.d.get(0) + this.d.get(2),this.d.get(1) + this.d.get(3))];
	}
	,containsRect: function(o) {
		var ocl = o.getCorners();
		var _g = 0;
		while(_g < ocl.length) {
			var p = ocl[_g];
			++_g;
			if(!this.contains(p.d.get(0),p.d.get(1))) {
				return false;
			}
		}
		return true;
	}
	,overlapsWith: function(o) {
		var ocl = o.getCorners();
		var p = o.get_center();
		if(this.contains(p.d.get(0),p.d.get(1))) {
			return true;
		} else {
			var _g = 0;
			var _g1 = o.getCorners();
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				if(this.contains(p1.d.get(0),p1.d.get(1))) {
					return true;
				}
			}
			return false;
		}
	}
	,enlarge: function(dw,dh) {
		var _g = this;
		var v = _g.d.get(2) + dw;
		_g.d.set(2,v);
		var _g1 = this;
		var v1 = _g1.d.get(3) + dh;
		_g1.d.set(3,v1);
		var _g2 = this;
		var v2 = _g2.d.get(0);
		_g2.d.set(0,v2 - Math.round(dw / 2));
		var _g3 = this;
		var v3 = _g3.d.get(1);
		_g3.d.set(1,v3 - Math.round(dh / 2));
	}
	,toString: function() {
		return "Rect(" + Std.string(this.d.get(0)) + ", " + Std.string(this.d.get(1)) + ", " + Std.string(this.d.get(2)) + ", " + Std.string(this.d.get(3)) + ")";
	}
	,toArray: function() {
		return [this.d.get(0),this.d.get(1),this.d.get(2),this.d.get(3)];
	}
	,toRectangle: function() {
		var this1 = new tannus_geom_CRectangle(this.d.get(0),this.d.get(1),this.d.get(2),this.d.get(3));
		return this1;
	}
	,scale: function(sw,sh) {
		if(sw != null) {
			var ratio = sw / this.d.get(2);
			return new tannus_geom2_Rect(this.d.get(0),this.d.get(1),sw,ratio * this.d.get(3));
		} else if(sh != null) {
			var ratio1 = sh / this.d.get(3);
			return new tannus_geom2_Rect(this.d.get(0),this.d.get(1),ratio1 * this.d.get(2),sh);
		} else {
			return new tannus_geom2_Rect(this.d.get(0),this.d.get(1),this.d.get(2),this.d.get(3));
		}
	}
	,round: function() {
		var f = Math.round;
		return new tannus_geom2_Rect(f(this.d.get(0)),f(this.d.get(1)),f(this.d.get(2)),f(this.d.get(3)));
	}
	,floor: function() {
		var f = Math.floor;
		return new tannus_geom2_Rect(f(this.d.get(0)),f(this.d.get(1)),f(this.d.get(2)),f(this.d.get(3)));
	}
	,ceil: function() {
		var f = Math.ceil;
		return new tannus_geom2_Rect(f(this.d.get(0)),f(this.d.get(1)),f(this.d.get(2)),f(this.d.get(3)));
	}
	,apply: function(f) {
		return new tannus_geom2_Rect(f(this.d.get(0)),f(this.d.get(1)),f(this.d.get(2)),f(this.d.get(3)));
	}
	,get_x: function() {
		return this.d.get(0);
	}
	,set_x: function(v) {
		return this.d.set(0,v);
	}
	,get_y: function() {
		return this.d.get(1);
	}
	,set_y: function(v) {
		return this.d.set(1,v);
	}
	,get_width: function() {
		return this.d.get(2);
	}
	,set_width: function(v) {
		return this.d.set(2,v);
	}
	,get_height: function() {
		return this.d.get(3);
	}
	,set_height: function(v) {
		return this.d.set(3,v);
	}
	,get_w: function() {
		return this.d.get(2);
	}
	,set_w: function(v) {
		return this.d.set(2,v);
	}
	,get_h: function() {
		return this.d.get(3);
	}
	,set_h: function(v) {
		return this.d.set(3,v);
	}
	,get_topLeft: function() {
		return new tannus_geom2_Point(this.d.get(0),this.d.get(1));
	}
	,set_topLeft: function(p) {
		var v = p.d.get(0);
		this.d.set(0,v);
		var v1 = p.d.get(1);
		this.d.set(1,v1);
		return new tannus_geom2_Point(this.d.get(0),this.d.get(1));
	}
	,get_topRight: function() {
		return new tannus_geom2_Point(this.d.get(0) + this.d.get(2),this.d.get(1));
	}
	,set_topRight: function(p) {
		var v = p.d.get(0) - this.d.get(2);
		this.d.set(0,v);
		var v1 = p.d.get(1);
		this.d.set(1,v1);
		return new tannus_geom2_Point(this.d.get(0) + this.d.get(2),this.d.get(1));
	}
	,get_bottomLeft: function() {
		return new tannus_geom2_Point(this.d.get(0),this.d.get(1) + this.d.get(3));
	}
	,set_bottomLeft: function(p) {
		var v = p.d.get(0);
		this.d.set(0,v);
		var v1 = p.d.get(1) - this.d.get(3);
		this.d.set(1,v1);
		return new tannus_geom2_Point(this.d.get(0),this.d.get(1) + this.d.get(3));
	}
	,get_bottomRight: function() {
		return new tannus_geom2_Point(this.d.get(0) + this.d.get(2),this.d.get(1) + this.d.get(3));
	}
	,set_bottomRight: function(p) {
		var v = p.d.get(0) - this.d.get(2);
		this.d.set(0,v);
		var v1 = p.d.get(1) - this.d.get(3);
		this.d.set(1,v1);
		return new tannus_geom2_Point(this.d.get(0) + this.d.get(2),this.d.get(1) + this.d.get(3));
	}
	,get_centerX: function() {
		return this.d.get(0) + this.d.get(2) / 2;
	}
	,set_centerX: function(v) {
		var v1 = Math.round(v - this.d.get(2) / 2);
		this.d.set(0,v1);
		return this.d.get(0) + this.d.get(2) / 2;
	}
	,get_centerY: function() {
		return this.d.get(1) + this.d.get(3) / 2;
	}
	,set_centerY: function(v) {
		var v1 = Math.round(v - this.d.get(3) / 2);
		this.d.set(1,v1);
		return this.d.get(1) + this.d.get(3) / 2;
	}
	,get_center: function() {
		var _gthis = this;
		var z = 0;
		var this1 = function() {
			return _gthis.d.get(0) + _gthis.d.get(2) / 2;
		};
		var this2 = function(v) {
			return _gthis.set_centerX(v);
		};
		var this3 = new tannus_io__$Pointer_Ref(this1,this2);
		var this4 = function() {
			return _gthis.d.get(1) + _gthis.d.get(3) / 2;
		};
		var this5 = function(v1) {
			return _gthis.set_centerY(v1);
		};
		var this6 = new tannus_io__$Pointer_Ref(this4,this5);
		var this7 = function() {
			return z;
		};
		var this8 = function(v2) {
			z = v2;
			return z;
		};
		var this9 = new tannus_io__$Pointer_Ref(this7,this8);
		return new tannus_geom2_LinkedPoint(this3,this6,this9);
	}
	,set_center: function(v) {
		this.set_centerX(v.d.get(0));
		this.set_centerY(v.d.get(1));
		return this.get_center();
	}
	,d: null
	,__class__: tannus_geom2_Rect
	,__properties__: {set_center:"set_center",get_center:"get_center",set_centerY:"set_centerY",get_centerY:"get_centerY",set_centerX:"set_centerX",get_centerX:"get_centerX",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottomLeft:"set_bottomLeft",get_bottomLeft:"get_bottomLeft",set_topRight:"set_topRight",get_topRight:"get_topRight",set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_h:"set_h",get_h:"get_h",set_w:"set_w",get_w:"get_w",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var tannus_html_Blobable = function() { };
$hxClasses["tannus.html.Blobable"] = tannus_html_Blobable;
tannus_html_Blobable.__name__ = ["tannus","html","Blobable"];
tannus_html_Blobable.prototype = {
	toBlob: null
	,__class__: tannus_html_Blobable
};
var tannus_html_JSTools = function() { };
$hxClasses["tannus.html.JSTools"] = tannus_html_JSTools;
tannus_html_JSTools.__name__ = ["tannus","html","JSTools"];
tannus_html_JSTools.arrayify = function(o) {
	return Array.prototype.slice.call(o,0);
};
tannus_html_JSTools.defineGetter = function(o,name,value) {
	var tmp;
	var tmp1;
	if(o == null) {
		tmp1 = null;
	} else {
		var tmp2;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + "__defineGetter__"];
			tmp2 = tmp;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = o[tmp]();
		} else {
			tmp1 = o["__defineGetter__"];
		}
	}
	tmp1.call(o,name,value);
};
tannus_html_JSTools.defineSetter = function(o,name,value) {
	var tmp;
	var tmp1;
	if(o == null) {
		tmp1 = null;
	} else {
		var tmp2;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + "__defineSetter__"];
			tmp2 = tmp;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = o[tmp]();
		} else {
			tmp1 = o["__defineSetter__"];
		}
	}
	tmp1.call(o,name,value);
};
tannus_html_JSTools.definePointer = function(o,name,value) {
	var value1 = value.getter;
	var tmp;
	var tmp1;
	if(o == null) {
		tmp1 = null;
	} else {
		var tmp2;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + "__defineGetter__"];
			tmp2 = tmp;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = o[tmp]();
		} else {
			tmp1 = o["__defineGetter__"];
		}
	}
	tmp1.call(o,name,value1);
	var value2 = value.setter;
	var tmp3;
	var tmp4;
	if(o == null) {
		tmp4 = null;
	} else {
		var tmp5;
		if(o.__properties__) {
			tmp3 = o.__properties__["get_" + "__defineSetter__"];
			tmp5 = tmp3;
		} else {
			tmp5 = false;
		}
		if(tmp5) {
			tmp4 = o[tmp3]();
		} else {
			tmp4 = o["__defineSetter__"];
		}
	}
	tmp4.call(o,name,value2);
};
var tannus_internal_CompileTime = function() { };
$hxClasses["tannus.internal.CompileTime"] = tannus_internal_CompileTime;
tannus_internal_CompileTime.__name__ = ["tannus","internal","CompileTime"];
var tannus_internal_TypeTools = $hx_exports["TypeTools"] = function() { };
$hxClasses["tannus.internal.TypeTools"] = tannus_internal_TypeTools;
tannus_internal_TypeTools.__name__ = ["tannus","internal","TypeTools"];
tannus_internal_TypeTools.typename = function(o) {
	var valtype = Type["typeof"](o);
	switch(valtype[1]) {
	case 0:
		return "Null";
	case 1:case 2:
		return "Number";
	case 3:
		return "Bool";
	case 4:
		try {
			var name = Type.getClassName(o);
			if(name != null) {
				return "Class<" + name + ">";
			} else {
				throw new js__$Boot_HaxeError("failed!");
			}
		} catch( err ) {
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			if( js_Boot.__instanceof(err,String) ) {
				try {
					var name1 = Type.getEnumName(o);
					if(name1 != null) {
						return "Enum<" + name1 + ">";
					} else {
						throw new js__$Boot_HaxeError("failed!");
					}
				} catch( err1 ) {
					return "Unknown";
				}
			} else throw(err);
		}
		break;
	case 5:
		return "Function";
	case 6:
		var klass = valtype[2];
		try {
			var name2 = Type.getClassName(klass);
			return name2;
		} catch( err2 ) {
			if (err2 instanceof js__$Boot_HaxeError) err2 = err2.val;
			if( js_Boot.__instanceof(err2,String) ) {
				return "Unknown";
			} else throw(err2);
		}
		break;
	case 7:
		var enumer = valtype[2];
		var enumName = Type.getEnumName(enumer);
		var valueNames = enumer.__constructs__.slice();
		var index = o[1];
		var results = "" + enumName + "." + valueNames[index];
		return results;
	case 8:
		return "Unknown";
	}
};
tannus_internal_TypeTools.getClassHierarchy = function(klass) {
	var kl = klass;
	var hierarchy = [];
	var name = Type.getClassName(kl);
	hierarchy.push(name);
	while(true) try {
		kl = Type.getSuperClass(kl);
		name = Type.getClassName(kl);
		hierarchy.push(name);
	} catch( err ) {
		break;
	}
	return hierarchy;
};
tannus_internal_TypeTools.hierarchy = function(o) {
	if(Reflect.isObject(o)) {
		var o1 = o;
		var klass = o1 == null ? null : js_Boot.getClass(o1);
		if(klass != null) {
			return tannus_internal_TypeTools.getClassHierarchy(klass);
		}
	}
	return [];
};
tannus_internal_TypeTools.deepCopy = function(o) {
	if(o == null || typeof(o) == "boolean" || typeof(o) == "number" || typeof(o) == "string") {
		return o;
	} else if(Reflect.isEnumValue(o)) {
		var en = Type.getEnum(o);
		var env = o;
		var clonedParams = env.slice(2).map(tannus_internal_TypeTools.deepCopy);
		return Type.createEnumIndex(en,env[1],clonedParams);
	} else if((o instanceof Array) && o.__enum__ == null) {
		return (js_Boot.__cast(o , Array)).map(tannus_internal_TypeTools.deepCopy);
	} else if(Reflect.isObject(o)) {
		var tmp;
		if(Reflect.isObject(o) && Object.prototype.hasOwnProperty.call(o,"_hxDeepCopy")) {
			var tmp1;
			var tmp2;
			if(o == null) {
				tmp2 = null;
			} else {
				var tmp3;
				if(o.__properties__) {
					tmp1 = o.__properties__["get_" + "_hxDeepCopy"];
					tmp3 = tmp1;
				} else {
					tmp3 = false;
				}
				if(tmp3) {
					tmp2 = o[tmp1]();
				} else {
					tmp2 = o["_hxDeepCopy"];
				}
			}
			tmp = Reflect.isFunction(tmp2);
		} else {
			tmp = false;
		}
		if(tmp) {
			var tmp4;
			var func;
			if(o == null) {
				func = null;
			} else {
				var func1;
				if(o.__properties__) {
					tmp4 = o.__properties__["get_" + "_hxDeepCopy"];
					func1 = tmp4;
				} else {
					func1 = false;
				}
				if(func1) {
					func = o[tmp4]();
				} else {
					func = o["_hxDeepCopy"];
				}
			}
			return func.apply(o,[]);
		} else {
			var klass = o == null ? null : js_Boot.getClass(o);
			if(klass != null) {
				var copy = Type.createEmptyInstance(klass);
				var fieldNames = Type.getInstanceFields(klass);
				var _g = 0;
				while(_g < fieldNames.length) {
					var n = fieldNames[_g];
					++_g;
					var tmp5;
					var val;
					if(o == null) {
						val = null;
					} else {
						var val1;
						if(o.__properties__) {
							tmp5 = o.__properties__["get_" + n];
							val1 = tmp5;
						} else {
							val1 = false;
						}
						if(val1) {
							val = o[tmp5]();
						} else {
							val = o[n];
						}
					}
					var val2 = val;
					if(Reflect.isFunction(val2)) {
						val2 = Reflect.makeVarArgs((function(a1,o1) {
							return function(a2) {
								return Reflect.callMethod(o1[0],a1[0],a2);
							};
						})([val2],[o]));
					} else {
						val2 = tannus_internal_TypeTools.deepCopy(val2);
					}
					var tmp6;
					var tmp7;
					if(copy.__properties__) {
						tmp6 = copy.__properties__["set_" + n];
						tmp7 = tmp6;
					} else {
						tmp7 = false;
					}
					if(tmp7) {
						copy[tmp6](val2);
					} else {
						copy[n] = val2;
					}
				}
				return copy;
			} else {
				return Reflect.copy(o);
			}
		}
	} else if(Reflect.isFunction(o)) {
		var a11 = o;
		return Reflect.makeVarArgs(function(a21) {
			return Reflect.callMethod(null,a11,a21);
		});
	} else {
		var vt = Type["typeof"](o);
		var err = "Error: Could not clone " + Std.string(vt);
		throw new js__$Boot_HaxeError(err);
	}
};
tannus_internal_TypeTools.isPrimitive = function(v) {
	if(!(v == null || typeof(v) == "boolean" || typeof(v) == "number")) {
		return typeof(v) == "string";
	} else {
		return true;
	}
};
tannus_internal_TypeTools.isDeepCopyable = function(v) {
	if(Reflect.isObject(v) && Object.prototype.hasOwnProperty.call(v,"_hxDeepCopy")) {
		var tmp;
		var tmp1;
		if(v == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(v.__properties__) {
				tmp = v.__properties__["get_" + "_hxDeepCopy"];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = v[tmp]();
			} else {
				tmp1 = v["_hxDeepCopy"];
			}
		}
		return Reflect.isFunction(tmp1);
	} else {
		return false;
	}
};
var tannus_io_Asserts = function() { };
$hxClasses["tannus.io.Asserts"] = tannus_io_Asserts;
tannus_io_Asserts.__name__ = ["tannus","io","Asserts"];
var tannus_io_Binary = function(size,_b) {
	this._length = size;
	this.b = _b;
	this.position = 0;
};
$hxClasses["tannus.io.Binary"] = tannus_io_Binary;
tannus_io_Binary.__name__ = ["tannus","io","Binary"];
tannus_io_Binary.__interfaces__ = [tannus_html_Blobable];
tannus_io_Binary.prototype = {
	get: function(index) {
		if(index >= this._length || index < 0) {
			throw new js__$Boot_HaxeError(tannus_io_impl_BinaryError.OutOfBounds);
		}
		return 0;
	}
	,set: function(index,value) {
		if(index >= this._length || index < 0) {
			throw new js__$Boot_HaxeError(tannus_io_impl_BinaryError.OutOfBounds);
		}
		return 0;
	}
	,getInt32: function(i) {
		return this.get(i) | this.get(i + 1) << 8 | this.get(i + 2) << 16 | this.get(i + 3) << 24;
	}
	,setInt32: function(i,v) {
		this.set(i,v);
		this.set(i + 1,v >> 8);
		this.set(i + 2,v >> 16);
		this.set(i + 3,v >> 24);
	}
	,getInt64: function(i) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(i + 4),this.getInt32(i));
		return this1;
	}
	,setInt64: function(i,v) {
		this.setInt32(i,v.low);
		this.setInt32(i + 4,v.high);
	}
	,getFloat: function(i) {
		return tannus_math_TMath.i32ToFloat(this.getInt32(i));
	}
	,setFloat: function(i,v) {
		this.setInt32(i,tannus_math_TMath.floatToI32(v));
	}
	,fill: function(c,index,size) {
		if(index == null) {
			index = 0;
		}
		if(size == null) {
			size = this._length;
		}
		var _g1 = index;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			this.set(i,c);
		}
	}
	,readByte: function() {
		return this.get(this.position++);
	}
	,readInt32: function() {
		var v = this.getInt32(this.position);
		this.position += 4;
		return v;
	}
	,writeInt32: function(i) {
		this.setInt32(this.position,i);
		this.position += 4;
	}
	,readFloat: function() {
		return tannus_math_TMath.i32ToFloat(this.readInt32());
	}
	,writeFloat: function(v) {
		this.writeInt32(tannus_math_TMath.floatToI32(v));
	}
	,writeByte: function(c) {
		this.set(this.position++,c);
	}
	,read: function(len) {
		var res = this.sub(this.position,len);
		this.position += len;
		return res;
	}
	,readString: function(len) {
		var res = this.getString(this.position,len);
		this.position += len;
		return res;
	}
	,write: function(other,len) {
		if(len == null) {
			len = other._length;
		}
		this.blit(this.position,other,0,len);
		this.position += len;
	}
	,writeString: function(s) {
		var o = js_Boot.getClass(this);
		var tmp;
		var tmp1;
		if(o == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + "ofString"];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = o[tmp]();
			} else {
				tmp1 = o["ofString"];
			}
		}
		this.write(tmp1(s));
	}
	,push: function(c) {
		this.position = this._length;
		this.resize(this._length + 1);
		this.setData(this.b);
		this.set(this.position++,c);
		return this.position;
	}
	,pushInt32: function(i) {
		this.position = this._length;
		this.resize(this._length + 4);
		this.setData(this.b);
		this.writeInt32(i);
		return this.position;
	}
	,pushFloat: function(n) {
		return this.pushInt32(tannus_math_TMath.floatToI32(n));
	}
	,pushString: function(s) {
		this.appendString(s);
	}
	,unshift: function(c) {
		this.shiftRight(1);
		this.setData(this.b);
		this.set(0,c);
		return 0;
	}
	,pop: function() {
		var v = this.get(this._length - 1);
		this.position = 0;
		this.resize(this._length - 1);
		this.setData(this.b);
		return v;
	}
	,shift: function() {
		var v = this.get(0);
		this.setData(this.copy().slice(1).b);
		return v;
	}
	,append: function(footer,len) {
		if(len == null) {
			len = footer._length;
		}
		this.position = this._length;
		this.resize(this._length + len);
		this.write(footer);
		return this;
	}
	,appendString: function(foot,len) {
		var o = js_Boot.getClass(this);
		var tmp;
		var tmp1;
		if(o == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + "ofString"];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = o[tmp]();
			} else {
				tmp1 = o["ofString"];
			}
		}
		return this.append(tmp1(foot),len);
	}
	,appendStruct: function(od) {
		var o = tannus_ds_CObj.create(od);
		if(Object.prototype.hasOwnProperty.call(o.o,"_append_ba")) {
			var _e = o.o;
			var f = function(func,args) {
				return func.apply(_e,args);
			};
			var o1 = o.o;
			var tmp;
			var a1;
			if(o1 == null) {
				a1 = null;
			} else {
				var a11;
				if(o1.__properties__) {
					tmp = o1.__properties__["get_" + "_append_ba"];
					a11 = tmp;
				} else {
					a11 = false;
				}
				if(a11) {
					a1 = o1[tmp]();
				} else {
					a1 = o1["_append_ba"];
				}
			}
			var a12 = a1;
			var a = Reflect.makeVarArgs(function(a2) {
				return f(a12,a2);
			});
			var _i = this.position;
			a(this);
			var len = this.position - _i;
			return len;
		} else {
			throw new js__$Boot_HaxeError("Error: " + o.o + " Cannot be written to a ByteArray");
		}
	}
	,readStruct: function(type) {
		var ocl = tannus_ds_CObj.create(type);
		if(Object.prototype.hasOwnProperty.call(ocl.o,"_from_ba")) {
			var _e = ocl.o;
			var f = function(func,args) {
				return func.apply(_e,args);
			};
			var o = ocl.o;
			var tmp;
			var a1;
			if(o == null) {
				a1 = null;
			} else {
				var a11;
				if(o.__properties__) {
					tmp = o.__properties__["get_" + "_from_ba"];
					a11 = tmp;
				} else {
					a11 = false;
				}
				if(a11) {
					a1 = o[tmp]();
				} else {
					a1 = o["_from_ba"];
				}
			}
			var a12 = a1;
			var _from = Reflect.makeVarArgs(function(a2) {
				return f(a12,a2);
			});
			return _from(this);
		} else {
			throw new js__$Boot_HaxeError("Error: " + tannus_internal_TypeTools.typename(type) + " has no \"_from_ba\" method");
		}
	}
	,prepend: function(header,len) {
		if(len == null) {
			len = header._length;
		}
		this.shiftRight(header._length);
		this.position = 0;
		this.write(header);
		return this;
	}
	,prependString: function(head,len) {
		var o = js_Boot.getClass(this);
		var tmp;
		var header;
		if(o == null) {
			header = null;
		} else {
			var header1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + "ofString"];
				header1 = tmp;
			} else {
				header1 = false;
			}
			if(header1) {
				header = o[tmp]();
			} else {
				header = o["ofString"];
			}
		}
		var header2 = header(head);
		var len1 = len;
		if(len1 == null) {
			len1 = header2._length;
		}
		this.shiftRight(header2._length);
		this.position = 0;
		this.write(header2);
		return this;
	}
	,shiftRight: function(digits) {
		var lpad = this._alloc(digits);
		lpad.fill(0);
		lpad = lpad.concat(this);
		this.resize(this._length + digits);
		this.setData(lpad.b);
	}
	,shiftLeft: function(digits) {
		var rpad = this._alloc(digits);
		rpad.fill(0);
		var backward = this.slice(digits).concat(rpad);
		this.resize(this._length + digits);
		this.setData(backward.b);
	}
	,sub: function(index,size) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,slice: function(min,max) {
		return this.sub(min,(max != null ? max : this._length) - min);
	}
	,blit: function(index,src,srcIndex,size) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,resize: function(size) {
		this._length = size;
	}
	,reverse: function() {
		var _g1 = 0;
		var _g = Math.floor(this._length / 2);
		while(_g1 < _g) {
			var i = _g1++;
			var temp = this.get(i);
			this.set(i,this.get(this._length - i - 1));
			this.set(this._length - i - 1,temp);
		}
	}
	,grow: function(amount) {
		this.resize(this._length + amount);
		return this;
	}
	,concat: function(other) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,copy: function() {
		return this;
	}
	,iterator: function() {
		return new tannus_io_impl_BinaryIterator(this);
	}
	,getString: function(index,len) {
		return "";
	}
	,getData: function() {
		return this.b;
	}
	,seek: function(i) {
		return this.position = i;
	}
	,toString: function() {
		return this.getString(0,this._length);
	}
	,toBytes: function() {
		return new haxe_io_Bytes(new ArrayBuffer(0));
	}
	,toHex: function() {
		var sb_b = "";
		var chars = "0123456789ABCDEF".split("").map(function(s) {
			return HxOverrides.cca(s,0);
		});
		var _g1 = 0;
		var _g = this._length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.get(i);
			sb_b += String.fromCharCode(chars[c >> 4]);
			sb_b += String.fromCharCode(chars[c & 15]);
		}
		return sb_b;
	}
	,base64Encode: function() {
		return haxe_crypto_Base64.encode(this.toBytes());
	}
	,toBase64: function() {
		return this.base64Encode();
	}
	,toDataUrl: function(type) {
		if(type == null) {
			type = "text/plain";
		}
		var encoded = this.base64Encode();
		return "data:" + type + ";base64," + encoded;
	}
	,toArray: function() {
		var _g = [];
		var c = this.iterator();
		while(c.hasNext()) {
			var c1 = c.next();
			_g.push(c1);
		}
		return _g;
	}
	,toBlob: function(callback,type) {
		callback(new Blob([this.b],{ type : type}));
	}
	,equals: function(other) {
		if(this._length != other._length) {
			return false;
		} else {
			var _g1 = 0;
			var _g = this._length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.get(i) != other.get(i)) {
					return false;
				}
			}
			return true;
		}
	}
	,setData: function(data) {
		this.b = data;
	}
	,err: function(e) {
		throw new js__$Boot_HaxeError(e);
	}
	,outOfBounds: function() {
		throw new js__$Boot_HaxeError(tannus_io_impl_BinaryError.OutOfBounds);
	}
	,overflow: function() {
		throw new js__$Boot_HaxeError(tannus_io_impl_BinaryError.Overflow);
	}
	,_alloc: function(size) {
		var o = js_Boot.getClass(this);
		var tmp;
		var allocf;
		if(o == null) {
			allocf = null;
		} else {
			var allocf1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + "alloc"];
				allocf1 = tmp;
			} else {
				allocf1 = false;
			}
			if(allocf1) {
				allocf = o[tmp]();
			} else {
				allocf = o["alloc"];
			}
		}
		return allocf(size);
	}
	,_ofString: function(s) {
		var o = js_Boot.getClass(this);
		var tmp;
		var tmp1;
		if(o == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + "ofString"];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = o[tmp]();
			} else {
				tmp1 = o["ofString"];
			}
		}
		return tmp1(s);
	}
	,get_length: function() {
		return this._length;
	}
	,get_empty: function() {
		return this._length <= 0;
	}
	,get_first: function() {
		return this.get(0);
	}
	,set_first: function(v) {
		return this.set(0,v);
	}
	,get_last: function() {
		return this.get(this._length - 1);
	}
	,set_last: function(v) {
		return this.set(this._length - 1,v);
	}
	,_length: null
	,b: null
	,position: null
	,__class__: tannus_io_Binary
	,__properties__: {set_last:"set_last",get_last:"get_last",set_first:"set_first",get_first:"get_first",get_empty:"get_empty",get_length:"get_length"}
};
var tannus_io__$Blob_Blob_$Impl_$ = {};
$hxClasses["tannus.io._Blob.Blob_Impl_"] = tannus_io__$Blob_Blob_$Impl_$;
tannus_io__$Blob_Blob_$Impl_$.__name__ = ["tannus","io","_Blob","Blob_Impl_"];
tannus_io__$Blob_Blob_$Impl_$._new = function(name,mime,dat) {
	var this1 = new tannus_io_CBlob(name,mime,dat);
	return this1;
};
tannus_io__$Blob_Blob_$Impl_$.toNativeBlob = function(this1) {
	return new Blob([this1.data.b],{ "type" : this1.type});
};
tannus_io__$Blob_Blob_$Impl_$.toObjectURL = function(this1) {
	return URL.createObjectURL(new Blob([this1.data.b],{ "type" : this1.type}));
};
tannus_io__$Blob_Blob_$Impl_$.fromDataURL = function(durl) {
	return tannus_io_CBlob.fromDataURL(durl);
};
var tannus_io_CBlob = function(nam,mime,dat) {
	this.name = nam;
	if(mime != null) {
		this.type = mime;
	}
	if(this.type == null) {
		var this1 = new tannus_sys_CPath(this.name);
		var np = this1;
		this.type = tannus_sys_Mimes.getMimeType(np.get_extension());
	}
	if(this.type == null) {
		this.type = "text/plain";
	}
	var this2 = new tannus_io_impl_NodeBinary(0,new Buffer(0));
	this.data = this2;
	if(dat != null) {
		this.data = dat;
	}
};
$hxClasses["tannus.io.CBlob"] = tannus_io_CBlob;
tannus_io_CBlob.__name__ = ["tannus","io","CBlob"];
tannus_io_CBlob.__interfaces__ = [tannus_html_Blobable];
tannus_io_CBlob.fromDataURL = function(durl) {
	durl = durl.substring(5);
	var bits = durl.split(";");
	var mime = bits.shift();
	var encoded = durl.substring(durl.indexOf(",") + 1,durl.length - 1);
	var data = tannus_io_impl_NodeBinary.fromBytes(haxe_crypto_Base64.decode(encoded));
	var this1 = new tannus_io_CBlob("file",mime,data);
	return this1;
};
tannus_io_CBlob.prototype = {
	save: function(dirname) {
		var this1 = new tannus_sys_CFile(tannus_sys__$Path_Path_$Impl_$.fromString("" + dirname + "/" + this.name));
		var f = this1;
		tannus_sys_node_NodeFileSystem.write(f._path.s,this.data);
		return f;
	}
	,toDataURL: function() {
		return this.data.toDataUrl(this.type);
	}
	,toBlob: function(cb,type) {
		if(type == null) {
			type = this.type;
		}
		cb(new Blob([this.data.b],{ type : type}));
	}
	,name: null
	,type: null
	,data: null
	,__class__: tannus_io_CBlob
};
var tannus_io__$Byte_Byte_$Impl_$ = {};
$hxClasses["tannus.io._Byte.Byte_Impl_"] = tannus_io__$Byte_Byte_$Impl_$;
tannus_io__$Byte_Byte_$Impl_$.__name__ = ["tannus","io","_Byte","Byte_Impl_"];
tannus_io__$Byte_Byte_$Impl_$.__properties__ = {set_aschar:"set_aschar",get_aschar:"get_aschar",set_asint:"set_asint",get_asint:"get_asint",get_self:"get_self"}
tannus_io__$Byte_Byte_$Impl_$._new = function(n) {
	var this1;
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
		throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	}
	this1 = n;
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.get_self = function(this1) {
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.get_asint = function(this1) {
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.set_asint = function(this1,n) {
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
		throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	}
	this1 = n;
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.get_aschar = function(this1) {
	return String.fromCharCode(this1);
};
tannus_io__$Byte_Byte_$Impl_$.set_aschar = function(this1,s) {
	var n = HxOverrides.cca(s,0);
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
		throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	}
	this1 = n;
	return String.fromCharCode(this1);
};
tannus_io__$Byte_Byte_$Impl_$.isNumeric = function(this1) {
	if(this1 >= 48) {
		return this1 <= 57;
	} else {
		return false;
	}
};
tannus_io__$Byte_Byte_$Impl_$.isLetter = function(this1) {
	if(!(this1 >= 65 && this1 <= 90)) {
		if(this1 >= 97) {
			return this1 <= 122;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
tannus_io__$Byte_Byte_$Impl_$.isAlphaNumeric = function(this1) {
	if(!(this1 >= 48 && this1 <= 57)) {
		if(!(this1 >= 65 && this1 <= 90)) {
			if(this1 >= 97) {
				return this1 <= 122;
			} else {
				return false;
			}
		} else {
			return true;
		}
	} else {
		return true;
	}
};
tannus_io__$Byte_Byte_$Impl_$.isUppercase = function(this1) {
	if(this1 >= 65) {
		return this1 <= 90;
	} else {
		return false;
	}
};
tannus_io__$Byte_Byte_$Impl_$.isLowercase = function(this1) {
	if(this1 >= 97) {
		return this1 <= 122;
	} else {
		return false;
	}
};
tannus_io__$Byte_Byte_$Impl_$.isWhiteSpace = function(this1) {
	return Lambda.has([9,10,11,12,13,32],this1);
};
tannus_io__$Byte_Byte_$Impl_$.isLineBreaking = function(this1) {
	if(this1 != 10) {
		return this1 == 13;
	} else {
		return true;
	}
};
tannus_io__$Byte_Byte_$Impl_$.isPunctuation = function(this1) {
	return Lambda.has([33,44,45,46,58,59,53],this1);
};
tannus_io__$Byte_Byte_$Impl_$.equalsi = function(this1,other) {
	return this1 == other;
};
tannus_io__$Byte_Byte_$Impl_$.equalss = function(this1,other) {
	return this1 == HxOverrides.cca(other,0);
};
tannus_io__$Byte_Byte_$Impl_$.repeat = function(this1,times) {
	return tannus_ds_StringUtils.times(String.fromCharCode(this1),times);
};
tannus_io__$Byte_Byte_$Impl_$.toString = function(this1) {
	return String.fromCharCode(this1);
};
tannus_io__$Byte_Byte_$Impl_$.toInt = function(this1) {
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.fromString = function(s) {
	var n = HxOverrides.cca(s,0);
	var this1;
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
		throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	}
	this1 = n;
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.isValid = function(n) {
	if(typeof(n) == "number" && ((n | 0) === n) && isFinite(n)) {
		return !isNaN(n);
	} else {
		return false;
	}
};
tannus_io__$Byte_Byte_$Impl_$.assertValid = function(n) {
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
		throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	}
};
var tannus_io__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["tannus.io._ByteArray.ByteArray_Impl_"] = tannus_io__$ByteArray_ByteArray_$Impl_$;
tannus_io__$ByteArray_ByteArray_$Impl_$.__name__ = ["tannus","io","_ByteArray","ByteArray_Impl_"];
tannus_io__$ByteArray_ByteArray_$Impl_$._new = function(size) {
	if(size == null) {
		size = 0;
	}
	var this1 = new tannus_io_impl_NodeBinary(size,new Buffer(size));
	return this1;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.get = function(this1,i) {
	return this1.get(i);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.set = function(this1,i,v) {
	return this1.set(i,v);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toBytes = function(this1) {
	return this1.toBytes();
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toBase = function(this1) {
	return this1.b;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toArray = function(this1) {
	return this1.toArray();
};
tannus_io__$ByteArray_ByteArray_$Impl_$.expandByString = function(this1,s) {
	return this1.appendString(s);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.expand = function(this1,other) {
	return this1.append(other);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.concat = function(this1,other) {
	return this1.concat(other);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.equals = function(this1,o) {
	return this1.equals(o);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.alloc = function(size) {
	return new tannus_io_impl_NodeBinary(size,new Buffer(size));
};
tannus_io__$ByteArray_ByteArray_$Impl_$.ofData = function(d) {
	return tannus_io_impl_NodeBinary.ofData(d);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.ofString = function(s) {
	return new tannus_io_impl_NodeBinary(s.length,new Buffer(s));
};
tannus_io__$ByteArray_ByteArray_$Impl_$.fromBytes = function(b) {
	return tannus_io_impl_NodeBinary.fromBytes(b);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.fromBase64 = function(s) {
	return tannus_io_impl_NodeBinary.fromBytes(haxe_crypto_Base64.decode(s));
};
tannus_io__$ByteArray_ByteArray_$Impl_$.fromVector = function(vec) {
	var size = vec.length;
	var this1 = new tannus_io_impl_NodeBinary(size,new Buffer(size));
	var data = this1;
	var _g1 = 0;
	var _g = vec.length;
	while(_g1 < _g) {
		var index = _g1++;
		data.set(index,vec[index]);
	}
	return data;
};
var tannus_io_ByteStack = function(data) {
	tannus_ds_Stack.call(this,[]);
	this.b = data;
	this.i = 0;
};
$hxClasses["tannus.io.ByteStack"] = tannus_io_ByteStack;
tannus_io_ByteStack.__name__ = ["tannus","io","ByteStack"];
tannus_io_ByteStack.__super__ = tannus_ds_Stack;
tannus_io_ByteStack.prototype = $extend(tannus_ds_Stack.prototype,{
	read: function(dis) {
		var this1 = new tannus_io_impl_NodeBinary(dis,new Buffer(dis));
		var data = this1;
		var _g1 = 0;
		var _g = dis;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.pop();
			data.set(data.position++,c);
		}
		return data;
	}
	,readUntil: function(delimiter) {
		var this1 = new tannus_io_impl_NodeBinary(0,new Buffer(0));
		var res = this1;
		while(this.peek() != delimiter) res.push(this.pop());
		return res;
	}
	,peekAhead: function(dis) {
		var this1 = new tannus_io_impl_NodeBinary(dis,new Buffer(dis));
		var data = this1;
		var _g1 = 1;
		var _g = dis + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.peek(i);
			data.set(data.position++,c);
		}
		return data;
	}
	,copy: function() {
		var c = new tannus_io_ByteStack(this.b);
		c.i = this.i;
		return c;
	}
	,peek: function(dis) {
		if(dis == null) {
			dis = 0;
		}
		return this.b.get(this.i + dis);
	}
	,pop: function() {
		return this.b.get(this.i++);
	}
	,get_empty: function() {
		return this.i >= this.b._length;
	}
	,seek: function(pos) {
		this.i = pos;
	}
	,getByteArray: function() {
		return this.b.copy();
	}
	,remaining: function() {
		return this.b._length - this.i;
	}
	,b: null
	,i: null
	,__class__: tannus_io_ByteStack
});
var tannus_io_EventDispatcher = function() {
	this.__checkEvents = true;
	this._sigs = new haxe_ds_StringMap();
};
$hxClasses["tannus.io.EventDispatcher"] = tannus_io_EventDispatcher;
tannus_io_EventDispatcher.__name__ = ["tannus","io","EventDispatcher"];
tannus_io_EventDispatcher.prototype = {
	addSignal: function(name,sig) {
		var this1 = this._sigs;
		var alt = new tannus_io_Signal();
		var v = sig != null ? sig : alt;
		var _this = this1;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,v);
		} else {
			_this.h[name] = v;
		}
	}
	,addSignals: function(names) {
		var _g = 0;
		while(_g < names.length) {
			var name = names[_g];
			++_g;
			this.addSignal(name);
		}
	}
	,getSignal: function(name) {
		if(!this.canDispatch(name)) {
			if(this.__checkEvents) {
				throw new js__$Boot_HaxeError("InvalidEvent: \"" + name + "\" is not a valid Event");
			} else {
				var this1 = this._sigs;
				var v = new tannus_io_Signal();
				var _this = this1;
				if(__map_reserved[name] != null) {
					_this.setReserved(name,v);
				} else {
					_this.h[name] = v;
				}
			}
		}
		var _this1 = this._sigs;
		if(__map_reserved[name] != null) {
			return _this1.getReserved(name);
		} else {
			return _this1.h[name];
		}
	}
	,canDispatch: function(name) {
		var _this = this._sigs;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,on: function(name,action,once) {
		this.getSignal(name).listen(action,once);
	}
	,once: function(name,action) {
		this.on(name,action,true);
	}
	,dispatch: function(name,data) {
		this.getSignal(name).broadcast(data);
	}
	,off: function(name,action) {
		var sig = this.getSignal(name);
		if(action != null) {
			sig.ignore(action);
		} else {
			sig.handlers = [];
		}
	}
	,when: function(name,test,action) {
		this.getSignal(name).when(test,action);
	}
	,_sigs: null
	,__checkEvents: null
	,__class__: tannus_io_EventDispatcher
};
var tannus_io__$Getter_Getter_$Impl_$ = {};
$hxClasses["tannus.io._Getter.Getter_Impl_"] = tannus_io__$Getter_Getter_$Impl_$;
tannus_io__$Getter_Getter_$Impl_$.__name__ = ["tannus","io","_Getter","Getter_Impl_"];
tannus_io__$Getter_Getter_$Impl_$.__properties__ = {get_v:"get_v"}
tannus_io__$Getter_Getter_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
tannus_io__$Getter_Getter_$Impl_$.get_v = function(this1) {
	return this1();
};
tannus_io__$Getter_Getter_$Impl_$.get = function(this1) {
	return this1();
};
tannus_io__$Getter_Getter_$Impl_$.toString = function(this1) {
	return Std.string(this1());
};
tannus_io__$Getter_Getter_$Impl_$.transform = function(this1,f) {
	var trans_get = function() {
		return f(this1());
	};
	var this2 = trans_get;
	return this2;
};
tannus_io__$Getter_Getter_$Impl_$.addNumber = function(get,val) {
	return get() + val;
};
tannus_io__$Getter_Getter_$Impl_$.addString = function(get,val) {
	return get() + val;
};
var tannus_io__$Pointer_Pointer_$Impl_$ = {};
$hxClasses["tannus.io._Pointer.Pointer_Impl_"] = tannus_io__$Pointer_Pointer_$Impl_$;
tannus_io__$Pointer_Pointer_$Impl_$.__name__ = ["tannus","io","_Pointer","Pointer_Impl_"];
tannus_io__$Pointer_Pointer_$Impl_$.__properties__ = {set_deleter:"set_deleter",get_deleter:"get_deleter",get_set:"get_set",get_get:"get_get",get_exists:"get_exists",set__:"set__",get__:"get__",set_setter:"set_setter",get_setter:"get_setter",set_getter:"set_getter",get_getter:"get_getter",set_v:"set_v",get_v:"get_v",set_value:"set_value",get_value:"get_value",get_self:"get_self"}
tannus_io__$Pointer_Pointer_$Impl_$._new = function(g,s,d) {
	var this1 = new tannus_io__$Pointer_Ref(g,s);
	return this1;
};
tannus_io__$Pointer_Pointer_$Impl_$.get_self = function(this1) {
	return this1;
};
tannus_io__$Pointer_Pointer_$Impl_$.get_value = function(this1) {
	return this1.get();
};
tannus_io__$Pointer_Pointer_$Impl_$.set_value = function(this1,nv) {
	return this1.set(nv);
};
tannus_io__$Pointer_Pointer_$Impl_$.get_v = function(this1) {
	return this1.get();
};
tannus_io__$Pointer_Pointer_$Impl_$.set_v = function(this1,nv) {
	return this1.set(nv);
};
tannus_io__$Pointer_Pointer_$Impl_$.get_getter = function(this1) {
	return this1.getter;
};
tannus_io__$Pointer_Pointer_$Impl_$.set_getter = function(this1,ng) {
	return this1.getter = ng;
};
tannus_io__$Pointer_Pointer_$Impl_$.get_setter = function(this1) {
	return this1.setter;
};
tannus_io__$Pointer_Pointer_$Impl_$.set_setter = function(this1,ns) {
	return this1.setter = ns;
};
tannus_io__$Pointer_Pointer_$Impl_$.get__ = function(this1) {
	return this1.get();
};
tannus_io__$Pointer_Pointer_$Impl_$.set__ = function(this1,v) {
	return this1.set(v);
};
tannus_io__$Pointer_Pointer_$Impl_$.get_exists = function(this1) {
	return this1.get() != null;
};
tannus_io__$Pointer_Pointer_$Impl_$.get_get = function(this1) {
	return $bind(this1,this1.get);
};
tannus_io__$Pointer_Pointer_$Impl_$.get_set = function(this1) {
	return $bind(this1,this1.set);
};
tannus_io__$Pointer_Pointer_$Impl_$.get_deleter = function(this1) {
	return this1.deleter;
};
tannus_io__$Pointer_Pointer_$Impl_$.set_deleter = function(this1,nd) {
	return this1.deleter = nd;
};
tannus_io__$Pointer_Pointer_$Impl_$["delete"] = function(this1) {
	this1["delete"]();
};
tannus_io__$Pointer_Pointer_$Impl_$.to_underlying = function(this1) {
	return this1.get();
};
tannus_io__$Pointer_Pointer_$Impl_$.setvalue = function(this1,v) {
	return this1.set(v);
};
tannus_io__$Pointer_Pointer_$Impl_$.setPointer = function(this1,v) {
	return this1.set(v.get());
};
tannus_io__$Pointer_Pointer_$Impl_$.access = function(this1,v) {
	if(v != null) {
		return this1.set(v);
	} else {
		return this1.get();
	}
};
tannus_io__$Pointer_Pointer_$Impl_$.attach_str = function(this1,str) {
	var s = this1.setter;
	this1.setter = tannus_io__$Setter_Setter_$Impl_$.attach(s,str);
};
tannus_io__$Pointer_Pointer_$Impl_$._transform = function(this1,mget,mset) {
	var this2 = new tannus_io__$Pointer_Ref(tannus_io__$Getter_Getter_$Impl_$.transform(this1.getter,mget),tannus_io__$Setter_Setter_$Impl_$.transform(this1.setter,mset));
	return this2;
};
tannus_io__$Pointer_Pointer_$Impl_$.clone = function(this1) {
	var this2 = new tannus_io__$Pointer_Ref(this1.getter,this1.setter);
	return this2;
};
tannus_io__$Pointer_Pointer_$Impl_$.toGetter = function(this1) {
	return this1.getter;
};
tannus_io__$Pointer_Pointer_$Impl_$.toSetter = function(this1) {
	return this1.setter;
};
tannus_io__$Pointer_Pointer_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_io__$Pointer_Pointer_$Impl_$.iterator = function(self) {
	return $iterator(self.get())();
};
tannus_io__$Pointer_Pointer_$Impl_$.pre_decrement = function(a) {
	a.set(a.get() - 1);
	return a.get();
};
tannus_io__$Pointer_Pointer_$Impl_$.pre_increment = function(a) {
	a.set(a.get() + 1);
	return a.get();
};
tannus_io__$Pointer_Pointer_$Impl_$.post_decrement = function(a) {
	var r = a.get();
	a.set(r - 1);
	return r;
};
tannus_io__$Pointer_Pointer_$Impl_$.post_increment = function(a) {
	var r = a.get();
	a.set(r + 1);
	return r;
};
tannus_io__$Pointer_Pointer_$Impl_$.fromAccessor = function(af) {
	var this1;
	var f = af;
	var f1 = af;
	this1 = new tannus_io__$Pointer_Ref(function() {
		return f(null);
	},function(a1) {
		return f1(a1);
	});
	return this1;
};
var tannus_io__$Pointer_Ref = function(g,s,d) {
	var _gthis = this;
	this.getter = g;
	this.setter = s;
	this.deleter = d;
	var prop = function(n) {
		var tmp;
		var prop1;
		if(_gthis == null) {
			prop1 = null;
		} else {
			var prop2;
			if(_gthis.__properties__) {
				tmp = _gthis.__properties__["get_" + "__defineGetter__"];
				prop2 = tmp;
			} else {
				prop2 = false;
			}
			if(prop2) {
				prop1 = _gthis[tmp]();
			} else {
				prop1 = _gthis["__defineGetter__"];
			}
		}
		prop1.call(_gthis,n,$bind(_gthis,_gthis.get));
		var tmp1;
		var prop3;
		if(_gthis == null) {
			prop3 = null;
		} else {
			var prop4;
			if(_gthis.__properties__) {
				tmp1 = _gthis.__properties__["get_" + "__defineSetter__"];
				prop4 = tmp1;
			} else {
				prop4 = false;
			}
			if(prop4) {
				prop3 = _gthis[tmp1]();
			} else {
				prop3 = _gthis["__defineSetter__"];
			}
		}
		prop3.call(_gthis,n,$bind(_gthis,_gthis.set));
	};
	var _g = 0;
	var _g1 = ["value","v","_"];
	while(_g < _g1.length) {
		var n1 = _g1[_g];
		++_g;
		prop(n1);
	}
};
$hxClasses["tannus.io._Pointer.Ref"] = tannus_io__$Pointer_Ref;
tannus_io__$Pointer_Ref.__name__ = ["tannus","io","_Pointer","Ref"];
tannus_io__$Pointer_Ref.prototype = {
	get: function() {
		return this.getter();
	}
	,set: function(v) {
		return this.setter(v);
	}
	,'delete': function() {
		if(this.deleter != null) {
			this.deleter();
		}
	}
	,toString: function() {
		return Std.string(this.get());
	}
	,getter: null
	,setter: null
	,deleter: null
	,__class__: tannus_io__$Pointer_Ref
};
var tannus_io__$RegEx_RegEx_$Impl_$ = {};
$hxClasses["tannus.io._RegEx.RegEx_Impl_"] = tannus_io__$RegEx_RegEx_$Impl_$;
tannus_io__$RegEx_RegEx_$Impl_$.__name__ = ["tannus","io","_RegEx","RegEx_Impl_"];
tannus_io__$RegEx_RegEx_$Impl_$._new = function(pattern) {
	var this1 = pattern;
	return this1;
};
tannus_io__$RegEx_RegEx_$Impl_$.matches = function(this1,text) {
	var ma = [];
	this1.map(text,function(e) {
		var parts = [];
		var i = 0;
		var matched = true;
		while(matched) try {
			var p = e.matched(i);
			if(p == null) {
				matched = false;
				break;
			}
			parts.push(p);
			++i;
		} catch( err ) {
			matched = false;
			break;
		}
		ma.push(parts);
		return "";
	});
	return ma;
};
tannus_io__$RegEx_RegEx_$Impl_$.allMatches = function(this1,text) {
	var all = [];
	this1.map(text,function(e) {
		var p = e.matchedPos();
		var pos = { start : p.pos, len : p.len};
		var groups = [];
		var index = 0;
		var matched = true;
		while(matched) try {
			var s = e.matched(index);
			if(s == null) {
				matched = false;
				break;
			}
			groups.push(s);
			++index;
		} catch( error ) {
			matched = false;
			break;
		}
		var matchedText = groups.shift();
		var matchObject = new tannus_io_impl_RegExMatch(this1,[text,matchedText],pos,groups);
		all.push(matchObject);
		return "";
	});
	return all;
};
tannus_io__$RegEx_RegEx_$Impl_$.mpos = function(this1,p) {
	return { start : p.pos, len : p.len};
};
tannus_io__$RegEx_RegEx_$Impl_$.search = function(this1,s) {
	return tannus_io__$RegEx_RegEx_$Impl_$.matches(this1,s);
};
tannus_io__$RegEx_RegEx_$Impl_$.extract = function(this1,str,n) {
	if(n == null) {
		n = 0;
	}
	return tannus_io__$RegEx_RegEx_$Impl_$.matches(this1,str)[n];
};
tannus_io__$RegEx_RegEx_$Impl_$.extractGroups = function(this1,str,n) {
	if(n == null) {
		n = 0;
	}
	return tannus_io__$RegEx_RegEx_$Impl_$.matches(this1,str)[0].slice(1);
};
tannus_io__$RegEx_RegEx_$Impl_$.findAll = function(this1,s) {
	var all = [];
	this1.map(s,function(e) {
		var pos = e.matchedPos();
		all.push({ "str" : s, "pos" : e.matchedPos()});
		return s;
	});
	return all;
};
tannus_io__$RegEx_RegEx_$Impl_$.replace = function(this1,rtext,text) {
	return this1.map(rtext,function(e) {
		var i = 0;
		var whole = null;
		var subs = [];
		while(true) try {
			var s = this1.matched(i++);
			if(whole == null) {
				whole = s;
			} else {
				subs.push(s);
			}
		} catch( err ) {
			break;
		}
		var _t = text;
		var _g1 = 0;
		var _g = subs.length;
		while(_g1 < _g) {
			var ii = _g1++;
			_t = StringTools.replace(_t,"{{" + ii + "}}",subs[ii]);
		}
		return _t;
	});
};
tannus_io__$RegEx_RegEx_$Impl_$.toTester = function(this1) {
	var f = $bind(this1,this1.match);
	return function(s) {
		return f(s);
	};
};
var tannus_io__$Setter_Setter_$Impl_$ = {};
$hxClasses["tannus.io._Setter.Setter_Impl_"] = tannus_io__$Setter_Setter_$Impl_$;
tannus_io__$Setter_Setter_$Impl_$.__name__ = ["tannus","io","_Setter","Setter_Impl_"];
tannus_io__$Setter_Setter_$Impl_$.__properties__ = {set_v:"set_v"}
tannus_io__$Setter_Setter_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
tannus_io__$Setter_Setter_$Impl_$.set_v = function(this1,nv) {
	return this1(nv);
};
tannus_io__$Setter_Setter_$Impl_$.wrap = function(this1,f) {
	var self = this1;
	this1 = function(v) {
		return f(self,v);
	};
};
tannus_io__$Setter_Setter_$Impl_$.attach = function(this1,other) {
	var f = function(s,val) {
		other(val);
		return s(val);
	};
	var self = this1;
	this1 = function(v) {
		return f(self,v);
	};
	var this2 = this1;
	return this2;
};
tannus_io__$Setter_Setter_$Impl_$.transform = function(this1,f) {
	var this2 = function(o) {
		var v = f(o);
		this1(v);
		return o;
	};
	return this2;
};
tannus_io__$Setter_Setter_$Impl_$.set = function(this1,v) {
	return this1(v);
};
var tannus_io_Signal = function() {
	this.handlers = [];
	this.ondelete = function() {
	};
};
$hxClasses["tannus.io.Signal"] = tannus_io_Signal;
tannus_io_Signal.__name__ = ["tannus","io","Signal"];
tannus_io_Signal.prototype = {
	add: function(handler) {
		this.handlers.push(handler);
	}
	,listen: function(f,once) {
		if(once == null) {
			once = false;
		}
		if(!once) {
			this.handlers.push(tannus_io__$Signal_Handler.Normal(f));
		} else {
			var _fired = false;
			var this1 = function() {
				return _fired;
			};
			var this2 = function(v) {
				_fired = v;
				return _fired;
			};
			var this3 = new tannus_io__$Pointer_Ref(this1,this2);
			var fired = this3;
			this.handlers.push(tannus_io__$Signal_Handler.Once(f,fired));
		}
	}
	,on: function(f,once) {
		if(once == null) {
			once = false;
		}
		this.listen(f,once);
	}
	,once: function(f) {
		this.listen(f,true);
	}
	,when: function(test,f) {
		this.handlers.push(tannus_io__$Signal_Handler.Tested(f,test));
	}
	,times: function(count,f) {
		var _fired = 0;
		var this1 = function() {
			return _fired;
		};
		var this2 = function(v) {
			_fired = v;
			return _fired;
		};
		var this3 = new tannus_io__$Pointer_Ref(this1,this2);
		var fired = this3;
		this.handlers.push(tannus_io__$Signal_Handler.Counted(f,count,fired));
	}
	,every: function(wait,f) {
		var _rem = 0;
		var this1 = function() {
			return _rem;
		};
		var this2 = function(v) {
			_rem = v;
			return _rem;
		};
		var this3 = new tannus_io__$Pointer_Ref(this1,this2);
		var rem = this3;
		this.handlers.push(tannus_io__$Signal_Handler.Every(f,wait,rem));
	}
	,ignore: function(func) {
		this.handlers = this.handlers.filter(function(h) {
			switch(h[1]) {
			case 0:
				var f = h[2];
				return !Reflect.compareMethods(f,func);
			case 1:
				var f1 = h[2];
				return !Reflect.compareMethods(f1,func);
			case 2:
				var f2 = h[2];
				return !Reflect.compareMethods(f2,func);
			case 3:
				var f3 = h[2];
				return !Reflect.compareMethods(f3,func);
			case 4:
				var f4 = h[2];
				return !Reflect.compareMethods(f4,func);
			}
		});
	}
	,off: function(f) {
		this.ignore(f);
	}
	,clear: function() {
		this.handlers = [];
	}
	,callHandler: function(h,arg) {
		switch(h[1]) {
		case 0:
			var f = h[2];
			f(arg);
			break;
		case 1:
			var called = h[4];
			var count = h[3];
			var f1 = h[2];
			if(called.get() <= count) {
				f1(arg);
				called.set(called.get() + 1);
			}
			break;
		case 2:
			var rem = h[4];
			var wait = h[3];
			var f2 = h[2];
			if(rem.get() == wait) {
				f2(arg);
				rem.set(0);
			} else {
				rem.set(rem.get() + 1);
			}
			break;
		case 3:
			var fired = h[3];
			var f3 = h[2];
			if(!fired.get()) {
				f3(arg);
				fired.set(true);
			}
			break;
		case 4:
			var test = h[3];
			var f4 = h[2];
			if(test(arg)) {
				f4(arg);
			}
			break;
		}
	}
	,broadcast: function(data) {
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			this.callHandler(h,data);
		}
	}
	,call: function(data) {
		this.broadcast(data);
	}
	,handlers: null
	,ondelete: null
	,__class__: tannus_io_Signal
};
var tannus_io__$Signal_Handler = $hxClasses["tannus.io._Signal.Handler"] = { __ename__ : ["tannus","io","_Signal","Handler"], __constructs__ : ["Normal","Counted","Every","Once","Tested"] };
tannus_io__$Signal_Handler.Normal = function(func) { var $x = ["Normal",0,func]; $x.__enum__ = tannus_io__$Signal_Handler; $x.toString = $estr; return $x; };
tannus_io__$Signal_Handler.Counted = function(func,count,fired) { var $x = ["Counted",1,func,count,fired]; $x.__enum__ = tannus_io__$Signal_Handler; $x.toString = $estr; return $x; };
tannus_io__$Signal_Handler.Every = function(func,wait,remaining) { var $x = ["Every",2,func,wait,remaining]; $x.__enum__ = tannus_io__$Signal_Handler; $x.toString = $estr; return $x; };
tannus_io__$Signal_Handler.Once = function(func,fired) { var $x = ["Once",3,func,fired]; $x.__enum__ = tannus_io__$Signal_Handler; $x.toString = $estr; return $x; };
tannus_io__$Signal_Handler.Tested = function(func,test) { var $x = ["Tested",4,func,test]; $x.__enum__ = tannus_io__$Signal_Handler; $x.toString = $estr; return $x; };
var tannus_io_impl_BinaryError = $hxClasses["tannus.io.impl.BinaryError"] = { __ename__ : ["tannus","io","impl","BinaryError"], __constructs__ : ["Overflow","OutOfBounds","Custom"] };
tannus_io_impl_BinaryError.Overflow = ["Overflow",0];
tannus_io_impl_BinaryError.Overflow.toString = $estr;
tannus_io_impl_BinaryError.Overflow.__enum__ = tannus_io_impl_BinaryError;
tannus_io_impl_BinaryError.OutOfBounds = ["OutOfBounds",1];
tannus_io_impl_BinaryError.OutOfBounds.toString = $estr;
tannus_io_impl_BinaryError.OutOfBounds.__enum__ = tannus_io_impl_BinaryError;
tannus_io_impl_BinaryError.Custom = function(error) { var $x = ["Custom",2,error]; $x.__enum__ = tannus_io_impl_BinaryError; $x.toString = $estr; return $x; };
var tannus_io_impl_BinaryIterator = function(b) {
	this.bin = b;
	this.index = 0;
};
$hxClasses["tannus.io.impl.BinaryIterator"] = tannus_io_impl_BinaryIterator;
tannus_io_impl_BinaryIterator.__name__ = ["tannus","io","impl","BinaryIterator"];
tannus_io_impl_BinaryIterator.prototype = {
	hasNext: function() {
		return this.index <= this.bin._length - 1;
	}
	,next: function() {
		var c = this.bin.get(this.index);
		this.index++;
		return c;
	}
	,index: null
	,bin: null
	,__class__: tannus_io_impl_BinaryIterator
};
var tannus_io_impl_NodeBinary = $hx_exports["Binary"] = function(size,data) {
	tannus_io_Binary.call(this,size,data);
};
$hxClasses["tannus.io.impl.NodeBinary"] = tannus_io_impl_NodeBinary;
tannus_io_impl_NodeBinary.__name__ = ["tannus","io","impl","NodeBinary"];
tannus_io_impl_NodeBinary.alloc = function(size) {
	return new tannus_io_impl_NodeBinary(size,new Buffer(size));
};
tannus_io_impl_NodeBinary.ofData = function(data) {
	var bufferTarget = new Buffer(data.length);
	data.copy(bufferTarget,0,0,data.length);
	return new tannus_io_impl_NodeBinary(data.length,bufferTarget);
};
tannus_io_impl_NodeBinary.ofString = function(s) {
	return new tannus_io_impl_NodeBinary(s.length,new Buffer(s));
};
tannus_io_impl_NodeBinary.fromBytes = function(b) {
	var size = b.length;
	var nb = new tannus_io_impl_NodeBinary(size,new Buffer(size));
	var _g1 = 0;
	var _g = b.length;
	while(_g1 < _g) {
		var index = _g1++;
		nb.set(index,b.b[index]);
	}
	return nb;
};
tannus_io_impl_NodeBinary.fromBase64 = function(s) {
	return tannus_io_impl_NodeBinary.fromBytes(haxe_crypto_Base64.decode(s));
};
tannus_io_impl_NodeBinary.__super__ = tannus_io_Binary;
tannus_io_impl_NodeBinary.prototype = $extend(tannus_io_Binary.prototype,{
	get: function(index) {
		tannus_io_Binary.prototype.get.call(this,index);
		return this.b[index];
	}
	,set: function(index,value) {
		tannus_io_Binary.prototype.set.call(this,index,value);
		return this.b[index] = value;
	}
	,sub: function(index,size) {
		var subdata = this.b.slice(index,index + size);
		return new tannus_io_impl_NodeBinary(size,subdata);
	}
	,slice: function(start,end) {
		if(end == null) {
			end = this._length;
		}
		return new tannus_io_impl_NodeBinary(end - start,this.b.slice(start,end));
	}
	,blit: function(index,src,srcIndex,size) {
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			this.set(index + i,src.get(srcIndex + i));
		}
	}
	,getString: function(index,size) {
		return this.b.toString("utf8",index,index + size);
	}
	,resize: function(size) {
		if(size < this._length) {
			this.setData(this.b = this.b.slice(0,size));
		} else {
			var bigger = new tannus_io_impl_NodeBinary(size,new Buffer(size));
			bigger.blit(0,this,0,this._length);
			this.setData(bigger.b);
		}
	}
	,concat: function(other) {
		var len = this._length + other._length;
		var sum = new tannus_io_impl_NodeBinary(len,new Buffer(len));
		sum.blit(0,this,0,this._length);
		sum.blit(this._length,other,0,other._length);
		return sum;
	}
	,setData: function(data) {
		this.b = data;
		this._length = data.length;
	}
	,get_buffer: function() {
		return this.b;
	}
	,__class__: tannus_io_impl_NodeBinary
	,__properties__: $extend(tannus_io_Binary.prototype.__properties__,{get_buffer:"get_buffer"})
});
var tannus_io_impl_RegExMatch = function(re,strings,pos,groups) {
	this.re = re;
	this.source = strings[0];
	this.text = strings[1];
	this.pos = pos;
	this.groups = groups;
};
$hxClasses["tannus.io.impl.RegExMatch"] = tannus_io_impl_RegExMatch;
tannus_io_impl_RegExMatch.__name__ = ["tannus","io","impl","RegExMatch"];
tannus_io_impl_RegExMatch.prototype = {
	re: null
	,source: null
	,text: null
	,groups: null
	,pos: null
	,__class__: tannus_io_impl_RegExMatch
};
var tannus_macro_MacroTools = function() { };
$hxClasses["tannus.macro.MacroTools"] = tannus_macro_MacroTools;
tannus_macro_MacroTools.__name__ = ["tannus","macro","MacroTools"];
tannus_macro_MacroTools.toTypePath = function(s) {
	var path = { name : "", pack : [], params : null, sub : null};
	var bits = s.split(".");
	var _g = 0;
	while(_g < bits.length) {
		var b = bits[_g];
		++_g;
		if(b.toLowerCase() == b) {
			path.pack.push(b);
		} else if(b.charAt(0).toUpperCase() == b.charAt(0)) {
			if(path.name == "") {
				path.name = b;
			} else {
				path.sub = b;
			}
		}
	}
	return path;
};
var tannus_math__$Percent_Percent_$Impl_$ = {};
$hxClasses["tannus.math._Percent.Percent_Impl_"] = tannus_math__$Percent_Percent_$Impl_$;
tannus_math__$Percent_Percent_$Impl_$.__name__ = ["tannus","math","_Percent","Percent_Impl_"];
tannus_math__$Percent_Percent_$Impl_$.__properties__ = {set_delta:"set_delta",get_delta:"get_delta",set_value:"set_value",get_value:"get_value"}
tannus_math__$Percent_Percent_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
tannus_math__$Percent_Percent_$Impl_$.get_value = function(this1) {
	return this1;
};
tannus_math__$Percent_Percent_$Impl_$.set_value = function(this1,nv) {
	this1 = nv;
	return this1;
};
tannus_math__$Percent_Percent_$Impl_$.get_delta = function(this1) {
	return this1 / 100;
};
tannus_math__$Percent_Percent_$Impl_$.set_delta = function(this1,v) {
	this1 = v * 100;
	return this1;
};
tannus_math__$Percent_Percent_$Impl_$.toDelta = function(this1) {
	return this1 / 100;
};
tannus_math__$Percent_Percent_$Impl_$.complement = function(this1) {
	return 100 - this1;
};
tannus_math__$Percent_Percent_$Impl_$.plus = function(this1,other) {
	return this1 + other;
};
tannus_math__$Percent_Percent_$Impl_$.minus = function(this1,other) {
	return this1 - other;
};
tannus_math__$Percent_Percent_$Impl_$.preincrement = function(this1) {
	return ++this1;
};
tannus_math__$Percent_Percent_$Impl_$.postincrement = function(this1) {
	return this1++;
};
tannus_math__$Percent_Percent_$Impl_$.decrement = function(this1) {
	return --this1;
};
tannus_math__$Percent_Percent_$Impl_$.percent = function(what,of) {
	var this1 = what / of * 100;
	return this1;
};
tannus_math__$Percent_Percent_$Impl_$.toString = function(this1) {
	return "" + this1 + "%";
};
var tannus_math_Random = $hx_exports["Random"] = function(seed) {
	this.rng = this.createRandomNumberGenerator(seed);
};
$hxClasses["tannus.math.Random"] = tannus_math_Random;
tannus_math_Random.__name__ = ["tannus","math","Random"];
tannus_math_Random.stringSeed = function(seed) {
	var state = 0;
	var ba = new tannus_io_impl_NodeBinary(seed.length,new Buffer(seed));
	var bit = ba.iterator();
	while(bit.hasNext()) {
		var bit1 = bit.next();
		seed += bit1;
	}
	return new tannus_math_Random(state);
};
tannus_math_Random.prototype = {
	createRandomNumberGenerator: function(seed) {
		return new tannus_math_random_BasicRandomNumberGenerator(seed);
	}
	,nextInt: function() {
		return this.rng.nextInt();
	}
	,nextFloat: function() {
		return this.nextInt() / 2147483647;
	}
	,reset: function(value) {
	}
	,randfloat: function(min,max) {
		return this.nextInt() / 2147483647 * (max - min + 1) + min;
	}
	,randint: function(min,max) {
		return Math.floor(this.nextInt() / 2147483647 * (max - min + 1) + min);
	}
	,chance: function(chances,choices,shuffleAll) {
		if(shuffleAll == null) {
			shuffleAll = true;
		}
		if(tannus_math_TMath.sum_Int(chances) != 100) {
			var this1 = new tannus_utils_JavaScriptError("RandomError: The [chances] parameter for tannus.math.Random::chance must add up to 100");
			throw new js__$Boot_HaxeError(this1);
		} else if(chances.length != choices.length) {
			var this2 = new tannus_utils_JavaScriptError("RandomError: The [chances] and [choices] parameters for tannus.math.Random::chance must be of the same length");
			throw new js__$Boot_HaxeError(this2);
		} else {
			var all = [];
			var _g1 = 0;
			var _g = chances.length;
			while(_g1 < _g) {
				var index = _g1++;
				var count = chances[index];
				var value = choices[index];
				var _g3 = 0;
				var _g2 = count;
				while(_g3 < _g2) {
					var i = _g3++;
					all.push(value);
				}
			}
			if(shuffleAll) {
				all = this.shuffle(all);
			}
			var max = all.length - 1;
			return all[Math.floor(this.nextInt() / 2147483647 * (max + 1))];
		}
	}
	,randchance: function(top,bottom) {
		var _g = [];
		var _g2 = 0;
		var _g1 = bottom;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(i);
		}
		var choices = _g;
		var correct = [];
		while(correct.length < top) {
			var max = choices.length - 1;
			var cnum = choices[Math.floor(this.nextInt() / 2147483647 * (max + 1))];
			if(!Lambda.has(correct,cnum)) {
				correct.push(cnum);
			}
		}
		return Lambda.has(correct,Math.floor(this.nextInt() / 2147483647 * (bottom - top + 1) + top));
	}
	,randbool: function() {
		return Math.floor(this.nextInt() / 2147483647 * 2) == 1;
	}
	,choice: function(set) {
		var max = set.length - 1;
		return set[Math.floor(this.nextInt() / 2147483647 * (max + 1))];
	}
	,sample: function(set,size) {
		var sampleSize;
		if(size == null) {
			var max = set.length;
			sampleSize = Math.floor(this.nextInt() / 2147483647 * (max + 1));
		} else {
			sampleSize = size;
		}
		var items = [];
		while(items.length < sampleSize) {
			var max1 = set.length - 1;
			var ritem = set[Math.floor(this.nextInt() / 2147483647 * (max1 + 1))];
			if(!Lambda.has(items,ritem)) {
				items.push(ritem);
			}
		}
		return items;
	}
	,shuffle: function(set) {
		var copy = set.slice();
		var result = [];
		if(copy.length > 0) {
			while(copy.length != 1) {
				var max = copy.length - 1;
				var el = copy[Math.floor(this.nextInt() / 2147483647 * (max + 1))];
				HxOverrides.remove(copy,el);
				result.push(el);
			}
			result.push(copy.pop());
		}
		return result;
	}
	,enumConstruct: function(_enum) {
		var set = _enum.__constructs__.slice();
		var max = set.length - 1;
		var name = set[Math.floor(this.nextInt() / 2147483647 * (max + 1))];
		var e = _enum;
		var a1 = name;
		return function(a2) {
			return Type.createEnum(e,a1,a2);
		};
	}
	,pointInRect: function(rect) {
		var min = Math.floor(rect.x);
		var max = Math.floor(rect.x + rect.width);
		var x = Math.floor(this.nextInt() / 2147483647 * (max - min + 1) + min);
		var min1 = Math.floor(rect.y);
		var max1 = Math.floor(rect.y + rect.height);
		var this1 = new tannus_geom_TPoint(x,Math.floor(this.nextInt() / 2147483647 * (max1 - min1 + 1) + min1),0);
		return this1;
	}
	,rng: null
	,__class__: tannus_math_Random
};
var tannus_math__$Ratio_Ratio_$Impl_$ = {};
$hxClasses["tannus.math._Ratio.Ratio_Impl_"] = tannus_math__$Ratio_Ratio_$Impl_$;
tannus_math__$Ratio_Ratio_$Impl_$.__name__ = ["tannus","math","_Ratio","Ratio_Impl_"];
tannus_math__$Ratio_Ratio_$Impl_$._new = function(top,bottom) {
	var this1 = new tannus_math_CRatio(top,bottom);
	return this1;
};
tannus_math__$Ratio_Ratio_$Impl_$.equals = function(this1,other) {
	return this1.equals(other);
};
tannus_math__$Ratio_Ratio_$Impl_$.toFloat = function(this1) {
	return this1.toFloat();
};
tannus_math__$Ratio_Ratio_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_math__$Ratio_Ratio_$Impl_$.toPercent = function(this1) {
	return this1.toPercent();
};
tannus_math__$Ratio_Ratio_$Impl_$.fromFloatArray = function(a) {
	var this1 = new tannus_math_CRatio(a[0],a[1]);
	return this1;
};
tannus_math__$Ratio_Ratio_$Impl_$.fromIntArray = function(a) {
	var this1 = new tannus_math_CRatio(a[0],a[1]);
	return this1;
};
var tannus_math_CRatio = function(t,b) {
	this.top = t;
	this.bottom = b;
};
$hxClasses["tannus.math.CRatio"] = tannus_math_CRatio;
tannus_math_CRatio.__name__ = ["tannus","math","CRatio"];
tannus_math_CRatio.prototype = {
	bottomValue: function(topValue) {
		return topValue / this.top * this.bottom;
	}
	,topValue: function(bottomValue) {
		return bottomValue / this.bottom * this.top;
	}
	,toFloat: function() {
		return this.top / this.bottom;
	}
	,toString: function() {
		return "" + this.top + " / " + this.bottom;
	}
	,toPercent: function() {
		return tannus_math__$Percent_Percent_$Impl_$.percent(this.top,this.bottom);
	}
	,equals: function(other) {
		return this.toFloat() == other.toFloat();
	}
	,reciprocal: function() {
		var this1 = new tannus_math_CRatio(1,this.toFloat());
		return this1;
	}
	,get_percent: function() {
		return this.toPercent();
	}
	,top: null
	,bottom: null
	,__class__: tannus_math_CRatio
	,__properties__: {get_percent:"get_percent"}
};
var tannus_math_TMath = $hx_exports["TMath"] = function() { };
$hxClasses["tannus.math.TMath"] = tannus_math_TMath;
tannus_math_TMath.__name__ = ["tannus","math","TMath"];
tannus_math_TMath.sum_Int = function(list) {
	var res = null;
	var _g = 0;
	while(_g < list.length) {
		var item = list[_g];
		++_g;
		if(res == null) {
			res = item;
		} else {
			res = (res != null ? res : res) + item;
		}
	}
	return res;
};
tannus_math_TMath.sum_Float = function(list) {
	var res = null;
	var _g = 0;
	while(_g < list.length) {
		var item = list[_g];
		++_g;
		if(res == null) {
			res = item;
		} else {
			res = (res != null ? res : res) + item;
		}
	}
	return res;
};
tannus_math_TMath.toRadians = function(degrees) {
	return degrees * 3.141592653589793 / 180;
};
tannus_math_TMath.toDegrees = function(radians) {
	return radians * 180 / 3.141592653589793;
};
tannus_math_TMath.angleBetween = function(x1,y1,x2,y2) {
	return Math.atan2(y2 - y1,x2 - x1) * 180 / 3.141592653589793;
};
tannus_math_TMath.distance = function(x1,y1,x2,y2) {
	return Math.sqrt(Math.pow(Math.abs(x2 - x1),2) + Math.pow(Math.abs(y2 - y1),2));
};
tannus_math_TMath.toFixed = function(n,c) {
	if(c == null) {
		c = 0;
	}
	var sn = Std.string(n);
	var bd = tannus_ds_StringUtils.before(sn,".");
	var wn = Std.parseInt(bd);
	var ad = "";
	var res = wn + "";
	if(tannus_ds_StringUtils.has(sn,".")) {
		ad = tannus_ds_StringUtils.after(sn,".");
		var sl = tannus_ds_StringUtils.slice(ad,0,c);
		if(ad.length > sl.length) {
			sl = tannus_ds_StringUtils.slice(ad,0,c + 1);
			var idec = Std.parseInt(sl);
			idec = Math.round(idec / 10);
			res += "." + idec;
		} else {
			res += "." + sl;
		}
	}
	return res;
};
tannus_math_TMath.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
tannus_math_TMath.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
tannus_math_TMath.maxr = function(nums) {
	var m = null;
	var n = $iterator(nums)();
	while(n.hasNext()) {
		var n1 = n.next();
		if(m == null) {
			m = n1;
		}
		m = n1 > m ? n1 : m;
	}
	return m;
};
tannus_math_TMath.minr = function(nums) {
	var m = null;
	var _g = 0;
	while(_g < nums.length) {
		var n = nums[_g];
		++_g;
		if(m == null) {
			m = n;
		}
		m = n < m ? n : m;
	}
	return m;
};
tannus_math_TMath.range = function(nums) {
	var mi = null;
	var ma = null;
	var _g = 0;
	while(_g < nums.length) {
		var n = nums[_g];
		++_g;
		if(mi == null) {
			mi = n;
		}
		if(ma == null) {
			ma = n;
		}
		mi = n < mi ? n : mi;
		ma = n > ma ? n : ma;
	}
	return new tannus_ds_Range(mi,ma);
};
tannus_math_TMath.lerp = function(a,b,x) {
	return a + x * (b - a);
};
tannus_math_TMath.almostEquals = function(n,v,threshold) {
	return Math.abs(n - v) <= threshold;
};
tannus_math_TMath.i = function(f) {
	return f | 0;
};
tannus_math_TMath.roundFloat = function(f,digit) {
	var n = Math.pow(10,digit);
	var r = Math.round(f * n) / n;
	return r;
};
tannus_math_TMath.average = function(values) {
	var sum = 0;
	var _g = 0;
	while(_g < values.length) {
		var n = values[_g];
		++_g;
		sum += n;
	}
	return sum / values.length;
};
tannus_math_TMath.largest = function(items,predicate) {
	var highest = 0;
	var item = $iterator(items)();
	while(item.hasNext()) {
		var item1 = item.next();
		var b = predicate(item1);
		if(highest > b) {
			highest = highest;
		} else {
			highest = b;
		}
	}
	return highest;
};
tannus_math_TMath.smallest = function(items,predicate) {
	var lowest = 0;
	var item = $iterator(items)();
	while(item.hasNext()) {
		var item1 = item.next();
		var b = predicate(item1);
		if(lowest < b) {
			lowest = lowest;
		} else {
			lowest = b;
		}
	}
	return lowest;
};
tannus_math_TMath.largestItem = function(items,predicate) {
	var asarr = Lambda.array(items);
	if(asarr.length == 0) {
		return null;
	} else if(asarr.length == 1) {
		return asarr[0];
	} else if(asarr.length == 2) {
		var px = predicate(asarr[0]);
		var py = predicate(asarr[1]);
		if(px >= py) {
			return asarr[0];
		} else {
			return asarr[1];
		}
	} else {
		var best = null;
		var item = $iterator(items)();
		while(item.hasNext()) {
			var item1 = item.next();
			var score = predicate(item1);
			if(best == null || score > best.score) {
				best = { "item" : item1, "score" : score};
			}
		}
		return best.item;
	}
};
tannus_math_TMath.minmax = function(items,predicate) {
	var res = new tannus_ds_FloatRange(NaN,NaN);
	var item = $iterator(items)();
	while(item.hasNext()) {
		var item1 = item.next();
		var score = predicate(item1);
		if(res.max < score || isNaN(res.max)) {
			res.max = score;
		} else if(res.min > score || isNaN(res.min)) {
			res.min = score;
		}
		if(res.min > res.max) {
			var _t = res.max;
			res.max = res.min;
			res.min = _t;
		}
	}
	return res;
};
tannus_math_TMath.inRange = function(value,min,max) {
	if(value >= min) {
		return value <= max;
	} else {
		return false;
	}
};
tannus_math_TMath.sign = function(value) {
	if(value < 0) {
		return -1;
	} else if(value > 0) {
		return 1;
	} else {
		return 0;
	}
};
tannus_math_TMath.applySign = function(value,sign) {
	return value * sign;
};
tannus_math_TMath.sumf = function(set,extractor) {
	var res = null;
	var item = $iterator(set)();
	while(item.hasNext()) {
		var item1 = item.next();
		if(res != null) {
			res += extractor(item1);
		} else {
			res = extractor(item1);
		}
	}
	return res;
};
tannus_math_TMath.sampleVariance = function(data) {
	var sampleSize = data.length;
	if(sampleSize < 2) {
		return 0;
	}
	var sum = 0;
	var _g = 0;
	while(_g < data.length) {
		var n = data[_g];
		++_g;
		sum += n;
	}
	var mean = sum / data.length;
	return tannus_math_TMath.sum_Float(data.map(function(val) {
		return Math.pow(val - mean,2);
	})) / (sampleSize - 1);
};
tannus_math_TMath.standardDeviation = function(data) {
	return Math.sqrt(tannus_math_TMath.sampleVariance(data));
};
tannus_math_TMath.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
tannus_math_TMath.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
tannus_math_TMath.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
tannus_math_TMath.snap = function(value,min,step,max) {
	if(value < min) {
		return min;
	} else if(max != null && value > max) {
		return max;
	} else {
		var v = min;
		while(true) {
			if(value <= v) {
				var prev = v - step;
				if(value >= prev) {
					if(v - value < value - prev) {
						return v;
					} else {
						return prev;
					}
				}
			}
			v += step;
		}
	}
};
tannus_math_TMath.prettify = function(num,dec) {
	if(dec == null) {
		dec = 0;
	}
	var i = num | 0;
	var si = i == null ? "null" : "" + i;
	console.log(si);
	var this1 = new tannus_io_impl_NodeBinary(0,new Buffer(0));
	var res = this1;
	var index = si.length - 1;
	while(index >= 0) {
		var c;
		if(index <= si.length - 1) {
			var n = HxOverrides.cca(si,index);
			var this2;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
				throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
			}
			this2 = n;
			c = this2;
		} else {
			throw new js__$Boot_HaxeError("IndexOutOfBoundError: " + index + " is not within range(0, " + (si.length - 1) + ")");
		}
		res.push(c);
		if((index + 1) % 3 == 0) {
			res.push(44);
		}
		--index;
	}
	res.reverse();
	return res.toString();
};
tannus_math_TMath.compareChain = function(nums) {
	var n = $iterator(nums)();
	while(n.hasNext()) {
		var n1 = n.next();
		if(n1 == 0) {
			continue;
		} else {
			return n1;
		}
	}
	return 0;
};
tannus_math_TMath.fcompareChain = function(getters) {
	var get = $iterator(getters)();
	while(get.hasNext()) {
		var get1 = get.next();
		var n = get1();
		if(n == 0) {
			continue;
		} else {
			return n;
		}
	}
	return 0;
};
tannus_math_TMath.abs = function(v) {
	return Math.abs(v);
};
tannus_math_TMath.acos = function(v) {
	return Math.acos(v);
};
tannus_math_TMath.asin = function(v) {
	return Math.asin(v);
};
tannus_math_TMath.atan = function(v) {
	return Math.atan(v);
};
tannus_math_TMath.atan2 = function(x,y) {
	return Math.atan2(x,y);
};
tannus_math_TMath.ceil = function(v) {
	return Math.ceil(v);
};
tannus_math_TMath.floor = function(v) {
	return Math.floor(v);
};
tannus_math_TMath.cos = function(v) {
	return Math.cos(v);
};
tannus_math_TMath.exp = function(v) {
	return Math.exp(v);
};
tannus_math_TMath.fceil = function(v) {
	return Math.ceil(v);
};
tannus_math_TMath.ffloor = function(v) {
	return Math.floor(v);
};
tannus_math_TMath.fround = function(v) {
	return Math.round(v);
};
tannus_math_TMath.isFinite = function(v) {
	return isFinite(v);
};
tannus_math_TMath.isNaN = function(v) {
	return isNaN(v);
};
tannus_math_TMath.log = function(v) {
	return Math.log(v);
};
tannus_math_TMath.pow = function(v,exp) {
	return Math.pow(v,exp);
};
tannus_math_TMath.random = function() {
	return Math.random();
};
tannus_math_TMath.round = function(v) {
	return Math.round(v);
};
tannus_math_TMath.sin = function(v) {
	return Math.sin(v);
};
tannus_math_TMath.sqrt = function(v) {
	return Math.sqrt(v);
};
tannus_math_TMath.tan = function(v) {
	return Math.tan(v);
};
var tannus_math_random_RandomNumberGenerator = function() { };
$hxClasses["tannus.math.random.RandomNumberGenerator"] = tannus_math_random_RandomNumberGenerator;
tannus_math_random_RandomNumberGenerator.__name__ = ["tannus","math","random","RandomNumberGenerator"];
tannus_math_random_RandomNumberGenerator.prototype = {
	getState: null
	,nextInt: null
	,__class__: tannus_math_random_RandomNumberGenerator
};
var tannus_math_random_BasicRandomNumberGenerator = function(seed) {
	this.seed = seed != null ? seed : Math.floor(Math.random() * 2147483647);
	this.state = this.seed;
};
$hxClasses["tannus.math.random.BasicRandomNumberGenerator"] = tannus_math_random_BasicRandomNumberGenerator;
tannus_math_random_BasicRandomNumberGenerator.__name__ = ["tannus","math","random","BasicRandomNumberGenerator"];
tannus_math_random_BasicRandomNumberGenerator.__interfaces__ = [tannus_math_random_RandomNumberGenerator];
tannus_math_random_BasicRandomNumberGenerator.prototype = {
	getState: function() {
		return this.state;
	}
	,nextInt: function() {
		return this.state = (1103515245.0 * this.state + 12345) % 2147483647;
	}
	,seed: null
	,state: null
	,__class__: tannus_math_random_BasicRandomNumberGenerator
};
var tannus_nore_Check = $hxClasses["tannus.nore.Check"] = { __ename__ : ["tannus","nore","Check"], __constructs__ : ["TypeCheck","LooseTypeCheck","ShortTypeCheck","NestedCheck","FieldExistsCheck","FieldValueCheck","FieldValueBlockCheck","FieldValueTypeCheck","HelperCheck","GroupCheck","EitherCheck","InvertedCheck","TernaryCheck"] };
tannus_nore_Check.TypeCheck = function(t) { var $x = ["TypeCheck",0,t]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.LooseTypeCheck = function(t) { var $x = ["LooseTypeCheck",1,t]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.ShortTypeCheck = function(t) { var $x = ["ShortTypeCheck",2,t]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.NestedCheck = function(op,value) { var $x = ["NestedCheck",3,op,value]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.FieldExistsCheck = function(name) { var $x = ["FieldExistsCheck",4,name]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.FieldValueCheck = function(op,name,value) { var $x = ["FieldValueCheck",5,op,name,value]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.FieldValueBlockCheck = function(name,checks) { var $x = ["FieldValueBlockCheck",6,name,checks]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.FieldValueTypeCheck = function(name,type,loose) { var $x = ["FieldValueTypeCheck",7,name,type,loose]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.HelperCheck = function(name,args) { var $x = ["HelperCheck",8,name,args]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.GroupCheck = function(checks) { var $x = ["GroupCheck",9,checks]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.EitherCheck = function(left,right) { var $x = ["EitherCheck",10,left,right]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.InvertedCheck = function(check) { var $x = ["InvertedCheck",11,check]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.TernaryCheck = function(condition,itrue,ifalse) { var $x = ["TernaryCheck",12,condition,itrue,ifalse]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
var tannus_nore_Compiler = function() {
	this.reset();
};
$hxClasses["tannus.nore.Compiler"] = tannus_nore_Compiler;
tannus_nore_Compiler.__name__ = ["tannus","nore","Compiler"];
tannus_nore_Compiler.prototype = {
	compileString: function(s) {
		var l = new tannus_nore_Lexer();
		var s1 = this.operators.keys();
		while(s1.hasNext()) {
			var s2 = s1.next();
			l.operators.push(s2);
		}
		var p = new tannus_nore_Parser();
		var toks = l.lex(s);
		var tree = p.parse(toks);
		return this.compile(tree);
	}
	,compile: function(checkList) {
		this.checks = new tannus_ds_Stack(checkList);
		while(!this.checks.get_empty()) {
			var cf = this.compileCheck(this.checks.pop());
			this.checkFuncs.push(cf);
		}
		var f = $bind(this,this.testAll);
		return function(o) {
			return f(o);
		};
	}
	,compileCheck: function(check) {
		var _gthis = this;
		switch(check[1]) {
		case 0:
			var type = check[2];
			var f = ($_=this.tools,$bind($_,$_.checkType));
			var a1 = type;
			return function(o) {
				return f(o,a1,false);
			};
		case 1:
			var type1 = check[2];
			var f1 = ($_=this.tools,$bind($_,$_.checkType));
			var a11 = type1;
			return function(o1) {
				return f1(o1,a11,true);
			};
		case 2:
			var type2 = check[2];
			var f2 = ($_=this.tools,$bind($_,$_.checkShortType));
			var a12 = type2;
			return function(o2) {
				return f2(o2,a12);
			};
		case 3:
			var value = check[3];
			var sop = check[2];
			if(this.operators.exists(sop)) {
				var op = this.operators.get(sop);
				return function(o3) {
					var tmp = tannus_nore_ValueTools.haxeValue(value,_gthis.tools,o3)();
					return op(o3,tmp);
				};
			} else {
				throw new js__$Boot_HaxeError("CompilationError: Invalid operator \"" + sop + "\"!");
			}
			break;
		case 4:
			var name = check[2];
			var f3 = ($_=this.tools,$bind($_,$_.has));
			var a13 = name;
			return function(o4) {
				return f3(o4,a13);
			};
		case 5:
			var value1 = check[4];
			var name1 = check[3];
			var sop1 = check[2];
			if(this.operators.exists(sop1)) {
				var op1 = this.operators.get(sop1);
				return function(o5) {
					var tmp1 = _gthis.tools.get(o5,name1);
					var tmp2 = tannus_nore_ValueTools.haxeValue(value1,_gthis.tools,o5)();
					return op1(tmp1,tmp2);
				};
			} else {
				throw new js__$Boot_HaxeError("CompilationError: Invalid operator \"" + sop1 + "\"!");
			}
			break;
		case 6:
			var block = check[3];
			var name2 = check[2];
			var f4 = ($_=this.tools,$bind($_,$_.get));
			var a14 = name2;
			var getit = function(o6) {
				return f4(o6,a14);
			};
			var test = this.sub(block);
			return function(o7) {
				var ctx = getit(o7);
				return test(ctx);
			};
		case 7:
			var loose = check[4];
			var type3 = check[3];
			var name3 = check[2];
			return function(o8) {
				return _gthis.tools.checkType(_gthis.tools.get(o8,name3),type3,loose);
			};
		case 8:
			var vargs = check[3];
			var name4 = check[2];
			var f5 = ($_=this.tools,$bind($_,$_.helper_check));
			var a15 = name4;
			var a2 = vargs;
			return function(o9) {
				return f5(o9,a15,a2);
			};
		case 9:
			var list = check[2];
			var state = this.save();
			var child = new tannus_nore_Compiler();
			child.restore(state);
			return child.compile(list);
		case 10:
			var cright = check[3];
			var cleft = check[2];
			var left = this.compileCheck(cleft);
			var right = this.compileCheck(cright);
			return function(o10) {
				if(!left(o10)) {
					return right(o10);
				} else {
					return true;
				}
			};
		case 11:
			var cc = check[2];
			var c = this.compileCheck(cc);
			return function(o11) {
				return !c(o11);
			};
		case 12:
			var cfalse = check[4];
			var ctrue = check[3];
			var ccondition = check[2];
			var cond = this.compileCheck(ccondition);
			var itrue = this.compileCheck(ctrue);
			var ifalse = cfalse != null ? this.compileCheck(cfalse) : null;
			return function(o12) {
				if(cond(o12)) {
					return itrue(o12);
				} else if(ifalse != null) {
					return ifalse(o12);
				} else {
					return true;
				}
			};
		}
	}
	,reset: function() {
		this.checks = new tannus_ds_Stack();
		this.checkFuncs = [];
		try {
			var _this = this.operators;
			if(__map_reserved[""] != null) {
				_this.existsReserved("");
			} else {
				_this.h.hasOwnProperty("");
			}
		} catch( error ) {
			this.operators = new haxe_ds_StringMap();
		}
		try {
			var _this1 = this.helpers;
			if(__map_reserved[""] != null) {
				_this1.existsReserved("");
			} else {
				_this1.h.hasOwnProperty("");
			}
		} catch( error1 ) {
			this.helpers = new haxe_ds_StringMap();
		}
		this.tools = new tannus_nore_CompilerTools(this);
		this.initOperators();
		this.initHelpers();
	}
	,initOperators: function() {
		var _gthis = this;
		var eq = function(x,y) {
			if(tannus_internal_TypeTools.typename(x) == tannus_internal_TypeTools.typename(y)) {
				if(x == y) {
					return true;
				} else {
					var eq1 = _gthis.tools.get(x,"equals");
					if(Reflect.isFunction(eq1)) {
						try {
							var eqv = eq1.apply(x,[y]);
							if(eqv != null) {
								return eqv == true;
							}
						} catch( err ) {
						}
					}
					var eq2 = _gthis.tools.get(y,"equals");
					if(Reflect.isFunction(eq2)) {
						try {
							var eqv1 = eq2.apply(y,[x]);
							if(eqv1 != null) {
								return eqv1 == true;
							}
						} catch( err1 ) {
						}
					}
					return false;
				}
			} else {
				return false;
			}
		};
		this.operators.set("==",eq);
		this.operators.set("!=",function(x1,y1) {
			return !eq(x1,y1);
		});
		var greaterThan = function(x2,y2) {
			if(tannus_internal_TypeTools.typename(x2) == "Number" && tannus_internal_TypeTools.typename(y2) == "Number") {
				return x2 > y2;
			} else {
				return false;
			}
		};
		var lessThan = function(x3,y3) {
			if(tannus_internal_TypeTools.typename(x3) == "Number" && tannus_internal_TypeTools.typename(y3) == "Number") {
				return x3 < y3;
			} else {
				return false;
			}
		};
		this.operators.set(">",greaterThan);
		this.operators.set("<",lessThan);
		this.operators.set(">=",function(x4,y4) {
			if(!greaterThan(x4,y4)) {
				return eq(x4,y4);
			} else {
				return true;
			}
		});
		this.operators.set("<=",function(x5,y5) {
			if(!lessThan(x5,y5)) {
				return eq(x5,y5);
			} else {
				return true;
			}
		});
		var has = function(x6,y6) {
			if(typeof(x6) == "string") {
				return tannus_ds_StringUtils.has(js_Boot.__cast(x6 , String),Std.string(y6));
			} else if((x6 instanceof Array) && x6.__enum__ == null) {
				return Lambda.has(js_Boot.__cast(x6 , Array),y6);
			} else {
				return false;
			}
		};
		this.operators.set("has",has);
		this.operators.set("contains",has);
		var regtest = function(x7,y7) {
			var _g = [x7,y7].map(function(o) {
				return tannus_internal_TypeTools.typename(o);
			});
			if(_g.length == 2) {
				if(_g[1] == "String") {
					var reg = new EReg(Std.string(y7),"");
					return reg.match(Std.string(x7));
				} else {
					return false;
				}
			} else {
				return false;
			}
		};
		this.operators.set("~=",regtest);
	}
	,initHelpers: function() {
	}
	,operator: function(name,f) {
		var _this = this.operators;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,f);
		} else {
			_this.h[name] = f;
		}
	}
	,helper: function(name,f) {
		var _this = this.helpers;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,f);
		} else {
			_this.h[name] = f;
		}
	}
	,save: function() {
		return { "checks" : this.checks.copy(), checkFuncs : this.checkFuncs.slice(), "operators" : this.copyOperators(), "helpers" : this.copyHelpers(), "tools" : this.tools};
	}
	,restore: function(s) {
		this.checks = s.checks;
		this.checkFuncs = s.checkFuncs;
		this.operators = s.operators;
		this.helpers = s.helpers;
		this.tools = s.tools;
	}
	,sub: function(checkList) {
		var subc = new tannus_nore_Compiler();
		subc.tools = this.tools;
		subc.operators = this.copyOperators();
		subc.helpers = this.copyHelpers();
		var f = subc.compile(checkList);
		return f;
	}
	,copyOperators: function() {
		var copy = new haxe_ds_StringMap();
		var key = this.operators.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this.operators;
			var value = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
			if(__map_reserved[key1] != null) {
				copy.setReserved(key1,value);
			} else {
				copy.h[key1] = value;
			}
		}
		return copy;
	}
	,copyHelpers: function() {
		var copy = new haxe_ds_StringMap();
		var key = this.helpers.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this.helpers;
			var value = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
			if(__map_reserved[key1] != null) {
				copy.setReserved(key1,value);
			} else {
				copy.h[key1] = value;
			}
		}
		return copy;
	}
	,testAll: function(o) {
		var _g = 0;
		var _g1 = this.checkFuncs;
		while(_g < _g1.length) {
			var check = _g1[_g];
			++_g;
			if(!check(o)) {
				return false;
			}
		}
		return true;
	}
	,get_end: function() {
		return this.checks.get_empty();
	}
	,checks: null
	,checkFuncs: null
	,operators: null
	,helpers: null
	,tools: null
	,__class__: tannus_nore_Compiler
	,__properties__: {get_end:"get_end"}
};
var tannus_nore_CompilerTools = function(owner) {
	this.c = owner;
};
$hxClasses["tannus.nore.CompilerTools"] = tannus_nore_CompilerTools;
tannus_nore_CompilerTools.__name__ = ["tannus","nore","CompilerTools"];
tannus_nore_CompilerTools.prototype = {
	has: function(o,name) {
		return Object.prototype.hasOwnProperty.call(o,name);
	}
	,get: function(o,name) {
		var tmp;
		var tmp1;
		if(o == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + name];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = o[tmp]();
			} else {
				tmp1 = o[name];
			}
		}
		return tmp1;
	}
	,checkType: function(o,type,loose) {
		if(loose == null) {
			loose = false;
		}
		if(!loose) {
			return tannus_internal_TypeTools.typename(o) == type;
		} else {
			var tc = Type.resolveClass(type);
			return js_Boot.__instanceof(o,tc);
		}
	}
	,checkShortType: function(o,type) {
		var className = tannus_ds_ArrayTools.last(tannus_internal_TypeTools.typename(o).split("."));
		return className == type;
	}
	,helper_check: function(o,name,vargs) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < vargs.length) {
			var v = vargs[_g1];
			++_g1;
			_g.push(tannus_nore_ValueTools.haxeValue(v,this,o)());
		}
		var args = _g;
		var _this = this.c.helpers;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this.c.helpers;
			var help = __map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name];
			return help(o,args);
		} else if(this.has(o,name)) {
			var v1 = this.get(o,name);
			if(typeof(v1) == "boolean") {
				return v1;
			} else if(Reflect.isFunction(v1)) {
				return this.get(o,name).apply(o,args) == true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,c: null
	,__class__: tannus_nore_CompilerTools
};
var tannus_nore_Lexer = function() {
	this.tokens = [];
	this.canCall = false;
	this.inTernary = false;
	var this1 = new tannus_io_impl_NodeBinary(0,new Buffer(0));
	this.bytes = new tannus_io_ByteStack(this1);
	this.operators = [];
	this.operators.push("=>");
	this.operators.push("is");
	this.operators.push("has");
	this.operators.push("contains");
};
$hxClasses["tannus.nore.Lexer"] = tannus_nore_Lexer;
tannus_nore_Lexer.__name__ = ["tannus","nore","Lexer"];
tannus_nore_Lexer.lexString = function(s) {
	return new tannus_nore_Lexer().lex(s);
};
tannus_nore_Lexer.prototype = {
	operator: function(op) {
		this.operators.push(op);
	}
	,lex: function(s) {
		this.tokens = [];
		this.canCall = false;
		this.inTernary = false;
		var this1 = new tannus_io_impl_NodeBinary(0,new Buffer(0));
		this.bytes = new tannus_io_ByteStack(this1);
		this.bytes = new tannus_io_ByteStack(new tannus_io_impl_NodeBinary(s.length,new Buffer(s)));
		while(!this.bytes.get_empty()) {
			var t = this.lexNext();
			if(t != null) {
				this.tokens.push(t);
			}
		}
		return this.tokens;
	}
	,lexNext: function() {
		var c = this.bytes.peek();
		if(Lambda.has([9,10,11,12,13,32],c)) {
			this.bytes.pop();
			if(!this.bytes.get_empty()) {
				return this.lexNext();
			} else {
				return null;
			}
		} else if(c >= 65 && c <= 90 || c >= 97 && c <= 122 || c == 95) {
			var id = String.fromCharCode(c);
			this.bytes.pop();
			while(!this.bytes.get_empty() && this.isIdent(this.bytes.peek())) id += String.fromCharCode(this.bytes.pop());
			if(Lambda.has(this.operators,id)) {
				return tannus_nore_Token.TOperator(id);
			}
			if(Lambda.has(["if"],id.toLowerCase())) {
				return this.lexStructure(id.toLowerCase());
			} else {
				return tannus_nore_Token.TConst(tannus_nore_Const.CIdent(id));
			}
		} else if(c == 64) {
			this.bytes.pop();
			var id1 = "";
			while(!this.bytes.get_empty() && this.isIdent(this.bytes.peek())) id1 += String.fromCharCode(this.bytes.pop());
			return tannus_nore_Token.TConst(tannus_nore_Const.CReference(id1));
		} else if(Lambda.has([34,39,96],c)) {
			var delimiter = this.bytes.pop();
			var level;
			switch(delimiter) {
			case 34:
				level = 2;
				break;
			case 39:
				level = 1;
				break;
			case 96:
				level = 3;
				break;
			default:
				level = -1;
			}
			var str = this.bytes.readUntil(delimiter).toString();
			this.bytes.pop();
			return tannus_nore_Token.TConst(tannus_nore_Const.CString(str,level));
		} else if(c >= 48 && c <= 57) {
			var snum = String.fromCharCode(this.bytes.pop());
			while(true) {
				var tmp;
				if(!this.bytes.get_empty()) {
					var this1 = this.bytes.peek();
					if(!(this1 >= 48 && this1 <= 57)) {
						tmp = this.bytes.peek() == HxOverrides.cca(".",0);
					} else {
						tmp = true;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				snum += String.fromCharCode(this.bytes.pop());
			}
			return tannus_nore_Token.TConst(tannus_nore_Const.CNumber(parseFloat(snum)));
		} else if(c == 91) {
			var n = HxOverrides.cca("[",0);
			var this2;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
				throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
			}
			this2 = n;
			var n1 = HxOverrides.cca("]",0);
			var this3;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n1)) {
				throw new js__$Boot_HaxeError("Invalid Byte Value (" + n1 + ")!");
			}
			this3 = n1;
			var sgroup = this.readGroup(this2,this3).toString();
			var group = this.sub(sgroup);
			return tannus_nore_Token.TBrackets(group);
		} else if(c == 123) {
			var n2 = HxOverrides.cca("{",0);
			var this4;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n2)) {
				throw new js__$Boot_HaxeError("Invalid Byte Value (" + n2 + ")!");
			}
			this4 = n2;
			var n3 = HxOverrides.cca("}",0);
			var this5;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n3)) {
				throw new js__$Boot_HaxeError("Invalid Byte Value (" + n3 + ")!");
			}
			this5 = n3;
			var sg = this.readGroup(this4,this5).toString();
			var g = this.sub(sg);
			return tannus_nore_Token.TBoxBrackets(g);
		} else if(this.isOpChar(c)) {
			var state = this.save();
			var op = String.fromCharCode(this.bytes.pop());
			while(!this.bytes.get_empty() && this.isOpChar(this.bytes.peek())) op += String.fromCharCode(this.bytes.pop());
			if(Lambda.has(this.operators,op)) {
				return tannus_nore_Token.TOperator(op);
			} else if(op == "!") {
				return tannus_nore_Token.TNot;
			} else {
				throw new js__$Boot_HaxeError("SyntaxError: Invalid operator \"" + op + "\"!");
			}
		} else if(c == 40) {
			var n4 = HxOverrides.cca("(",0);
			var this6;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n4)) {
				throw new js__$Boot_HaxeError("Invalid Byte Value (" + n4 + ")!");
			}
			this6 = n4;
			var n5 = HxOverrides.cca(")",0);
			var this7;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n5)) {
				throw new js__$Boot_HaxeError("Invalid Byte Value (" + n5 + ")!");
			}
			this7 = n5;
			var s = this.readGroup(this6,this7);
			var toklist = s._length <= 0 ? [] : this.sub(s.toString());
			var treeStack = new tannus_ds_Stack(toklist.slice());
			var tree = [];
			var hasComma = false;
			while(!treeStack.get_empty()) {
				var t = treeStack.pop();
				if(t[1] != 9) {
					tree.push(t);
				} else {
					hasComma = true;
				}
			}
			if(hasComma) {
				return tannus_nore_Token.TTuple(tree);
			} else {
				return tannus_nore_Token.TGroup(toklist);
			}
		} else if(c == 44) {
			this.bytes.pop();
			return tannus_nore_Token.TComma;
		} else if(c == 124) {
			this.bytes.pop();
			return tannus_nore_Token.TOr;
		} else if(c == 58) {
			this.bytes.pop();
			this.canCall = true;
			var name = this.lexNext();
			if(name == null) {
				throw new js__$Boot_HaxeError("SyntaxError: Expected identifier, got " + Std.string(name));
			} else if(name[1] == 0) {
				if(name[2][1] == 0) {
					var name1 = name[2][2];
					if(!this.bytes.get_empty()) {
						var state1 = this.save();
						var targs = this.lexNext();
						if(targs == null) {
							this.restore(state1);
							console.log("helper");
							return tannus_nore_Token.THelper(name1,[]);
						} else {
							switch(targs[1]) {
							case 4:
								var _hx_tmp = targs[2][0];
								var arg = _hx_tmp;
								console.log("helper");
								return tannus_nore_Token.THelper(name1,[arg]);
							case 5:
								var args = targs[2];
								console.log("helper");
								return tannus_nore_Token.THelper(name1,args);
							default:
								this.restore(state1);
								console.log("helper");
								return tannus_nore_Token.THelper(name1,[]);
							}
						}
					} else {
						console.log("helper");
						return tannus_nore_Token.THelper(name1,[]);
					}
				} else {
					throw new js__$Boot_HaxeError("SyntaxError: Expected identifier, got " + Std.string(name));
				}
			} else {
				throw new js__$Boot_HaxeError("SyntaxError: Expected identifier, got " + Std.string(name));
			}
		} else if(c == 46) {
			this.bytes.pop();
			if(this.bytes.peek() == 46) {
				this.bytes.pop();
				return tannus_nore_Token.TDoubleDot;
			} else {
				throw new js__$Boot_HaxeError("SyntaxError: Expected \".\", got " + String.fromCharCode(this.bytes.peek()));
			}
		} else if(c == 126) {
			this.bytes.pop();
			return tannus_nore_Token.TApprox;
		} else {
			throw new js__$Boot_HaxeError("SyntaxError: Unexpected \"" + String.fromCharCode(c) + "\"!");
		}
	}
	,lexStructure: function(kw) {
		if(kw == "if") {
			var cond = this.lexNext();
			console.log(cond);
			var then = this.lexNext();
			console.log(then);
			if(then[1] == 0) {
				if(then[2][1] == 0) {
					if(then[2][2] == "then") {
						var itrue = this.lexNext();
						console.log(itrue);
						var ifalse = null;
						if(!this.bytes.get_empty()) {
							var state = this.save();
							var otherwise = this.lexNext();
							if(otherwise[1] == 0) {
								if(otherwise[2][1] == 0) {
									if(otherwise[2][2] == "else") {
										ifalse = this.lexNext();
										console.log(ifalse);
									} else {
										this.restore(state);
									}
								} else {
									this.restore(state);
								}
							} else {
								this.restore(state);
							}
						}
						if(cond == null) {
							throw new js__$Boot_HaxeError("SyntaxError: Unexpected if!");
						}
						if(itrue == null) {
							throw new js__$Boot_HaxeError("SyntaxError: Unexpected end of input!");
						}
						return tannus_nore_Token.TIf(cond,itrue,ifalse);
					} else {
						throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(then) + "!");
					}
				} else {
					throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(then) + "!");
				}
			} else {
				throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(then) + "!");
			}
		} else {
			throw new js__$Boot_HaxeError("FuckUpError: \"" + kw + "\" is not a keyword");
		}
	}
	,readGroup: function(start,end) {
		var c = this.bytes.peek();
		if(c == start) {
			var level = 1;
			var this1 = new tannus_io_impl_NodeBinary(0,new Buffer(0));
			var data = this1;
			this.bytes.pop();
			while(level > 0) {
				c = this.bytes.peek();
				if(c == start) {
					++level;
				} else if(c == end) {
					--level;
				}
				if(level > 0) {
					data.push(c);
				}
				this.bytes.pop();
			}
			return data;
		}
		var this2 = new tannus_io_impl_NodeBinary(0,new Buffer(0));
		return this2;
	}
	,sub: function(s) {
		var state = this.save();
		var _it = this.inTernary;
		var result = this.lex(s);
		this.restore(state);
		this.inTernary = _it;
		return result;
	}
	,reset: function() {
		this.tokens = [];
		this.canCall = false;
		this.inTernary = false;
		var this1 = new tannus_io_impl_NodeBinary(0,new Buffer(0));
		this.bytes = new tannus_io_ByteStack(this1);
	}
	,save: function() {
		return { tokens : this.tokens.slice(), "bytes" : this.bytes.copy(), "canCall" : this.canCall};
	}
	,restore: function(s) {
		this.bytes = s.bytes;
		this.tokens = s.tokens;
		this.canCall = s.canCall;
	}
	,next: function() {
		return this.bytes.peek();
	}
	,advance: function() {
		return this.bytes.pop();
	}
	,last: function() {
		return this.tokens.pop();
	}
	,isIdent: function(c) {
		if(!(c >= 48 && c <= 57 || (c >= 65 && c <= 90 || c >= 97 && c <= 122) || c == 46)) {
			return c == 95;
		} else {
			return true;
		}
	}
	,isOpChar: function(c) {
		return Lambda.has(["=","!","<",">","$","^"],String.fromCharCode(c));
	}
	,isOperator: function(op) {
		return Lambda.has(this.operators,op);
	}
	,isKeyword: function(id) {
		return Lambda.has(["if"],id.toLowerCase());
	}
	,get_end: function() {
		return this.bytes.get_empty();
	}
	,bytes: null
	,tokens: null
	,operators: null
	,canCall: null
	,inTernary: null
	,__class__: tannus_nore_Lexer
	,__properties__: {get_end:"get_end"}
};
var tannus_nore_ORegEx = function() { };
$hxClasses["tannus.nore.ORegEx"] = tannus_nore_ORegEx;
tannus_nore_ORegEx.__name__ = ["tannus","nore","ORegEx"];
tannus_nore_ORegEx.compile = function(sel,pred) {
	var comp = new tannus_nore_Compiler();
	if(pred != null) {
		pred(comp);
	}
	return comp.compileString(sel);
};
var tannus_nore_Parser = function() {
	this.reset();
};
$hxClasses["tannus.nore.Parser"] = tannus_nore_Parser;
tannus_nore_Parser.__name__ = ["tannus","nore","Parser"];
tannus_nore_Parser.parseTokens = function(tree) {
	return new tannus_nore_Parser().parse(tree);
};
tannus_nore_Parser.parseString = function(s) {
	var tree = new tannus_nore_Lexer().lex(s);
	return new tannus_nore_Parser().parse(tree);
};
tannus_nore_Parser.prototype = {
	parse: function(tokenList) {
		this.reset();
		this.tokens = new tannus_ds_Stack(tokenList);
		while(!this.tokens.get_empty()) this.tree.push(this.nextCheck());
		return this.tree;
	}
	,nextCheck: function() {
		var t = this.tokens.pop();
		switch(t[1]) {
		case 0:
			if(t[2][1] == 0) {
				var type = t[2][2];
				return tannus_nore_Check.TypeCheck(type);
			} else {
				throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(t) + "!");
			}
			break;
		case 2:
			var group = t[2];
			switch(group.length) {
			case 1:
				if(group[0][1] == 0) {
					if(group[0][2][1] == 0) {
						var name = group[0][2][2];
						return tannus_nore_Check.FieldExistsCheck(name);
					} else {
						throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
					}
				} else {
					throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
				}
				break;
			case 3:
				if(group[0][1] == 0) {
					if(group[0][2][1] == 0) {
						if(group[1][1] == 1) {
							switch(group[1][2]) {
							case "=>":
								if(group[2][1] == 3) {
									var _hx_tmp;
									var name1 = group[0][2][2];
									_hx_tmp = this.sub(group[2][2]);
									var checks = _hx_tmp;
									return tannus_nore_Check.FieldValueBlockCheck(name1,checks);
								} else if(group[0][2][2] == "this") {
									var op = group[1][2];
									var valueToken = group[2];
									return tannus_nore_Check.NestedCheck(op,tannus_nore_ValueTools.toValue(valueToken));
								} else {
									var op1 = group[1][2];
									var valueToken1 = group[2];
									var name2 = group[0][2][2];
									return tannus_nore_Check.FieldValueCheck(op1,name2,tannus_nore_ValueTools.toValue(valueToken1));
								}
								break;
							case "is":
								if(group[2][1] == 0) {
									if(group[2][2][1] == 0) {
										var name3 = group[0][2][2];
										var type1 = group[2][2][2];
										return tannus_nore_Check.FieldValueTypeCheck(name3,type1,false);
									} else if(group[0][2][2] == "this") {
										var op2 = group[1][2];
										var valueToken2 = group[2];
										return tannus_nore_Check.NestedCheck(op2,tannus_nore_ValueTools.toValue(valueToken2));
									} else {
										var op3 = group[1][2];
										var valueToken3 = group[2];
										var name4 = group[0][2][2];
										return tannus_nore_Check.FieldValueCheck(op3,name4,tannus_nore_ValueTools.toValue(valueToken3));
									}
								} else if(group[0][2][2] == "this") {
									var op4 = group[1][2];
									var valueToken4 = group[2];
									return tannus_nore_Check.NestedCheck(op4,tannus_nore_ValueTools.toValue(valueToken4));
								} else {
									var op5 = group[1][2];
									var valueToken5 = group[2];
									var name5 = group[0][2][2];
									return tannus_nore_Check.FieldValueCheck(op5,name5,tannus_nore_ValueTools.toValue(valueToken5));
								}
								break;
							default:
								if(group[0][2][2] == "this") {
									var valueToken6 = group[2];
									var op6 = group[1][2];
									return tannus_nore_Check.NestedCheck(op6,tannus_nore_ValueTools.toValue(valueToken6));
								} else {
									var valueToken7 = group[2];
									var op7 = group[1][2];
									var name6 = group[0][2][2];
									return tannus_nore_Check.FieldValueCheck(op7,name6,tannus_nore_ValueTools.toValue(valueToken7));
								}
							}
						} else {
							throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
						}
					} else {
						throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
					}
				} else {
					throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
				}
				break;
			case 4:
				if(group[0][1] == 0) {
					if(group[0][2][1] == 0) {
						if(group[1][1] == 1) {
							if(group[1][2] == "is") {
								if(group[2][1] == 12) {
									if(group[3][1] == 0) {
										if(group[3][2][1] == 0) {
											var name7 = group[0][2][2];
											var type2 = group[3][2][2];
											return tannus_nore_Check.FieldValueTypeCheck(name7,type2,true);
										} else {
											throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
										}
									} else {
										throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
									}
								} else {
									throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
								}
							} else {
								throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
							}
						} else {
							throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
						}
					} else {
						throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
					}
				} else {
					throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
			}
			break;
		case 3:
			var group1 = t[2];
			var subChecks = this.sub(group1);
			return tannus_nore_Check.GroupCheck(subChecks);
		case 4:
			var group2 = t[2];
			var subChecks1 = this.sub(group2);
			return tannus_nore_Check.GroupCheck(subChecks1);
		case 7:
			var argTokens = t[3];
			var name8 = t[2];
			var _g = [];
			var _g1 = 0;
			while(_g1 < argTokens.length) {
				var t1 = argTokens[_g1];
				++_g1;
				_g.push(tannus_nore_ValueTools.toValue(t1));
			}
			var args = _g;
			return tannus_nore_Check.HelperCheck(name8,args);
		case 8:
			var telse = t[4];
			var tthen = t[3];
			var ttest = t[2];
			var toks = [ttest,tthen];
			if(telse != null) {
				toks.push(telse);
			}
			var chl = this.sub(toks);
			return Type.createEnum(tannus_nore_Check,"TernaryCheck",chl);
		case 10:
			var left = this.tree.pop();
			var right = this.nextCheck();
			if(left == null) {
				var r = right;
				throw new js__$Boot_HaxeError("SyntaxError: Unexpected \"|\"!");
			} else if(right == null) {
				var l = left;
				throw new js__$Boot_HaxeError("SyntaxError: Unexpected end of input!");
			} else {
				var l1 = left;
				var r1 = right;
				return tannus_nore_Check.EitherCheck(left,right);
			}
			break;
		case 11:
			var check = this.nextCheck();
			if(check != null) {
				return tannus_nore_Check.InvertedCheck(check);
			} else {
				throw new js__$Boot_HaxeError("SyntaxError: Unexpected end of input!");
			}
			break;
		case 12:
			t = this.tokens.pop();
			if(t[1] == 0) {
				if(t[2][1] == 0) {
					var type3 = t[2][2];
					return tannus_nore_Check.LooseTypeCheck(type3);
				} else {
					throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(t) + "!");
				}
			} else {
				throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(t) + "!");
			}
			break;
		case 13:
			t = this.tokens.pop();
			if(t[1] == 0) {
				if(t[2][1] == 0) {
					var type4 = t[2][2];
					return tannus_nore_Check.ShortTypeCheck(type4);
				} else {
					throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(t) + "!");
				}
			} else {
				throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(t) + "!");
			}
			break;
		default:
			throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(t) + "!");
		}
	}
	,reset: function() {
		this.tokens = new tannus_ds_Stack();
		this.tree = [];
	}
	,token: function() {
		return this.tokens.pop();
	}
	,last: function() {
		return this.tree.pop();
	}
	,save: function() {
		return { "tokens" : this.tokens.copy(), "tree" : this.tree.slice()};
	}
	,restore: function(s) {
		this.tokens = s.tokens;
		this.tree = s.tree;
	}
	,sub: function(toks) {
		var child = new tannus_nore_Parser();
		return child.parse(toks);
	}
	,get_end: function() {
		return this.tokens.get_empty();
	}
	,tokens: null
	,tree: null
	,__class__: tannus_nore_Parser
	,__properties__: {get_end:"get_end"}
};
var tannus_nore__$Selector_Selector_$Impl_$ = {};
$hxClasses["tannus.nore._Selector.Selector_Impl_"] = tannus_nore__$Selector_Selector_$Impl_$;
tannus_nore__$Selector_Selector_$Impl_$.__name__ = ["tannus","nore","_Selector","Selector_Impl_"];
tannus_nore__$Selector_Selector_$Impl_$._new = function(s) {
	var this1 = new tannus_nore_CSelector(s);
	return this1;
};
tannus_nore__$Selector_Selector_$Impl_$.invert = function(this1) {
	return this1.invert();
};
tannus_nore__$Selector_Selector_$Impl_$.sum = function(this1,other) {
	return this1.sum(other);
};
tannus_nore__$Selector_Selector_$Impl_$.diff = function(this1,other) {
	return this1.diff(other);
};
tannus_nore__$Selector_Selector_$Impl_$.toPredicate = function(this1) {
	return this1.f;
};
tannus_nore__$Selector_Selector_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_nore__$Selector_Selector_$Impl_$.fromString = function(s) {
	var this1 = new tannus_nore_CSelector(s);
	return this1;
};
var tannus_nore_CSelector = function(sel) {
	this.selector = sel;
	this.f = tannus_nore_ORegEx.compile(sel);
};
$hxClasses["tannus.nore.CSelector"] = tannus_nore_CSelector;
tannus_nore_CSelector.__name__ = ["tannus","nore","CSelector"];
tannus_nore_CSelector.prototype = {
	test: function(o) {
		return this.f(o);
	}
	,filter: function(list) {
		return list.filter(this.f);
	}
	,clone: function() {
		var this1 = new tannus_nore_CSelector(this.selector);
		return this1;
	}
	,toString: function() {
		return "Selector(" + this.selector + ")";
	}
	,invert: function() {
		var this1 = new tannus_nore_CSelector("!(" + this.selector + ")");
		return this1;
	}
	,sum: function(other) {
		var this1 = new tannus_nore_CSelector(this.selector + other.selector);
		return this1;
	}
	,diff: function(other) {
		var this1 = new tannus_nore_CSelector(this.selector + other.invert().selector);
		return this1;
	}
	,selector: null
	,f: null
	,__class__: tannus_nore_CSelector
};
var tannus_nore_Token = $hxClasses["tannus.nore.Token"] = { __ename__ : ["tannus","nore","Token"], __constructs__ : ["TConst","TOperator","TBrackets","TBoxBrackets","TGroup","TTuple","TCall","THelper","TIf","TComma","TOr","TNot","TApprox","TDoubleDot"] };
tannus_nore_Token.TConst = function(c) { var $x = ["TConst",0,c]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TOperator = function(op) { var $x = ["TOperator",1,op]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TBrackets = function(tree) { var $x = ["TBrackets",2,tree]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TBoxBrackets = function(tree) { var $x = ["TBoxBrackets",3,tree]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TGroup = function(tree) { var $x = ["TGroup",4,tree]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TTuple = function(values) { var $x = ["TTuple",5,values]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TCall = function(id,args) { var $x = ["TCall",6,id,args]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.THelper = function(id,args) { var $x = ["THelper",7,id,args]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TIf = function(test,then,otherwise) { var $x = ["TIf",8,test,then,otherwise]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TComma = ["TComma",9];
tannus_nore_Token.TComma.toString = $estr;
tannus_nore_Token.TComma.__enum__ = tannus_nore_Token;
tannus_nore_Token.TOr = ["TOr",10];
tannus_nore_Token.TOr.toString = $estr;
tannus_nore_Token.TOr.__enum__ = tannus_nore_Token;
tannus_nore_Token.TNot = ["TNot",11];
tannus_nore_Token.TNot.toString = $estr;
tannus_nore_Token.TNot.__enum__ = tannus_nore_Token;
tannus_nore_Token.TApprox = ["TApprox",12];
tannus_nore_Token.TApprox.toString = $estr;
tannus_nore_Token.TApprox.__enum__ = tannus_nore_Token;
tannus_nore_Token.TDoubleDot = ["TDoubleDot",13];
tannus_nore_Token.TDoubleDot.toString = $estr;
tannus_nore_Token.TDoubleDot.__enum__ = tannus_nore_Token;
var tannus_nore_Const = $hxClasses["tannus.nore.Const"] = { __ename__ : ["tannus","nore","Const"], __constructs__ : ["CIdent","CString","CReference","CNumber"] };
tannus_nore_Const.CIdent = function(id) { var $x = ["CIdent",0,id]; $x.__enum__ = tannus_nore_Const; $x.toString = $estr; return $x; };
tannus_nore_Const.CString = function(s,quotes) { var $x = ["CString",1,s,quotes]; $x.__enum__ = tannus_nore_Const; $x.toString = $estr; return $x; };
tannus_nore_Const.CReference = function(name) { var $x = ["CReference",2,name]; $x.__enum__ = tannus_nore_Const; $x.toString = $estr; return $x; };
tannus_nore_Const.CNumber = function(n) { var $x = ["CNumber",3,n]; $x.__enum__ = tannus_nore_Const; $x.toString = $estr; return $x; };
var tannus_nore_Value = $hxClasses["tannus.nore.Value"] = { __ename__ : ["tannus","nore","Value"], __constructs__ : ["VString","VNumber","VArray","VField"] };
tannus_nore_Value.VString = function(str) { var $x = ["VString",0,str]; $x.__enum__ = tannus_nore_Value; $x.toString = $estr; return $x; };
tannus_nore_Value.VNumber = function(num) { var $x = ["VNumber",1,num]; $x.__enum__ = tannus_nore_Value; $x.toString = $estr; return $x; };
tannus_nore_Value.VArray = function(values) { var $x = ["VArray",2,values]; $x.__enum__ = tannus_nore_Value; $x.toString = $estr; return $x; };
tannus_nore_Value.VField = function(name) { var $x = ["VField",3,name]; $x.__enum__ = tannus_nore_Value; $x.toString = $estr; return $x; };
var tannus_nore_ValueTools = function() { };
$hxClasses["tannus.nore.ValueTools"] = tannus_nore_ValueTools;
tannus_nore_ValueTools.__name__ = ["tannus","nore","ValueTools"];
tannus_nore_ValueTools.toValue = function(t) {
	switch(t[1]) {
	case 0:
		switch(t[2][1]) {
		case 1:
			var str = t[2][2];
			return tannus_nore_Value.VString(str);
		case 2:
			var name = t[2][2];
			return tannus_nore_Value.VField(name);
		case 3:
			var num = t[2][2];
			return tannus_nore_Value.VNumber(num);
		default:
			throw new js__$Boot_HaxeError("ValueError: Cannot get a Value from " + Std.string(t) + "!");
		}
		break;
	case 5:
		var vals = t[2];
		var values = vals.map(tannus_nore_ValueTools.toValue);
		return tannus_nore_Value.VArray(values);
	default:
		throw new js__$Boot_HaxeError("ValueError: Cannot get a Value from " + Std.string(t) + "!");
	}
};
tannus_nore_ValueTools.haxeValue = function(val,tools,o) {
	switch(val[1]) {
	case 0:
		var str = val[2];
		var this1 = function() {
			return str;
		};
		return this1;
	case 1:
		var num = val[2];
		var this2 = function() {
			return num;
		};
		return this2;
	case 2:
		var values = val[2];
		var this3 = function() {
			var _g = [];
			var _g1 = 0;
			while(_g1 < values.length) {
				var v = values[_g1];
				++_g1;
				_g.push(tannus_nore_ValueTools.haxeValue(v,tools,o));
			}
			return _g;
		};
		return this3;
	case 3:
		var name = val[2];
		var this4 = function() {
			return tools.get(o,name);
		};
		return this4;
	}
};
var tannus_sys_CDirectory = function(path,create) {
	if(create == null) {
		create = false;
	}
	this._path = path;
	if(tannus_sys_node_NodeFSModule.existsSync(this._path.s)) {
		if(!tannus_sys_node_NodeFileSystem.isDirectory(this._path.s)) {
			throw new js__$Boot_HaxeError("IOError: " + path.s + " is not a Directory!");
		}
	} else if(create) {
		tannus_sys_node_NodeFSModule.mkdirSync(this._path.s);
	} else {
		throw new js__$Boot_HaxeError("IOError: " + path.s + " is not a File or a Directory!");
	}
};
$hxClasses["tannus.sys.CDirectory"] = tannus_sys_CDirectory;
tannus_sys_CDirectory.__name__ = ["tannus","sys","CDirectory"];
tannus_sys_CDirectory.prototype = {
	getEntry: function(name) {
		if(this.hasEntry(name)) {
			return tannus_sys__$FSEntry_FSEntry_$Impl_$.fromPath(tannus_sys_CPath.join([this._path,tannus_sys__$Path_Path_$Impl_$.fromString(name)]));
		} else {
			return null;
		}
	}
	,hasEntry: function(name) {
		var pp = tannus_sys_CPath.join([this._path,tannus_sys__$Path_Path_$Impl_$.fromString(name)]);
		if(this._path.get_absolute()) {
			pp = pp.absolutize();
		}
		return tannus_sys_node_NodeFSModule.existsSync(pp.s);
	}
	,file: function(name) {
		var this1 = new tannus_sys_CFile(tannus_sys__$Path_Path_$Impl_$.fromString((this._path.get_absolute() ? "/" : "") + this._path.s + name));
		return this1;
	}
	,dir: function(name,create) {
		if(create == null) {
			create = false;
		}
		var this1 = new tannus_sys_CDirectory(tannus_sys__$Path_Path_$Impl_$.fromString((this._path.get_absolute() ? "/" : "") + tannus_sys_CPath.join([this._path,tannus_sys__$Path_Path_$Impl_$.fromString(name)]).s),create);
		return this1;
	}
	,iterator: function() {
		return new tannus_sys_DirIter(this);
	}
	,walk: function(f) {
		var _g = new tannus_sys_DirIter(this);
		while(_g.ei.hasNext()) {
			var e = _g.next();
			var _g1 = e;
			switch(_g1[1]) {
			case 0:
				f(e);
				break;
			case 1:
				var dir = _g1[2];
				f(e);
				dir.walk(f);
				break;
			}
		}
	}
	,gather: function(tester) {
		var results = [];
		var _g = 0;
		var _g1 = this.get_entries();
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var _g2 = e;
			switch(_g2[1]) {
			case 0:
				var f = _g2[2];
				if(tester == null) {
					results.push(f);
				} else if(tester(f)) {
					results.push(f);
				}
				break;
			case 1:
				var d = _g2[2];
				var sub = d.gather(tester);
				results = results.concat(sub);
				break;
			}
		}
		return results;
	}
	,search: function(pattern,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(!recursive) {
			var results = [];
			var _g = 0;
			var _g1 = this.get_entries();
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				var tmp;
				if(tannus_sys__$FSEntry_FSEntry_$Impl_$.isFile(e)) {
					var tmp1 = tannus_sys__$FSEntry_FSEntry_$Impl_$.get_path(e).s;
					tmp = pattern.test(tmp1);
				} else {
					tmp = false;
				}
				if(tmp) {
					results.push(tannus_sys__$FSEntry_FSEntry_$Impl_$.file(e));
				}
			}
			return results;
		} else {
			return this.gather(function(f) {
				return pattern.test(f._path.s);
			});
		}
	}
	,'delete': function(force) {
		if(force == null) {
			force = false;
		}
		if(!force) {
			tannus_sys_node_NodeFSModule.rmdirSync(this._path.s);
		} else {
			tannus_sys_node_NodeFSModule.rmdirSync(this._path.s);
		}
	}
	,rename: function(npath) {
		tannus_sys_node_NodeFSModule.renameSync(this._path.s,npath.s);
		this._path = npath;
	}
	,toString: function() {
		return "Directory(" + this._path.s + ")";
	}
	,get_path: function() {
		return this._path;
	}
	,get_exists: function() {
		return tannus_sys_node_NodeFSModule.existsSync(this._path.s);
	}
	,get_subpaths: function() {
		var _gthis = this;
		return tannus_sys_node_NodeFSModule.readdirSync(this._path.get_str()).map(tannus_sys__$Path_Path_$Impl_$.fromString).map(function(sp) {
			sp.set_directory(_gthis._path);
			return sp;
		});
	}
	,get_entries: function() {
		return this.get_subpaths().map(tannus_sys__$FSEntry_FSEntry_$Impl_$.fromPath);
	}
	,_path: null
	,__class__: tannus_sys_CDirectory
	,__properties__: {get_entries:"get_entries",get_subpaths:"get_subpaths",get_exists:"get_exists",get_path:"get_path"}
};
var tannus_sys_DirIter = function(cd) {
	var this1 = new tannus_sys_CPath(cd._path.s);
	this.pp = this1;
	this.ei = HxOverrides.iter(tannus_sys_node_NodeFSModule.readdirSync(this.pp.get_str()));
};
$hxClasses["tannus.sys.DirIter"] = tannus_sys_DirIter;
tannus_sys_DirIter.__name__ = ["tannus","sys","DirIter"];
tannus_sys_DirIter.prototype = {
	hasNext: function() {
		return this.ei.hasNext();
	}
	,next: function() {
		var epath = tannus_sys_CPath.join([this.pp,tannus_sys__$Path_Path_$Impl_$.fromString(this.ei.next())]);
		return tannus_sys__$FSEntry_FSEntry_$Impl_$.fromPath(epath);
	}
	,ei: null
	,pp: null
	,__class__: tannus_sys_DirIter
};
var tannus_sys__$Directory_Directory_$Impl_$ = {};
$hxClasses["tannus.sys._Directory.Directory_Impl_"] = tannus_sys__$Directory_Directory_$Impl_$;
tannus_sys__$Directory_Directory_$Impl_$.__name__ = ["tannus","sys","_Directory","Directory_Impl_"];
tannus_sys__$Directory_Directory_$Impl_$._new = function(p,create) {
	if(create == null) {
		create = false;
	}
	var this1 = new tannus_sys_CDirectory(p,create);
	return this1;
};
tannus_sys__$Directory_Directory_$Impl_$.get = function(this1,name) {
	if(this1.hasEntry(name)) {
		return tannus_sys__$FSEntry_FSEntry_$Impl_$.fromPath(tannus_sys_CPath.join([this1._path,tannus_sys__$Path_Path_$Impl_$.fromString(name)]));
	} else {
		return null;
	}
};
tannus_sys__$Directory_Directory_$Impl_$.fromPath = function(path) {
	var this1 = new tannus_sys_CDirectory(path,false);
	return this1;
};
tannus_sys__$Directory_Directory_$Impl_$.fromString = function(s) {
	var this1 = new tannus_sys_CDirectory(tannus_sys__$Path_Path_$Impl_$.fromString(s),false);
	return this1;
};
var tannus_sys__$FSEntry_FSEntry_$Impl_$ = {};
$hxClasses["tannus.sys._FSEntry.FSEntry_Impl_"] = tannus_sys__$FSEntry_FSEntry_$Impl_$;
tannus_sys__$FSEntry_FSEntry_$Impl_$.__name__ = ["tannus","sys","_FSEntry","FSEntry_Impl_"];
tannus_sys__$FSEntry_FSEntry_$Impl_$.__properties__ = {get_name:"get_name",get_path:"get_path",get_type:"get_type"}
tannus_sys__$FSEntry_FSEntry_$Impl_$._new = function(et) {
	var this1 = et;
	return this1;
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.get_type = function(this1) {
	return this1;
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.get_path = function(this1) {
	var _g = this1;
	switch(_g[1]) {
	case 0:
		var f = _g[2];
		return f._path;
	case 1:
		var f1 = _g[2];
		return f1._path;
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.get_name = function(this1) {
	return tannus_sys__$FSEntry_FSEntry_$Impl_$.get_path(this1).get_name();
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.rename = function(this1,ndir) {
	var _g = this1;
	switch(_g[1]) {
	case 0:
		var f = _g[2];
		f.set_path(ndir);
		break;
	case 1:
		var f1 = _g[2];
		f1.rename(ndir);
		break;
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$["delete"] = function(this1) {
	var _g = this1;
	switch(_g[1]) {
	case 0:
		var f = _g[2];
		tannus_sys_node_NodeFileSystem.deleteFile(f._path.s);
		break;
	case 1:
		var f1 = _g[2];
		f1["delete"]();
		break;
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.file = function(this1) {
	var _g = this1;
	switch(_g[1]) {
	case 0:
		var f = _g[2];
		return f;
	case 1:
		var d = _g[2];
		throw new js__$Boot_HaxeError("IOError: Cannot cast a Directory to a File!");
		break;
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.isFile = function(this1) {
	var _g = this1;
	switch(_g[1]) {
	case 0:
		var f = _g[2];
		return true;
	case 1:
		var d = _g[2];
		return false;
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.isDirectory = function(this1) {
	var _g = this1;
	switch(_g[1]) {
	case 0:
		var f = _g[2];
		return false;
	case 1:
		var d = _g[2];
		return true;
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.folder = function(this1) {
	var _g = this1;
	switch(_g[1]) {
	case 0:
		var f = _g[2];
		throw new js__$Boot_HaxeError("IOError: Cannot cast a File to a Directory!");
		break;
	case 1:
		var d = _g[2];
		return d;
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.fromPath = function(p) {
	if(tannus_sys_node_NodeFSModule.existsSync(p.s)) {
		if(tannus_sys_node_NodeFileSystem.isDirectory(p.s)) {
			var this1 = new tannus_sys_CDirectory(p,false);
			var this2 = tannus_sys_FSEntryType.Folder(this1);
			return this2;
		} else {
			var this3 = new tannus_sys_CFile(p);
			var this4 = tannus_sys_FSEntryType.File(this3);
			return this4;
		}
	} else {
		var err = "IOError: Cannot create FSEntry instance for non-existent Path(\"" + p.s + "\")";
		console.log(err);
		throw new js__$Boot_HaxeError(err);
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.fromString = function(s) {
	return tannus_sys__$FSEntry_FSEntry_$Impl_$.fromPath(tannus_sys__$Path_Path_$Impl_$.fromString(s));
};
var tannus_sys_FSEntryType = $hxClasses["tannus.sys.FSEntryType"] = { __ename__ : ["tannus","sys","FSEntryType"], __constructs__ : ["File","Folder"] };
tannus_sys_FSEntryType.File = function(f) { var $x = ["File",0,f]; $x.__enum__ = tannus_sys_FSEntryType; $x.toString = $estr; return $x; };
tannus_sys_FSEntryType.Folder = function(d) { var $x = ["Folder",1,d]; $x.__enum__ = tannus_sys_FSEntryType; $x.toString = $estr; return $x; };
var tannus_sys__$File_File_$Impl_$ = {};
$hxClasses["tannus.sys._File.File_Impl_"] = tannus_sys__$File_File_$Impl_$;
tannus_sys__$File_File_$Impl_$.__name__ = ["tannus","sys","_File","File_Impl_"];
tannus_sys__$File_File_$Impl_$._new = function(p) {
	var this1 = new tannus_sys_CFile(p);
	return this1;
};
tannus_sys__$File_File_$Impl_$.fromString = function(p) {
	var this1 = new tannus_sys_CFile(tannus_sys__$Path_Path_$Impl_$.fromString(p));
	return this1;
};
tannus_sys__$File_File_$Impl_$.fromPath = function(p) {
	var this1 = new tannus_sys_CFile(p);
	return this1;
};
tannus_sys__$File_File_$Impl_$.fromByteArray = function(p) {
	var this1 = new tannus_sys_CFile(tannus_sys__$Path_Path_$Impl_$.fromString(p.toString()));
	return this1;
};
var tannus_sys_CFile = function(p) {
	this._path = p;
	if(tannus_sys_node_NodeFSModule.existsSync(this._path.s) && tannus_sys_node_NodeFileSystem.isDirectory(this._path.s)) {
		throw new js__$Boot_HaxeError("FileError: " + ("\"" + this._path.s + "\" is a directory!"));
	}
};
$hxClasses["tannus.sys.CFile"] = tannus_sys_CFile;
tannus_sys_CFile.__name__ = ["tannus","sys","CFile"];
tannus_sys_CFile.ferror = function(msg) {
	throw new js__$Boot_HaxeError("FileError: " + msg);
};
tannus_sys_CFile.prototype = {
	read: function() {
		return tannus_sys_node_NodeFileSystem.read(this._path.s);
	}
	,write: function(data) {
		tannus_sys_node_NodeFileSystem.write(this._path.s,data);
	}
	,append: function(data) {
		tannus_sys_node_NodeFileSystem.append(this._path.s,data);
	}
	,writeString: function(s) {
		tannus_sys_node_NodeFileSystem.write(this._path.s,new tannus_io_impl_NodeBinary(s.length,new Buffer(s)));
	}
	,rename: function(newpath) {
		this.set_path(newpath);
	}
	,'delete': function() {
		tannus_sys_node_NodeFileSystem.deleteFile(this._path.s);
	}
	,toString: function() {
		return "File(" + this._path.s + ")";
	}
	,lines: function(list) {
		if(list == null) {
			var res = [];
			var buf = "";
			var data = tannus_sys_node_NodeFileSystem.read(this._path.s);
			var $byte = data.iterator();
			while($byte.hasNext()) {
				var byte1 = $byte.next();
				if(byte1 == 10 || byte1 == 13) {
					res.push(buf);
					buf = "";
				} else {
					buf += String.fromCharCode(byte1);
				}
			}
			if(buf.length != 0) {
				res.push(buf);
			}
			return res;
		} else {
			var s = list.join("\n");
			var data1 = new tannus_io_impl_NodeBinary(s.length,new Buffer(s));
			tannus_sys_node_NodeFileSystem.write(this._path.s,data1);
			return list;
		}
	}
	,get_exists: function() {
		return tannus_sys_node_NodeFSModule.existsSync(this._path.s);
	}
	,get_size: function() {
		var stats = tannus_sys_node_NodeFileSystem.stat(this._path.s);
		return stats.size;
	}
	,get_data: function() {
		return tannus_sys_node_NodeFileSystem.read(this._path.s);
	}
	,set_data: function(nd) {
		tannus_sys_node_NodeFileSystem.write(this._path.s,nd);
		return tannus_sys_node_NodeFileSystem.read(this._path.s);
	}
	,get_content: function() {
		var f = this;
		var this1 = function() {
			return f;
		};
		var this2 = function(v) {
			f = v;
			return f;
		};
		var this3 = new tannus_io__$Pointer_Ref(this1,this2);
		var this4 = this3;
		return this4;
	}
	,get_path: function() {
		return this._path;
	}
	,set_path: function(np) {
		tannus_sys_node_NodeFSModule.renameSync(this._path.s,np.s);
		return this._path = np;
	}
	,get_directory: function() {
		var this1 = new tannus_sys_CDirectory(this._path.get_directory(),false);
		return this1;
	}
	,get_input: function() {
		var inp = new haxe_io_BytesInput(this.get_data().toBytes());
		return inp;
	}
	,get_stats: function() {
		return tannus_sys_node_NodeFileSystem.stat(this._path.s);
	}
	,_path: null
	,__class__: tannus_sys_CFile
	,__properties__: {get_stats:"get_stats",get_input:"get_input",get_directory:"get_directory",set_path:"set_path",get_path:"get_path",get_content:"get_content",set_data:"set_data",get_data:"get_data",get_size:"get_size",get_exists:"get_exists"}
};
var tannus_sys__$GlobStar_GlobStar_$Impl_$ = {};
$hxClasses["tannus.sys._GlobStar.GlobStar_Impl_"] = tannus_sys__$GlobStar_GlobStar_$Impl_$;
tannus_sys__$GlobStar_GlobStar_$Impl_$.__name__ = ["tannus","sys","_GlobStar","GlobStar_Impl_"];
tannus_sys__$GlobStar_GlobStar_$Impl_$._new = function(s,flags) {
	if(flags == null) {
		flags = "";
	}
	var this1 = new tannus_sys_CGlobStar(s,flags);
	return this1;
};
tannus_sys__$GlobStar_GlobStar_$Impl_$.fromString = function(s) {
	var this1 = new tannus_sys_CGlobStar(s,"");
	return this1;
};
var tannus_sys_CGlobStar = $hx_exports["globstar"] = function(pat,flags) {
	this.spat = pat;
	var data = tannus_sys_gs_Printer.compile(pat,flags);
	this.pattern = data.regex;
	this.pind = data.params;
};
$hxClasses["tannus.sys.CGlobStar"] = tannus_sys_CGlobStar;
tannus_sys_CGlobStar.__name__ = ["tannus","sys","CGlobStar"];
tannus_sys_CGlobStar.prototype = {
	test: function(path) {
		return this.pattern.match(path);
	}
	,match: function(s) {
		var dat = tannus_io__$RegEx_RegEx_$Impl_$.matches(this.pattern,s);
		if(dat.length == 0) {
			return null;
		} else {
			var m = dat[0];
			var res = { };
			var k = this.pind.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				var _this = this.pind;
				var i = __map_reserved[k1] != null ? _this.getReserved(k1) : _this.h[k1];
				var value = m[i + 1];
				var tmp;
				var tmp1;
				if(res.__properties__) {
					tmp = res.__properties__["set_" + k1];
					tmp1 = tmp;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					res[tmp](value);
				} else {
					res[k1] = value;
				}
				var tmp2;
				if(res == null) {
					null;
				} else {
					var tmp3;
					if(res.__properties__) {
						tmp2 = res.__properties__["get_" + k1];
						tmp3 = tmp2;
					} else {
						tmp3 = false;
					}
					if(tmp3) {
						res[tmp2]();
					}
				}
			}
			return res;
		}
	}
	,toString: function() {
		var s = "GlobStar(" + this.spat + " => " + this.patternString() + ")";
		return s;
	}
	,patternString: function() {
		return this.pattern.r.toString();
	}
	,spat: null
	,pattern: null
	,pind: null
	,printer: null
	,__class__: tannus_sys_CGlobStar
};
var tannus_sys_Token = $hxClasses["tannus.sys.Token"] = { __ename__ : ["tannus","sys","Token"], __constructs__ : ["TLiteral","TExpan"] };
tannus_sys_Token.TLiteral = function(s) { var $x = ["TLiteral",0,s]; $x.__enum__ = tannus_sys_Token; $x.toString = $estr; return $x; };
tannus_sys_Token.TExpan = function(bits) { var $x = ["TExpan",1,bits]; $x.__enum__ = tannus_sys_Token; $x.toString = $estr; return $x; };
var tannus_sys__$Mime_Mime_$Impl_$ = {};
$hxClasses["tannus.sys._Mime.Mime_Impl_"] = tannus_sys__$Mime_Mime_$Impl_$;
tannus_sys__$Mime_Mime_$Impl_$.__name__ = ["tannus","sys","_Mime","Mime_Impl_"];
tannus_sys__$Mime_Mime_$Impl_$.__properties__ = {get_subtype:"get_subtype",get_type:"get_type"}
tannus_sys__$Mime_Mime_$Impl_$._new = function(m) {
	var this1 = m;
	return this1;
};
tannus_sys__$Mime_Mime_$Impl_$.get_type = function(this1) {
	if(tannus_ds_StringUtils.has(this1,"/")) {
		return this1.substring(0,this1.indexOf("/"));
	} else {
		return this1;
	}
};
tannus_sys__$Mime_Mime_$Impl_$.get_subtype = function(this1) {
	var st = tannus_ds_StringUtils.has(this1,"/") ? this1.substring(this1.indexOf("/") + 1) : null;
	if(st == null) {
		return null;
	}
	return tannus_ds_StringUtils.before(tannus_ds_StringUtils.after(st,"."),"+");
};
tannus_sys__$Mime_Mime_$Impl_$.getSegments = function(this1) {
	var res = [];
	res = res.concat(this1.split("/"));
	var last;
	if(res.length == 2) {
		last = res.pop();
		var subs = last.split(".");
		res = res.concat(subs);
		last = res.pop();
		if(tannus_ds_StringUtils.has(last,"+")) {
			var suff = last.split("+");
			res = res.concat(suff);
		} else {
			res.push(last);
		}
	}
	return res;
};
tannus_sys__$Mime_Mime_$Impl_$.getMainType = function(this1) {
	if(tannus_ds_StringUtils.has(this1,"/")) {
		return this1.substring(0,this1.indexOf("/"));
	} else {
		return this1;
	}
};
tannus_sys__$Mime_Mime_$Impl_$.getSubType = function(this1) {
	if(tannus_ds_StringUtils.has(this1,"/")) {
		return this1.substring(this1.indexOf("/") + 1);
	} else {
		return null;
	}
};
tannus_sys__$Mime_Mime_$Impl_$.getTree = function(this1) {
	var st = tannus_ds_StringUtils.has(this1,"/") ? this1.substring(this1.indexOf("/") + 1) : null;
	if(st == null) {
		return null;
	} else if(tannus_ds_StringUtils.has(st,".")) {
		return st.substring(0,st.indexOf("."));
	} else {
		return null;
	}
};
var tannus_sys_Mimes = $hx_exports["tannus"]["sys"]["Mimes"] = function() { };
$hxClasses["tannus.sys.Mimes"] = tannus_sys_Mimes;
tannus_sys_Mimes.__name__ = ["tannus","sys","Mimes"];
tannus_sys_Mimes.minit = function() {
	if(!tannus_sys_Mimes.initted) {
		tannus_sys_Mimes.__init();
	}
};
tannus_sys_Mimes.getMimeType = function(ext) {
	if(!tannus_sys_Mimes.initted) {
		tannus_sys_Mimes.__init();
	}
	if(StringTools.startsWith(ext,".")) {
		ext = ext.substring(1);
	}
	var _this = tannus_sys_Mimes.extensions;
	if(__map_reserved[ext] != null ? _this.existsReserved(ext) : _this.h.hasOwnProperty(ext)) {
		var _this1 = tannus_sys_Mimes.extensions;
		if(__map_reserved[ext] != null) {
			return _this1.getReserved(ext);
		} else {
			return _this1.h[ext];
		}
	} else {
		return "application/octet-stream";
	}
};
tannus_sys_Mimes.getExtensionList = function(mime) {
	if(!tannus_sys_Mimes.initted) {
		tannus_sys_Mimes.__init();
	}
	var _this = tannus_sys_Mimes.types;
	if(__map_reserved[mime] != null ? _this.existsReserved(mime) : _this.h.hasOwnProperty(mime)) {
		var _this1 = tannus_sys_Mimes.types;
		if(__map_reserved[mime] != null) {
			return _this1.getReserved(mime);
		} else {
			return _this1.h[mime];
		}
	} else {
		return [];
	}
};
tannus_sys_Mimes.__init = function() {
	tannus_sys_Mimes.types = new haxe_ds_StringMap();
	tannus_sys_Mimes.extensions = new haxe_ds_StringMap();
	var all = Reflect.fields(tannus_sys_Mimes.primitive);
	var _g = 0;
	while(_g < all.length) {
		var ext = all[_g];
		++_g;
		var this1 = tannus_sys_Mimes.primitive;
		var tmp;
		var type;
		if(this1 == null) {
			type = null;
		} else {
			var type1;
			if(this1.__properties__) {
				tmp = this1.__properties__["get_" + ext];
				type1 = tmp;
			} else {
				type1 = false;
			}
			if(type1) {
				type = this1[tmp]();
			} else {
				type = this1[ext];
			}
		}
		var type2 = Std.string(type);
		var _this = tannus_sys_Mimes.extensions;
		if(__map_reserved[ext] != null) {
			_this.setReserved(ext,type2);
		} else {
			_this.h[ext] = type2;
		}
		var _this1 = tannus_sys_Mimes.types;
		if((__map_reserved[type2] != null ? _this1.getReserved(type2) : _this1.h[type2]) == null) {
			var this2 = tannus_sys_Mimes.types;
			var v = [];
			var _this2 = this2;
			if(__map_reserved[type2] != null) {
				_this2.setReserved(type2,v);
			} else {
				_this2.h[type2] = v;
			}
		}
		var _this3 = tannus_sys_Mimes.types;
		(__map_reserved[type2] != null ? _this3.getReserved(type2) : _this3.h[type2]).push(ext);
	}
	tannus_sys_Mimes.initted = true;
};
tannus_sys_Mimes.getTypeToExtensionsMap = function() {
	if(!tannus_sys_Mimes.initted) {
		tannus_sys_Mimes.__init();
	}
	var m = new haxe_ds_StringMap();
	var mime = tannus_sys_Mimes.types.keys();
	while(mime.hasNext()) {
		var mime1 = mime.next();
		var _this = tannus_sys_Mimes.types;
		var value = (__map_reserved[mime1] != null ? _this.getReserved(mime1) : _this.h[mime1]).slice();
		if(__map_reserved[mime1] != null) {
			m.setReserved(mime1,value);
		} else {
			m.h[mime1] = value;
		}
	}
	return m;
};
var tannus_sys__$Path_Path_$Impl_$ = {};
$hxClasses["tannus.sys._Path.Path_Impl_"] = tannus_sys__$Path_Path_$Impl_$;
tannus_sys__$Path_Path_$Impl_$.__name__ = ["tannus","sys","_Path","Path_Impl_"];
tannus_sys__$Path_Path_$Impl_$._new = function(s) {
	var this1 = new tannus_sys_CPath(s);
	return this1;
};
tannus_sys__$Path_Path_$Impl_$.sum = function(x,y) {
	var this1 = new tannus_sys_CPath(tannus_sys_CPath.join([tannus_sys__$Path_Path_$Impl_$.fromString(x.s),tannus_sys__$Path_Path_$Impl_$.fromString(y.s)]).s);
	return this1;
};
tannus_sys__$Path_Path_$Impl_$.plusPath = function(this1,other) {
	return tannus_sys_CPath.join([this1,other]);
};
tannus_sys__$Path_Path_$Impl_$.plusString = function(this1,other) {
	return tannus_sys_CPath.join([this1,tannus_sys__$Path_Path_$Impl_$.fromString(other)]);
};
tannus_sys__$Path_Path_$Impl_$.toString = function(this1) {
	return this1.s;
};
tannus_sys__$Path_Path_$Impl_$.fromString = function(s) {
	var this1 = new tannus_sys_CPath(s);
	return this1;
};
tannus_sys__$Path_Path_$Impl_$.toByteArray = function(this1) {
	var s = this1.s;
	return new tannus_io_impl_NodeBinary(s.length,new Buffer(s));
};
tannus_sys__$Path_Path_$Impl_$.fromByteArray = function(b) {
	return tannus_sys__$Path_Path_$Impl_$.fromString(b.toString());
};
var tannus_sys_CPath = function(str) {
	this.s = str;
};
$hxClasses["tannus.sys.CPath"] = tannus_sys_CPath;
tannus_sys_CPath.__name__ = ["tannus","sys","CPath"];
tannus_sys_CPath.join = function(list) {
	var bits = [];
	var resroot = list[0] != null && list[0].get_absolute();
	var _g = 0;
	while(_g < list.length) {
		var path = list[_g];
		++_g;
		bits = bits.concat(path.get_pieces());
	}
	bits = bits.filter(function(s) {
		if(s != null) {
			return s.length != 0;
		} else {
			return false;
		}
	});
	var this1 = new tannus_sys_CPath(bits.join("/"));
	var sum = this1.normalize();
	if(resroot) {
		sum = sum.absolutize();
	}
	return sum;
};
tannus_sys_CPath.sjoin = function(slist) {
	return tannus_sys_CPath.join(slist.map(function(s) {
		var this1 = new tannus_sys_CPath(s);
		return this1;
	}));
};
tannus_sys_CPath._expand = function(p) {
	var segments = p.get_pieces();
	var pieces = [];
	var _g = 0;
	while(_g < segments.length) {
		var s = segments[_g];
		++_g;
		switch(s) {
		case "":case ".":
			continue;
			break;
		case "..":
			pieces.pop();
			break;
		default:
			pieces.push(s);
		}
	}
	var result = tannus_sys_CPath.sjoin(pieces).normalize();
	return result;
};
tannus_sys_CPath.err = function(msg) {
	throw new js__$Boot_HaxeError("PathError: " + msg);
};
tannus_sys_CPath.prototype = {
	toString: function() {
		return this.s;
	}
	,normalize: function() {
		var norm = this.s;
		norm = StringTools.replace(norm.split("\\").join("/"),"//","/");
		var _root = StringTools.startsWith(norm,"/");
		if(_root) {
			norm = tannus_ds_StringUtils.after(norm,"/");
		}
		var this1 = new tannus_sys_CPath(norm);
		var r = this1;
		if(this.get_absolute()) {
			r = r.absolutize();
		}
		return r;
	}
	,absolutize: function() {
		var spath = this.s + "";
		if(!StringTools.startsWith(spath,"/")) {
			spath = "/" + spath;
		}
		var this1 = new tannus_sys_CPath(spath);
		return this1;
	}
	,expand: function() {
		var pieces = this.get_pieces();
		var res = [];
		var _g = 0;
		while(_g < pieces.length) {
			var n = pieces[_g];
			++_g;
			switch(n) {
			case "":case ".":
				break;
			case "..":
				res.pop();
				break;
			default:
				res.push(n);
			}
		}
		var this1 = new tannus_sys_CPath(res.join("/"));
		var p = this1;
		if(this.get_absolute()) {
			p = p.absolutize();
		}
		return p;
	}
	,resolve: function(other) {
		var res = tannus_sys_CPath.join([this,other]).expand();
		if(this.get_absolute()) {
			res = res.absolutize();
		}
		return res;
	}
	,relative: function(other) {
		if(this.get_absolute() && other.get_absolute()) {
			var a = this.get_pieces();
			var b = other.get_pieces();
			var keep = [];
			var diffs = 0;
			var additions = [];
			var diffhit = false;
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				var mine = a[i];
				var yurs = b[i];
				if(mine != yurs) {
					diffhit = true;
				}
				if(!diffhit) {
					keep.push(mine);
				} else {
					++diffs;
					if(yurs != null) {
						additions.push(yurs);
					}
				}
			}
			var respieces = tannus_ds_ArrayTools.times([".."],diffs).concat(additions);
			return tannus_sys_CPath.sjoin(respieces);
		} else {
			throw new js__$Boot_HaxeError("PathError: " + "Both Paths must be absolute!");
		}
	}
	,get_sdir: function() {
		return haxe_io_Path.directory(this.s);
	}
	,get_str: function() {
		return this.s;
	}
	,set_str: function(v) {
		return this.s = v;
	}
	,get_directory: function() {
		var this1 = new tannus_sys_CPath(this.get_sdir());
		return this1;
	}
	,set_directory: function(v) {
		this.s = tannus_sys_CPath.sjoin([v.s,this.get_name()]).s;
		if(v.get_absolute() && !StringTools.startsWith(this.s,"/")) {
			this.s = "/" + this.s;
		}
		return this.get_directory();
	}
	,get_name: function() {
		return haxe_io_Path.withoutDirectory(this.s);
	}
	,set_name: function(v) {
		this.s = tannus_sys_CPath.join([tannus_sys__$Path_Path_$Impl_$.fromString(this.get_sdir()),tannus_sys__$Path_Path_$Impl_$.fromString(v)]).s;
		return this.get_name();
	}
	,get_basename: function() {
		return haxe_io_Path.withoutExtension(this.s);
	}
	,set_basename: function(v) {
		this.set_name(v + ("." + this.get_extension()));
		return this.get_basename();
	}
	,get_extension: function() {
		return haxe_io_Path.extension(this.s);
	}
	,set_extension: function(v) {
		this.s = tannus_ds_StringUtils.beforeLast(this.s,".") + ("." + v);
		return this.get_extension();
	}
	,get_mime: function() {
		if(this.get_extension().length != 0) {
			var this1 = tannus_sys_Mimes.getMimeType(this.get_extension());
			return this1;
		} else {
			return null;
		}
	}
	,get_root: function() {
		return this.get_sdir().length == 0;
	}
	,get_absolute: function() {
		return haxe_io_Path.isAbsolute(this.s);
	}
	,get_pieces: function() {
		return this.s.split("/");
	}
	,set_pieces: function(v) {
		this.s = tannus_sys_CPath.sjoin(v).s;
		return this.get_pieces();
	}
	,s: null
	,__class__: tannus_sys_CPath
	,__properties__: {set_pieces:"set_pieces",get_pieces:"get_pieces",get_absolute:"get_absolute",get_root:"get_root",get_mime:"get_mime",set_extension:"set_extension",get_extension:"get_extension",set_basename:"set_basename",get_basename:"get_basename",set_name:"set_name",get_name:"get_name",set_directory:"set_directory",get_directory:"get_directory",set_str:"set_str",get_str:"get_str",get_sdir:"get_sdir"}
};
var tannus_sys_gs_Lexer = function() {
	this.reserved = [];
	var this1 = new tannus_io_impl_NodeBinary(0,new Buffer(0));
	this.buffer = new tannus_io_ByteStack(this1);
	this.tree = [];
	var set = new tannus_io_impl_NodeBinary("*{[,:<".length,new Buffer("*{[,:<"));
	this.reserved = this.reserved.concat(set.toArray());
};
$hxClasses["tannus.sys.gs.Lexer"] = tannus_sys_gs_Lexer;
tannus_sys_gs_Lexer.__name__ = ["tannus","sys","gs","Lexer"];
tannus_sys_gs_Lexer.prototype = {
	lex: function(s) {
		var this1 = new tannus_io_impl_NodeBinary(0,new Buffer(0));
		this.buffer = new tannus_io_ByteStack(this1);
		this.tree = [];
		this.buffer = new tannus_io_ByteStack(new tannus_io_impl_NodeBinary(s.length,new Buffer(s)));
		while(true) {
			var t = this.lexNext();
			if(t == null) {
				break;
			} else {
				this.tree.push(t);
			}
		}
		return this.tree;
	}
	,lexNext: function() {
		if(this.buffer.get_empty()) {
			return null;
		}
		var c = this.buffer.peek();
		if(c == 42) {
			this.advance();
			if(!this.buffer.get_empty() && this.buffer.peek() == 42) {
				this.advance();
				return tannus_sys_gs_Token.DoubleStar;
			} else {
				return tannus_sys_gs_Token.Star;
			}
		} else if(c == 44) {
			this.advance();
			return tannus_sys_gs_Token.Comma;
		} else if(c == 123) {
			var n = HxOverrides.cca("{",0);
			var this1;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) {
				throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
			}
			this1 = n;
			var n1 = HxOverrides.cca("}",0);
			var this2;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n1)) {
				throw new js__$Boot_HaxeError("Invalid Byte Value (" + n1 + ")!");
			}
			this2 = n1;
			var betw = this.between(this1,this2);
			var etree = this.ilex(betw);
			var list = [];
			var ct = [];
			var _g = 0;
			while(_g < etree.length) {
				var tk = etree[_g];
				++_g;
				if(tk[1] == 6) {
					list.push(ct);
					ct = [];
				} else {
					ct.push(tk);
				}
			}
			list.push(ct);
			return tannus_sys_gs_Token.Expand(list);
		} else if(c == 91) {
			var n2 = HxOverrides.cca("[",0);
			var this3;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n2)) {
				throw new js__$Boot_HaxeError("Invalid Byte Value (" + n2 + ")!");
			}
			this3 = n2;
			var n3 = HxOverrides.cca("]",0);
			var this4;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n3)) {
				throw new js__$Boot_HaxeError("Invalid Byte Value (" + n3 + ")!");
			}
			this4 = n3;
			var opt = this.ilex(this.between(this3,this4));
			return tannus_sys_gs_Token.Optional(opt);
		} else if(c == 58) {
			this.advance();
			return tannus_sys_gs_Token.Colon;
		} else if(c == 60) {
			this.advance();
			var code = "";
			while(!this.buffer.get_empty() && this.buffer.peek() != 62) code += String.fromCharCode(this.advance());
			this.advance();
			var param = this.ilex(code);
			var name = "";
			var check = tannus_sys_gs_Token.Star;
			var bits = [param.shift(),param.shift(),param.shift()];
			if(bits.length == 3) {
				if(bits[0][1] == 0) {
					if(bits[1] == null) {
						if(bits[2] == null) {
							var sname = bits[0][2];
							name = StringTools.trim(sname);
						} else {
							throw new js__$Boot_HaxeError("Unexpected " + Std.string(bits));
						}
					} else if(bits[1][1] == 7) {
						var tcheck = bits[2];
						var sname1 = bits[0][2];
						if(tcheck != null) {
							name = sname1;
							check = tcheck;
						} else {
							throw new js__$Boot_HaxeError("Unexpected " + Std.string(bits));
						}
					} else {
						throw new js__$Boot_HaxeError("Unexpected " + Std.string(bits));
					}
				} else {
					throw new js__$Boot_HaxeError("Unexpected " + Std.string(bits));
				}
			} else {
				throw new js__$Boot_HaxeError("Unexpected " + Std.string(bits));
			}
			return tannus_sys_gs_Token.Param(name,check);
		} else {
			var txt = String.fromCharCode(c);
			this.advance();
			while(!this.buffer.get_empty() && !Lambda.has(this.reserved,this.buffer.peek())) {
				c = this.advance();
				txt += String.fromCharCode(c);
			}
			return tannus_sys_gs_Token.Literal(txt);
		}
	}
	,ilex: function(s) {
		var current = this.save();
		this.tree = [];
		var res = this.lex(s);
		this.restore(current);
		return res;
	}
	,between: function(start,end,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var c = this.buffer.peek();
		var str = "";
		if(c == start) {
			this.advance();
			var lvl = 1;
			while(!this.buffer.get_empty() && lvl > 0) {
				c = this.buffer.peek();
				if(c == start && recursive) {
					++lvl;
				} else if(c == end) {
					--lvl;
				}
				if(lvl > 0) {
					str += String.fromCharCode(c);
				}
				this.advance();
			}
		} else {
			throw new js__$Boot_HaxeError("Structure not present!");
		}
		return str;
	}
	,reset: function() {
		var this1 = new tannus_io_impl_NodeBinary(0,new Buffer(0));
		this.buffer = new tannus_io_ByteStack(this1);
		this.tree = [];
	}
	,next: function() {
		return this.buffer.peek();
	}
	,advance: function() {
		return this.buffer.pop();
	}
	,reserve: function(set) {
		this.reserved = this.reserved.concat(set.toArray());
	}
	,save: function() {
		return { "buffer" : this.buffer.copy(), "tree" : this.tree};
	}
	,restore: function(s) {
		this.buffer = s.buffer;
		this.tree = s.tree;
	}
	,get_eoi: function() {
		return this.buffer.get_empty();
	}
	,buffer: null
	,tree: null
	,reserved: null
	,__class__: tannus_sys_gs_Lexer
	,__properties__: {get_eoi:"get_eoi"}
};
var tannus_sys_gs_Printer = function() {
	this.groupCount = 0;
	this.params = new haxe_ds_StringMap();
};
$hxClasses["tannus.sys.gs.Printer"] = tannus_sys_gs_Printer;
tannus_sys_gs_Printer.__name__ = ["tannus","sys","gs","Printer"];
tannus_sys_gs_Printer.compile = function(s,flags) {
	var p = new tannus_sys_gs_Printer();
	var t = new tannus_sys_gs_Lexer().lex(s);
	return { "regex" : p.pattern(t,flags), "params" : p.params};
};
tannus_sys_gs_Printer.prototype = {
	pattern: function(tree,flags) {
		if(flags == null) {
			flags = "";
		}
		return new EReg(this.print(tree),flags);
	}
	,print: function(tree) {
		var s = "";
		var _g = 0;
		while(_g < tree.length) {
			var t = tree[_g];
			++_g;
			s += this.printToken(t);
		}
		return s;
	}
	,printToken: function(t,parent) {
		switch(t[1]) {
		case 0:
			var txt = t[2];
			return this.escape(txt);
		case 1:
			var choices = t[2];
			this.groupCount++;
			var f = $bind(this,this.printToken);
			var a1 = t;
			var sprint = function(t1) {
				return f(t1,a1);
			};
			var _g = [];
			var _g1 = 0;
			while(_g1 < choices.length) {
				var c = choices[_g1];
				++_g1;
				_g.push(c.map(sprint).join(""));
			}
			var schoices = _g;
			var canBeEmpty = HxOverrides.remove(schoices,"");
			var res = tannus_ds_StringUtils.wrap(schoices.join("|"),"(",")");
			if(canBeEmpty) {
				res += "?";
			}
			return res;
		case 2:
			var tree = t[2];
			this.groupCount++;
			var f1 = $bind(this,this.printToken);
			var a11 = t;
			var sprint1 = function(t2) {
				return f1(t2,a11);
			};
			return tannus_ds_StringUtils.wrap(tree.map(sprint1).join(""),"(",")") + "?";
		case 3:
			var check = t[3];
			var name = t[2];
			var v = this.groupCount;
			this.params.set(name,v);
			return this.printToken(check,t);
		case 4:
			this.groupCount++;
			return "([^/]+)";
		case 5:
			this.groupCount++;
			return "(.+)";
		default:
			console.log(Std.string(t) + "");
			throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(t));
		}
	}
	,escape: function(txt) {
		var esc = [".","^","$","+","(",")","?"];
		var _g = 0;
		while(_g < esc.length) {
			var c = esc[_g];
			++_g;
			txt = StringTools.replace(txt,c,"\\" + c);
		}
		return txt;
	}
	,groupCount: null
	,params: null
	,__class__: tannus_sys_gs_Printer
};
var tannus_sys_gs_Token = $hxClasses["tannus.sys.gs.Token"] = { __ename__ : ["tannus","sys","gs","Token"], __constructs__ : ["Literal","Expand","Optional","Param","Star","DoubleStar","Comma","Colon"] };
tannus_sys_gs_Token.Literal = function(txt) { var $x = ["Literal",0,txt]; $x.__enum__ = tannus_sys_gs_Token; $x.toString = $estr; return $x; };
tannus_sys_gs_Token.Expand = function(pieces) { var $x = ["Expand",1,pieces]; $x.__enum__ = tannus_sys_gs_Token; $x.toString = $estr; return $x; };
tannus_sys_gs_Token.Optional = function(sub) { var $x = ["Optional",2,sub]; $x.__enum__ = tannus_sys_gs_Token; $x.toString = $estr; return $x; };
tannus_sys_gs_Token.Param = function(name,check) { var $x = ["Param",3,name,check]; $x.__enum__ = tannus_sys_gs_Token; $x.toString = $estr; return $x; };
tannus_sys_gs_Token.Star = ["Star",4];
tannus_sys_gs_Token.Star.toString = $estr;
tannus_sys_gs_Token.Star.__enum__ = tannus_sys_gs_Token;
tannus_sys_gs_Token.DoubleStar = ["DoubleStar",5];
tannus_sys_gs_Token.DoubleStar.toString = $estr;
tannus_sys_gs_Token.DoubleStar.__enum__ = tannus_sys_gs_Token;
tannus_sys_gs_Token.Comma = ["Comma",6];
tannus_sys_gs_Token.Comma.toString = $estr;
tannus_sys_gs_Token.Comma.__enum__ = tannus_sys_gs_Token;
tannus_sys_gs_Token.Colon = ["Colon",7];
tannus_sys_gs_Token.Colon.toString = $estr;
tannus_sys_gs_Token.Colon.__enum__ = tannus_sys_gs_Token;
var tannus_sys_internal__$FileContent_FileContent_$Impl_$ = {};
$hxClasses["tannus.sys.internal._FileContent.FileContent_Impl_"] = tannus_sys_internal__$FileContent_FileContent_$Impl_$;
tannus_sys_internal__$FileContent_FileContent_$Impl_$.__name__ = ["tannus","sys","internal","_FileContent","FileContent_Impl_"];
tannus_sys_internal__$FileContent_FileContent_$Impl_$.__properties__ = {get_f:"get_f"}
tannus_sys_internal__$FileContent_FileContent_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
tannus_sys_internal__$FileContent_FileContent_$Impl_$.get_f = function(this1) {
	return this1.get();
};
tannus_sys_internal__$FileContent_FileContent_$Impl_$.append = function(this1,data) {
	tannus_sys_node_NodeFileSystem.append(this1.get()._path.s,data);
};
tannus_sys_internal__$FileContent_FileContent_$Impl_$.toByteArray = function(this1) {
	return tannus_sys_node_NodeFileSystem.read(this1.get()._path.s);
};
tannus_sys_internal__$FileContent_FileContent_$Impl_$.toString = function(this1) {
	return tannus_sys_node_NodeFileSystem.read(this1.get()._path.s).toString();
};
var tannus_sys_node_NodeFSModule = require("fs");
var tannus_sys_node_NodeFileSystem = function() { };
$hxClasses["tannus.sys.node.NodeFileSystem"] = tannus_sys_node_NodeFileSystem;
tannus_sys_node_NodeFileSystem.__name__ = ["tannus","sys","node","NodeFileSystem"];
tannus_sys_node_NodeFileSystem.exists = function(path) {
	return tannus_sys_node_NodeFSModule.existsSync(path);
};
tannus_sys_node_NodeFileSystem.isDirectory = function(path) {
	var stats = tannus_sys_node_NodeFSModule.statSync(path);
	return stats.isDirectory();
};
tannus_sys_node_NodeFileSystem.createDirectory = function(path) {
	tannus_sys_node_NodeFSModule.mkdirSync(path);
};
tannus_sys_node_NodeFileSystem.deleteDirectory = function(path) {
	tannus_sys_node_NodeFSModule.rmdirSync(path);
};
tannus_sys_node_NodeFileSystem.readDirectory = function(path,recursive) {
	if(recursive == null) {
		recursive = false;
	}
	return tannus_sys_node_NodeFSModule.readdirSync(path);
};
tannus_sys_node_NodeFileSystem.write = function(path,data) {
	tannus_sys_node_NodeFSModule.writeFileSync(path,data.b);
};
tannus_sys_node_NodeFileSystem.read = function(path,length) {
	var buf = tannus_sys_node_NodeFSModule.readFileSync(path);
	return tannus_io_impl_NodeBinary.ofData(buf);
};
tannus_sys_node_NodeFileSystem.copy = function(src,dest,cb) {
	var cbCalled = false;
	var done = function(err) {
		if(!cbCalled) {
			cbCalled = true;
			cb(err);
		}
	};
	var rd = tannus_sys_node_NodeFSModule.createReadStream(src.s,{ });
	var f = done;
	rd.on("error",function(a1) {
		f(a1);
	});
	var wr = tannus_sys_node_NodeFSModule.createWriteStream(dest.s,{ });
	var f1 = done;
	wr.on("error",function(a11) {
		f1(a11);
	});
	wr.on("close",function() {
		done();
	});
	rd.pipe(wr);
};
tannus_sys_node_NodeFileSystem.append = function(path,data) {
	var c = tannus_sys_node_NodeFileSystem.read(path);
	c = c.concat(data);
	tannus_sys_node_NodeFileSystem.write(path,c);
};
tannus_sys_node_NodeFileSystem.deleteFile = function(path) {
	tannus_sys_node_NodeFSModule.unlinkSync(path);
};
tannus_sys_node_NodeFileSystem.rename = function(o,n) {
	tannus_sys_node_NodeFSModule.renameSync(o,n);
};
tannus_sys_node_NodeFileSystem.stat = function(path) {
	var s = tannus_sys_node_NodeFSModule.statSync(path);
	return { "size" : s.size, "mtime" : tannus_sys_node_NodeFileSystem.fromJSDate(s.mtime), "ctime" : tannus_sys_node_NodeFileSystem.fromJSDate(s.ctime)};
};
tannus_sys_node_NodeFileSystem.dateFromString = function(s) {
	var bits = s.split("T");
	var dat = bits[0];
	var tim = bits[1];
	tim = StringTools.replace(tim,"Z","");
	bits = dat.split("-");
	var year = Std.parseInt(bits[0]);
	var month = Std.parseInt(bits[1]);
	var day = Std.parseInt(bits[2]);
	bits = tim.split(":");
	var hour = Std.parseInt(bits[0]);
	var minute = Std.parseInt(bits[1]);
	var second = Std.parseInt(bits[2]);
	return new Date(year,month,day,hour,minute,second);
};
tannus_sys_node_NodeFileSystem.fromJSDate = function(s) {
	var year = s.getFullYear();
	var month = s.getMonth();
	var day = s.getDate();
	var hour = s.getHours();
	var minute = s.getMinutes();
	var second = s.getSeconds();
	return new Date(year,month,day,hour,minute,second);
};
var tannus_utils__$Error_Error_$Impl_$ = {};
$hxClasses["tannus.utils._Error.Error_Impl_"] = tannus_utils__$Error_Error_$Impl_$;
tannus_utils__$Error_Error_$Impl_$.__name__ = ["tannus","utils","_Error","Error_Impl_"];
tannus_utils__$Error_Error_$Impl_$._new = function(message) {
	var this1 = new tannus_utils_JavaScriptError(message);
	return this1;
};
tannus_utils__$Error_Error_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
var tannus_utils_JavaScriptError = function(message) {
	Error.call(this,message);
};
$hxClasses["tannus.utils.JavaScriptError"] = tannus_utils_JavaScriptError;
tannus_utils_JavaScriptError.__name__ = ["tannus","utils","JavaScriptError"];
tannus_utils_JavaScriptError.__super__ = Error;
tannus_utils_JavaScriptError.prototype = $extend(Error.prototype,{
	__class__: tannus_utils_JavaScriptError
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
electron_ipc_IpcBus.GCN = "ipc::sockets";
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
tannus_ds_Memory.state = 0;
tannus_ds_Memory.used = [];
tannus_geom_Matrix.__identity = new tannus_geom_Matrix();
tannus_math_TMath.E = 2.718281828459045;
tannus_math_TMath.LN2 = 0.6931471805599453;
tannus_math_TMath.LN10 = 2.302585092994046;
tannus_math_TMath.LOG2E = 1.4426950408889634;
tannus_math_TMath.LOG10E = 0.43429448190325176;
tannus_math_TMath.PI = 3.141592653589793;
tannus_math_TMath.SQRT1_2 = 0.7071067811865476;
tannus_math_TMath.SQRT2 = 1.4142135623730951;
tannus_math_TMath.KAPPA = 4 * (Math.sqrt(2) - 1) / 3;
tannus_math_TMath.INT_MIN = -2147483648;
tannus_math_TMath.INT_MAX = 2147483647;
tannus_math_TMath.FLOAT_MIN = -1.79769313486231e+308;
tannus_math_TMath.FLOAT_MAX = 1.79769313486231e+308;
tannus_sys_Mimes.initted = false;
tannus_sys_Mimes.primitive = { "3dml" : "text/vnd.in3d.3dml", "3ds" : "image/x-3ds", "3g2" : "video/3gpp2", "3gp" : "video/3gpp", "7z" : "application/x-7z-compressed", "aab" : "application/x-authorware-bin", "aac" : "audio/x-aac", "aam" : "application/x-authorware-map", "aas" : "application/x-authorware-seg", "abw" : "application/x-abiword", "ac" : "application/pkix-attr-cert", "acc" : "application/vnd.americandynamics.acc", "ace" : "application/x-ace-compressed", "acu" : "application/vnd.acucobol", "acutc" : "application/vnd.acucorp", "adp" : "audio/adpcm", "aep" : "application/vnd.audiograph", "afm" : "application/x-font-type1", "afp" : "application/vnd.ibm.modcap", "ahead" : "application/vnd.ahead.space", "ai" : "application/postscript", "aif" : "audio/x-aiff", "aifc" : "audio/x-aiff", "aiff" : "audio/x-aiff", "air" : "application/vnd.adobe.air-application-installer-package+zip", "ait" : "application/vnd.dvb.ait", "ami" : "application/vnd.amiga.ami", "apk" : "application/vnd.android.package-archive", "appcache" : "text/cache-manifest", "application" : "application/x-ms-application", "apr" : "application/vnd.lotus-approach", "arc" : "application/x-freearc", "asa" : "text/plain", "asax" : "application/octet-stream", "asc" : "application/pgp-signature", "ascx" : "text/plain", "asf" : "video/x-ms-asf", "ashx" : "text/plain", "asm" : "text/x-asm", "asmx" : "text/plain", "aso" : "application/vnd.accpac.simply.aso", "asp" : "text/plain", "aspx" : "text/plain", "asx" : "video/x-ms-asf", "atc" : "application/vnd.acucorp", "atom" : "application/atom+xml", "atomcat" : "application/atomcat+xml", "atomsvc" : "application/atomsvc+xml", "atx" : "application/vnd.antix.game-component", "au" : "audio/basic", "avi" : "video/x-msvideo", "aw" : "application/applixware", "axd" : "text/plain", "azf" : "application/vnd.airzip.filesecure.azf", "azs" : "application/vnd.airzip.filesecure.azs", "azw" : "application/vnd.amazon.ebook", "bat" : "application/x-msdownload", "bcpio" : "application/x-bcpio", "bdf" : "application/x-font-bdf", "bdm" : "application/vnd.syncml.dm+wbxml", "bed" : "application/vnd.realvnc.bed", "bh2" : "application/vnd.fujitsu.oasysprs", "bin" : "application/octet-stream", "blb" : "application/x-blorb", "blorb" : "application/x-blorb", "bmi" : "application/vnd.bmi", "bmp" : "image/bmp", "book" : "application/vnd.framemaker", "box" : "application/vnd.previewsystems.box", "boz" : "application/x-bzip2", "bpk" : "application/octet-stream", "btif" : "image/prs.btif", "bz" : "application/x-bzip", "bz2" : "application/x-bzip2", "c" : "text/x-c", "c11amc" : "application/vnd.cluetrust.cartomobile-config", "c11amz" : "application/vnd.cluetrust.cartomobile-config-pkg", "c4d" : "application/vnd.clonk.c4group", "c4f" : "application/vnd.clonk.c4group", "c4g" : "application/vnd.clonk.c4group", "c4p" : "application/vnd.clonk.c4group", "c4u" : "application/vnd.clonk.c4group", "cab" : "application/vnd.ms-cab-compressed", "caf" : "audio/x-caf", "cap" : "application/vnd.tcpdump.pcap", "car" : "application/vnd.curl.car", "cat" : "application/vnd.ms-pki.seccat", "cb7" : "application/x-cbr", "cba" : "application/x-cbr", "cbr" : "application/x-cbr", "cbt" : "application/x-cbr", "cbz" : "application/x-cbr", "cc" : "text/x-c", "cct" : "application/x-director", "ccxml" : "application/ccxml+xml", "cdbcmsg" : "application/vnd.contact.cmsg", "cdf" : "application/x-netcdf", "cdkey" : "application/vnd.mediastation.cdkey", "cdmia" : "application/cdmi-capability", "cdmic" : "application/cdmi-container", "cdmid" : "application/cdmi-domain", "cdmio" : "application/cdmi-object", "cdmiq" : "application/cdmi-queue", "cdx" : "chemical/x-cdx", "cdxml" : "application/vnd.chemdraw+xml", "cdy" : "application/vnd.cinderella", "cer" : "application/pkix-cert", "cfc" : "application/x-coldfusion", "cfm" : "application/x-coldfusion", "cfs" : "application/x-cfs-compressed", "cgm" : "image/cgm", "chat" : "application/x-chat", "chm" : "application/vnd.ms-htmlhelp", "chrt" : "application/vnd.kde.kchart", "cif" : "chemical/x-cif", "cii" : "application/vnd.anser-web-certificate-issue-initiation", "cil" : "application/vnd.ms-artgalry", "cla" : "application/vnd.claymore", "class" : "application/java-vm", "clkk" : "application/vnd.crick.clicker.keyboard", "clkp" : "application/vnd.crick.clicker.palette", "clkt" : "application/vnd.crick.clicker.template", "clkw" : "application/vnd.crick.clicker.wordbank", "clkx" : "application/vnd.crick.clicker", "clp" : "application/x-msclip", "cmc" : "application/vnd.cosmocaller", "cmdf" : "chemical/x-cmdf", "cml" : "chemical/x-cml", "cmp" : "application/vnd.yellowriver-custom-menu", "cmx" : "image/x-cmx", "cod" : "application/vnd.rim.cod", "coffee" : "text/coffeescript", "com" : "application/x-msdownload", "conf" : "text/plain", "cpio" : "application/x-cpio", "cpp" : "text/x-c", "cpt" : "application/mac-compactpro", "crd" : "application/x-mscardfile", "crl" : "application/pkix-crl", "crt" : "application/x-x509-ca-cert", "crx" : "application/octet-stream", "cryptonote" : "application/vnd.rig.cryptonote", "cs" : "text/plain", "csh" : "application/x-csh", "csml" : "chemical/x-csml", "csp" : "application/vnd.commonspace", "css" : "text/css", "cst" : "application/x-director", "csv" : "text/csv", "cu" : "application/cu-seeme", "curl" : "text/vnd.curl", "cww" : "application/prs.cww", "cxt" : "application/x-director", "cxx" : "text/x-c", "dae" : "model/vnd.collada+xml", "daf" : "application/vnd.mobius.daf", "dart" : "application/vnd.dart", "dataless" : "application/vnd.fdsn.seed", "davmount" : "application/davmount+xml", "dbk" : "application/docbook+xml", "dcr" : "application/x-director", "dcurl" : "text/vnd.curl.dcurl", "dd2" : "application/vnd.oma.dd2+xml", "ddd" : "application/vnd.fujixerox.ddd", "deb" : "application/x-debian-package", "def" : "text/plain", "deploy" : "application/octet-stream", "der" : "application/x-x509-ca-cert", "dfac" : "application/vnd.dreamfactory", "dgc" : "application/x-dgc-compressed", "dic" : "text/x-c", "dir" : "application/x-director", "dis" : "application/vnd.mobius.dis", "dist" : "application/octet-stream", "distz" : "application/octet-stream", "djv" : "image/vnd.djvu", "djvu" : "image/vnd.djvu", "dll" : "application/x-msdownload", "dmg" : "application/x-apple-diskimage", "dmp" : "application/vnd.tcpdump.pcap", "dms" : "application/octet-stream", "dna" : "application/vnd.dna", "doc" : "application/msword", "docm" : "application/vnd.ms-word.document.macroenabled.12", "docx" : "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "dot" : "application/msword", "dotm" : "application/vnd.ms-word.template.macroenabled.12", "dotx" : "application/vnd.openxmlformats-officedocument.wordprocessingml.template", "dp" : "application/vnd.osgi.dp", "dpg" : "application/vnd.dpgraph", "dra" : "audio/vnd.dra", "dsc" : "text/prs.lines.tag", "dssc" : "application/dssc+der", "dtb" : "application/x-dtbook+xml", "dtd" : "application/xml-dtd", "dts" : "audio/vnd.dts", "dtshd" : "audio/vnd.dts.hd", "dump" : "application/octet-stream", "dvb" : "video/vnd.dvb.file", "dvi" : "application/x-dvi", "dwf" : "model/vnd.dwf", "dwg" : "image/vnd.dwg", "dxf" : "image/vnd.dxf", "dxp" : "application/vnd.spotfire.dxp", "dxr" : "application/x-director", "ecelp4800" : "audio/vnd.nuera.ecelp4800", "ecelp7470" : "audio/vnd.nuera.ecelp7470", "ecelp9600" : "audio/vnd.nuera.ecelp9600", "ecma" : "application/ecmascript", "edm" : "application/vnd.novadigm.edm", "edx" : "application/vnd.novadigm.edx", "efif" : "application/vnd.picsel", "ei6" : "application/vnd.pg.osasli", "elc" : "application/octet-stream", "emf" : "application/x-msmetafile", "eml" : "message/rfc822", "emma" : "application/emma+xml", "emz" : "application/x-msmetafile", "eol" : "audio/vnd.digital-winds", "eot" : "application/vnd.ms-fontobject", "eps" : "application/postscript", "epub" : "application/epub+zip", "es3" : "application/vnd.eszigno3+xml", "esa" : "application/vnd.osgi.subsystem", "esf" : "application/vnd.epson.esf", "et3" : "application/vnd.eszigno3+xml", "etx" : "text/x-setext", "eva" : "application/x-eva", "evy" : "application/x-envoy", "exe" : "application/x-msdownload", "exi" : "application/exi", "ext" : "application/vnd.novadigm.ext", "ez" : "application/andrew-inset", "ez2" : "application/vnd.ezpix-album", "ez3" : "application/vnd.ezpix-package", "f" : "text/x-fortran", "f4v" : "video/x-f4v", "f77" : "text/x-fortran", "f90" : "text/x-fortran", "fbs" : "image/vnd.fastbidsheet", "fcdt" : "application/vnd.adobe.formscentral.fcdt", "fcs" : "application/vnd.isac.fcs", "fdf" : "application/vnd.fdf", "fe_launch" : "application/vnd.denovo.fcselayout-link", "fg5" : "application/vnd.fujitsu.oasysgp", "fgd" : "application/x-director", "fh" : "image/x-freehand", "fh4" : "image/x-freehand", "fh5" : "image/x-freehand", "fh7" : "image/x-freehand", "fhc" : "image/x-freehand", "fig" : "application/x-xfig", "flac" : "audio/x-flac", "fli" : "video/x-fli", "flo" : "application/vnd.micrografx.flo", "flv" : "video/x-flv", "flw" : "application/vnd.kde.kivio", "flx" : "text/vnd.fmi.flexstor", "fly" : "text/vnd.fly", "fm" : "application/vnd.framemaker", "fnc" : "application/vnd.frogans.fnc", "for" : "text/x-fortran", "fpx" : "image/vnd.fpx", "frame" : "application/vnd.framemaker", "fsc" : "application/vnd.fsc.weblaunch", "fst" : "image/vnd.fst", "ftc" : "application/vnd.fluxtime.clip", "fti" : "application/vnd.anser-web-funds-transfer-initiation", "fvt" : "video/vnd.fvt", "fxp" : "application/vnd.adobe.fxp", "fxpl" : "application/vnd.adobe.fxp", "fzs" : "application/vnd.fuzzysheet", "g2w" : "application/vnd.geoplan", "g3" : "image/g3fax", "g3w" : "application/vnd.geospace", "gac" : "application/vnd.groove-account", "gam" : "application/x-tads", "gbr" : "application/rpki-ghostbusters", "gca" : "application/x-gca-compressed", "gdl" : "model/vnd.gdl", "geo" : "application/vnd.dynageo", "gex" : "application/vnd.geometry-explorer", "ggb" : "application/vnd.geogebra.file", "ggt" : "application/vnd.geogebra.tool", "ghf" : "application/vnd.groove-help", "gif" : "image/gif", "gim" : "application/vnd.groove-identity-message", "gml" : "application/gml+xml", "gmx" : "application/vnd.gmx", "gnumeric" : "application/x-gnumeric", "gph" : "application/vnd.flographit", "gpx" : "application/gpx+xml", "gqf" : "application/vnd.grafeq", "gqs" : "application/vnd.grafeq", "gram" : "application/srgs", "gramps" : "application/x-gramps-xml", "gre" : "application/vnd.geometry-explorer", "grv" : "application/vnd.groove-injector", "grxml" : "application/srgs+xml", "gsf" : "application/x-font-ghostscript", "gtar" : "application/x-gtar", "gtm" : "application/vnd.groove-tool-message", "gtw" : "model/vnd.gtw", "gv" : "text/vnd.graphviz", "gxf" : "application/gxf", "gxt" : "application/vnd.geonext", "gz" : "application/x-gzip", "h" : "text/x-c", "h261" : "video/h261", "h263" : "video/h263", "h264" : "video/h264", "hal" : "application/vnd.hal+xml", "hbci" : "application/vnd.hbci", "hdf" : "application/x-hdf", "hh" : "text/x-c", "hlp" : "application/winhlp", "hpgl" : "application/vnd.hp-hpgl", "hpid" : "application/vnd.hp-hpid", "hps" : "application/vnd.hp-hps", "hqx" : "application/mac-binhex40", "hta" : "application/octet-stream", "htc" : "text/html", "htke" : "application/vnd.kenameaapp", "htm" : "text/html", "html" : "text/html", "hvd" : "application/vnd.yamaha.hv-dic", "hvp" : "application/vnd.yamaha.hv-voice", "hvs" : "application/vnd.yamaha.hv-script", "hx" : "text/haxe", "hxml" : "text/haxe.hxml", "i2g" : "application/vnd.intergeo", "icc" : "application/vnd.iccprofile", "ice" : "x-conference/x-cooltalk", "icm" : "application/vnd.iccprofile", "ico" : "image/x-icon", "ics" : "text/calendar", "ief" : "image/ief", "ifb" : "text/calendar", "ifm" : "application/vnd.shana.informed.formdata", "iges" : "model/iges", "igl" : "application/vnd.igloader", "igm" : "application/vnd.insors.igm", "igs" : "model/iges", "igx" : "application/vnd.micrografx.igx", "iif" : "application/vnd.shana.informed.interchange", "imp" : "application/vnd.accpac.simply.imp", "ims" : "application/vnd.ms-ims", "in" : "text/plain", "ini" : "text/plain", "ink" : "application/inkml+xml", "inkml" : "application/inkml+xml", "install" : "application/x-install-instructions", "iota" : "application/vnd.astraea-software.iota", "ipa" : "application/octet-stream", "ipfix" : "application/ipfix", "ipk" : "application/vnd.shana.informed.package", "irm" : "application/vnd.ibm.rights-management", "irp" : "application/vnd.irepository.package+xml", "iso" : "application/x-iso9660-image", "itp" : "application/vnd.shana.informed.formtemplate", "ivp" : "application/vnd.immervision-ivp", "ivu" : "application/vnd.immervision-ivu", "jad" : "text/vnd.sun.j2me.app-descriptor", "jam" : "application/vnd.jam", "jar" : "application/java-archive", "java" : "text/x-java-source", "jisp" : "application/vnd.jisp", "jlt" : "application/vnd.hp-jlyt", "jnlp" : "application/x-java-jnlp-file", "joda" : "application/vnd.joost.joda-archive", "jpe" : "image/jpeg", "jpeg" : "image/jpeg", "jpg" : "image/jpeg", "jpgm" : "video/jpm", "jpgv" : "video/jpeg", "jpm" : "video/jpm", "js" : "text/javascript", "json" : "application/json", "jsonml" : "application/jsonml+json", "kar" : "audio/midi", "karbon" : "application/vnd.kde.karbon", "kfo" : "application/vnd.kde.kformula", "kia" : "application/vnd.kidspiration", "kml" : "application/vnd.google-earth.kml+xml", "kmz" : "application/vnd.google-earth.kmz", "kne" : "application/vnd.kinar", "knp" : "application/vnd.kinar", "kon" : "application/vnd.kde.kontour", "kpr" : "application/vnd.kde.kpresenter", "kpt" : "application/vnd.kde.kpresenter", "kpxx" : "application/vnd.ds-keypoint", "ksp" : "application/vnd.kde.kspread", "ktr" : "application/vnd.kahootz", "ktx" : "image/ktx", "ktz" : "application/vnd.kahootz", "kwd" : "application/vnd.kde.kword", "kwt" : "application/vnd.kde.kword", "lasxml" : "application/vnd.las.las+xml", "latex" : "application/x-latex", "lbd" : "application/vnd.llamagraphics.life-balance.desktop", "lbe" : "application/vnd.llamagraphics.life-balance.exchange+xml", "les" : "application/vnd.hhe.lesson-player", "less" : "text/less", "lha" : "application/x-lzh-compressed", "link66" : "application/vnd.route66.link66+xml", "list" : "text/plain", "list3820" : "application/vnd.ibm.modcap", "listafp" : "application/vnd.ibm.modcap", "lnk" : "application/x-ms-shortcut", "log" : "text/plain", "lostxml" : "application/lost+xml", "lrf" : "application/octet-stream", "lrm" : "application/vnd.ms-lrm", "ltf" : "application/vnd.frogans.ltf", "lvp" : "audio/vnd.lucent.voice", "lwp" : "application/vnd.lotus-wordpro", "lz" : "application/x-lzip", "lzh" : "application/x-lzh-compressed", "lzma" : "application/x-lzma", "lzo" : "application/x-lzop", "m13" : "application/x-msmediaview", "m14" : "application/x-msmediaview", "m1v" : "video/mpeg", "m21" : "application/mp21", "m2a" : "audio/mpeg", "m2v" : "video/mpeg", "m3a" : "audio/mpeg", "m3u" : "audio/x-mpegurl", "m3u8" : "application/vnd.apple.mpegurl", "m4a" : "audio/mp4", "m4u" : "video/vnd.mpegurl", "m4v" : "video/mp4", "ma" : "application/mathematica", "mads" : "application/mads+xml", "mag" : "application/vnd.ecowin.chart", "maker" : "application/vnd.framemaker", "man" : "text/troff", "mar" : "application/octet-stream", "mathml" : "application/mathml+xml", "mb" : "application/mathematica", "mbk" : "application/vnd.mobius.mbk", "mbox" : "application/mbox", "mc1" : "application/vnd.medcalcdata", "mcd" : "application/vnd.mcd", "mcurl" : "text/vnd.curl.mcurl", "mdb" : "application/x-msaccess", "mdi" : "image/vnd.ms-modi", "md" : "text/markdown", "me" : "text/troff", "mesh" : "model/mesh", "meta4" : "application/metalink4+xml", "metalink" : "application/metalink+xml", "mets" : "application/mets+xml", "mfm" : "application/vnd.mfmp", "mft" : "application/rpki-manifest", "mgp" : "application/vnd.osgeo.mapguide.package", "mgz" : "application/vnd.proteus.magazine", "mid" : "audio/midi", "midi" : "audio/midi", "mie" : "application/x-mie", "mif" : "application/vnd.mif", "mime" : "message/rfc822", "mj2" : "video/mj2", "mjp2" : "video/mj2", "mk3d" : "video/x-matroska", "mka" : "audio/x-matroska", "mks" : "video/x-matroska", "mkv" : "video/x-matroska", "mlp" : "application/vnd.dolby.mlp", "mmd" : "application/vnd.chipnuts.karaoke-mmd", "mmf" : "application/vnd.smaf", "mmr" : "image/vnd.fujixerox.edmics-mmr", "mng" : "video/x-mng", "mny" : "application/x-msmoney", "mobi" : "application/x-mobipocket-ebook", "mods" : "application/mods+xml", "mov" : "video/quicktime", "movie" : "video/x-sgi-movie", "mp2" : "audio/mpeg", "mp21" : "application/mp21", "mp2a" : "audio/mpeg", "mp3" : "audio/mpeg", "mp4" : "video/mp4", "mp4a" : "audio/mp4", "mp4s" : "application/mp4", "mp4v" : "video/mp4", "mpc" : "application/vnd.mophun.certificate", "mpe" : "video/mpeg", "mpeg" : "video/mpeg", "mpg" : "video/mpeg", "mpg4" : "video/mp4", "mpga" : "audio/mpeg", "mpkg" : "application/vnd.apple.installer+xml", "mpm" : "application/vnd.blueice.multipass", "mpn" : "application/vnd.mophun.application", "mpp" : "application/vnd.ms-project", "mpt" : "application/vnd.ms-project", "mpy" : "application/vnd.ibm.minipay", "mqy" : "application/vnd.mobius.mqy", "mrc" : "application/marc", "mrcx" : "application/marcxml+xml", "ms" : "text/troff", "mscml" : "application/mediaservercontrol+xml", "mseed" : "application/vnd.fdsn.mseed", "mseq" : "application/vnd.mseq", "msf" : "application/vnd.epson.msf", "msh" : "model/mesh", "msi" : "application/x-msdownload", "msl" : "application/vnd.mobius.msl", "msty" : "application/vnd.muvee.style", "mts" : "model/vnd.mts", "mus" : "application/vnd.musician", "musicxml" : "application/vnd.recordare.musicxml+xml", "mvb" : "application/x-msmediaview", "mwf" : "application/vnd.mfer", "mxf" : "application/mxf", "mxl" : "application/vnd.recordare.musicxml", "mxml" : "application/xv+xml", "mxs" : "application/vnd.triscape.mxs", "mxu" : "video/vnd.mpegurl", "n-gage" : "application/vnd.nokia.n-gage.symbian.install", "n3" : "text/n3", "nb" : "application/mathematica", "nbp" : "application/vnd.wolfram.player", "nc" : "application/x-netcdf", "ncx" : "application/x-dtbncx+xml", "nfo" : "text/x-nfo", "ngdat" : "application/vnd.nokia.n-gage.data", "nitf" : "application/vnd.nitf", "nlu" : "application/vnd.neurolanguage.nlu", "nml" : "application/vnd.enliven", "nnd" : "application/vnd.noblenet-directory", "nns" : "application/vnd.noblenet-sealer", "nnw" : "application/vnd.noblenet-web", "npx" : "image/vnd.net-fpx", "nsc" : "application/x-conference", "nsf" : "application/vnd.lotus-notes", "ntf" : "application/vnd.nitf", "nzb" : "application/x-nzb", "oa2" : "application/vnd.fujitsu.oasys2", "oa3" : "application/vnd.fujitsu.oasys3", "oas" : "application/vnd.fujitsu.oasys", "obd" : "application/x-msbinder", "obj" : "application/x-tgif", "oda" : "application/oda", "odb" : "application/vnd.oasis.opendocument.database", "odc" : "application/vnd.oasis.opendocument.chart", "odf" : "application/vnd.oasis.opendocument.formula", "odft" : "application/vnd.oasis.opendocument.formula-template", "odg" : "application/vnd.oasis.opendocument.graphics", "odi" : "application/vnd.oasis.opendocument.image", "odm" : "application/vnd.oasis.opendocument.text-master", "odp" : "application/vnd.oasis.opendocument.presentation", "ods" : "application/vnd.oasis.opendocument.spreadsheet", "odt" : "application/vnd.oasis.opendocument.text", "oga" : "audio/ogg", "ogg" : "audio/ogg", "ogv" : "video/ogg", "ogx" : "application/ogg", "omdoc" : "application/omdoc+xml", "onepkg" : "application/onenote", "onetmp" : "application/onenote", "onetoc" : "application/onenote", "onetoc2" : "application/onenote", "opf" : "application/oebps-package+xml", "opml" : "text/x-opml", "oprc" : "application/vnd.palm", "org" : "application/vnd.lotus-organizer", "osf" : "application/vnd.yamaha.openscoreformat", "osfpvg" : "application/vnd.yamaha.openscoreformat.osfpvg+xml", "otc" : "application/vnd.oasis.opendocument.chart-template", "otf" : "application/x-font-otf", "otg" : "application/vnd.oasis.opendocument.graphics-template", "oth" : "application/vnd.oasis.opendocument.text-web", "oti" : "application/vnd.oasis.opendocument.image-template", "otp" : "application/vnd.oasis.opendocument.presentation-template", "ots" : "application/vnd.oasis.opendocument.spreadsheet-template", "ott" : "application/vnd.oasis.opendocument.text-template", "oxps" : "application/oxps", "oxt" : "application/vnd.openofficeorg.extension", "p" : "text/x-pascal", "py" : "application/python", "p10" : "application/pkcs10", "p12" : "application/x-pkcs12", "p7b" : "application/x-pkcs7-certificates", "p7c" : "application/pkcs7-mime", "p7m" : "application/pkcs7-mime", "p7r" : "application/x-pkcs7-certreqresp", "p7s" : "application/pkcs7-signature", "p8" : "application/pkcs8", "pas" : "text/x-pascal", "paw" : "application/vnd.pawaafile", "pbd" : "application/vnd.powerbuilder6", "pbm" : "image/x-portable-bitmap", "pcap" : "application/vnd.tcpdump.pcap", "pcf" : "application/x-font-pcf", "pcl" : "application/vnd.hp-pcl", "pclxl" : "application/vnd.hp-pclxl", "pct" : "image/x-pict", "pcurl" : "application/vnd.curl.pcurl", "pcx" : "image/x-pcx", "pdb" : "application/vnd.palm", "pdf" : "application/pdf", "pfa" : "application/x-font-type1", "pfb" : "application/x-font-type1", "pfm" : "application/x-font-type1", "pfr" : "application/font-tdpfr", "pfx" : "application/x-pkcs12", "pgm" : "image/x-portable-graymap", "pgn" : "application/x-chess-pgn", "pgp" : "application/pgp-encrypted", "phar" : "application/octet-stream", "php" : "text/plain", "phps" : "application/x-httpd-phps", "pic" : "image/x-pict", "pkg" : "application/octet-stream", "pki" : "application/pkixcmp", "pkipath" : "application/pkix-pkipath", "plb" : "application/vnd.3gpp.pic-bw-large", "plc" : "application/vnd.mobius.plc", "plf" : "application/vnd.pocketlearn", "plist" : "application/x-plist", "pls" : "application/pls+xml", "pml" : "application/vnd.ctc-posml", "png" : "image/png", "pnm" : "image/x-portable-anymap", "portpkg" : "application/vnd.macports.portpkg", "pot" : "application/vnd.ms-powerpoint", "potm" : "application/vnd.ms-powerpoint.template.macroenabled.12", "potx" : "application/vnd.openxmlformats-officedocument.presentationml.template", "ppam" : "application/vnd.ms-powerpoint.addin.macroenabled.12", "ppd" : "application/vnd.cups-ppd", "ppm" : "image/x-portable-pixmap", "pps" : "application/vnd.ms-powerpoint", "ppsm" : "application/vnd.ms-powerpoint.slideshow.macroenabled.12", "ppsx" : "application/vnd.openxmlformats-officedocument.presentationml.slideshow", "ppt" : "application/vnd.ms-powerpoint", "pptm" : "application/vnd.ms-powerpoint.presentation.macroenabled.12", "pptx" : "application/vnd.openxmlformats-officedocument.presentationml.presentation", "pqa" : "application/vnd.palm", "prc" : "application/x-mobipocket-ebook", "pre" : "application/vnd.lotus-freelance", "prf" : "application/pics-rules", "ps" : "application/postscript", "psb" : "application/vnd.3gpp.pic-bw-small", "psd" : "image/vnd.adobe.photoshop", "psf" : "application/x-font-linux-psf", "pskcxml" : "application/pskc+xml", "ptid" : "application/vnd.pvi.ptid1", "pub" : "application/x-mspublisher", "pvb" : "application/vnd.3gpp.pic-bw-var", "pwn" : "application/vnd.3m.post-it-notes", "pya" : "audio/vnd.ms-playready.media.pya", "pyv" : "video/vnd.ms-playready.media.pyv", "qam" : "application/vnd.epson.quickanime", "qbo" : "application/vnd.intu.qbo", "qfx" : "application/vnd.intu.qfx", "qps" : "application/vnd.publishare-delta-tree", "qt" : "video/quicktime", "qwd" : "application/vnd.quark.quarkxpress", "qwt" : "application/vnd.quark.quarkxpress", "qxb" : "application/vnd.quark.quarkxpress", "qxd" : "application/vnd.quark.quarkxpress", "qxl" : "application/vnd.quark.quarkxpress", "qxt" : "application/vnd.quark.quarkxpress", "ra" : "audio/x-pn-realaudio", "ram" : "audio/x-pn-realaudio", "rar" : "application/x-rar-compressed", "ras" : "image/x-cmu-raster", "rb" : "text/plain", "rcprofile" : "application/vnd.ipunplugged.rcprofile", "rdf" : "application/rdf+xml", "rdz" : "application/vnd.data-vision.rdz", "rep" : "application/vnd.businessobjects", "res" : "application/x-dtbresource+xml", "resx" : "text/xml", "rgb" : "image/x-rgb", "rif" : "application/reginfo+xml", "rip" : "audio/vnd.rip", "ris" : "application/x-research-info-systems", "rl" : "application/resource-lists+xml", "rlc" : "image/vnd.fujixerox.edmics-rlc", "rld" : "application/resource-lists-diff+xml", "rm" : "application/vnd.rn-realmedia", "rmi" : "audio/midi", "rmp" : "audio/x-pn-realaudio-plugin", "rms" : "application/vnd.jcp.javame.midlet-rms", "rmvb" : "application/vnd.rn-realmedia-vbr", "rnc" : "application/relax-ng-compact-syntax", "roa" : "application/rpki-roa", "roff" : "text/troff", "rp9" : "application/vnd.cloanto.rp9", "rpm" : "application/x-rpm", "rpss" : "application/vnd.nokia.radio-presets", "rpst" : "application/vnd.nokia.radio-preset", "rq" : "application/sparql-query", "rs" : "application/rls-services+xml", "rsd" : "application/rsd+xml", "rss" : "application/rss+xml", "rtf" : "application/rtf", "rtx" : "text/richtext", "s" : "text/x-asm", "s3m" : "audio/s3m", "s7z" : "application/x-7z-compressed", "saf" : "application/vnd.yamaha.smaf-audio", "safariextz" : "application/octet-stream", "sass" : "text/x-sass", "sbml" : "application/sbml+xml", "sc" : "application/vnd.ibm.secure-container", "scd" : "application/x-msschedule", "scm" : "application/vnd.lotus-screencam", "scq" : "application/scvp-cv-request", "scs" : "application/scvp-cv-response", "scss" : "text/x-scss", "scurl" : "text/vnd.curl.scurl", "sda" : "application/vnd.stardivision.draw", "sdc" : "application/vnd.stardivision.calc", "sdd" : "application/vnd.stardivision.impress", "sdkd" : "application/vnd.solent.sdkm+xml", "sdkm" : "application/vnd.solent.sdkm+xml", "sdp" : "application/sdp", "sdw" : "application/vnd.stardivision.writer", "see" : "application/vnd.seemail", "seed" : "application/vnd.fdsn.seed", "sema" : "application/vnd.sema", "semd" : "application/vnd.semd", "semf" : "application/vnd.semf", "ser" : "application/java-serialized-object", "setpay" : "application/set-payment-initiation", "setreg" : "application/set-registration-initiation", "sfd-hdstx" : "application/vnd.hydrostatix.sof-data", "sfs" : "application/vnd.spotfire.sfs", "sfv" : "text/x-sfv", "sgi" : "image/sgi", "sgl" : "application/vnd.stardivision.writer-global", "sgm" : "text/sgml", "sgml" : "text/sgml", "sh" : "application/x-sh", "shar" : "application/x-shar", "shf" : "application/shf+xml", "sid" : "image/x-mrsid-image", "sig" : "application/pgp-signature", "sil" : "audio/silk", "silo" : "model/mesh", "sis" : "application/vnd.symbian.install", "sisx" : "application/vnd.symbian.install", "sit" : "application/x-stuffit", "sitx" : "application/x-stuffitx", "skd" : "application/vnd.koan", "skm" : "application/vnd.koan", "skp" : "application/vnd.koan", "skt" : "application/vnd.koan", "sldm" : "application/vnd.ms-powerpoint.slide.macroenabled.12", "sldx" : "application/vnd.openxmlformats-officedocument.presentationml.slide", "slt" : "application/vnd.epson.salt", "sm" : "application/vnd.stepmania.stepchart", "smf" : "application/vnd.stardivision.math", "smi" : "application/smil+xml", "smil" : "application/smil+xml", "smv" : "video/x-smv", "smzip" : "application/vnd.stepmania.package", "snd" : "audio/basic", "snf" : "application/x-font-snf", "so" : "application/octet-stream", "spc" : "application/x-pkcs7-certificates", "spf" : "application/vnd.yamaha.smaf-phrase", "spl" : "application/x-futuresplash", "spot" : "text/vnd.in3d.spot", "spp" : "application/scvp-vp-response", "spq" : "application/scvp-vp-request", "spx" : "audio/ogg", "sql" : "application/x-sql", "src" : "application/x-wais-source", "srt" : "application/x-subrip", "sru" : "application/sru+xml", "srx" : "application/sparql-results+xml", "ssdl" : "application/ssdl+xml", "sse" : "application/vnd.kodak-descriptor", "ssf" : "application/vnd.epson.ssf", "ssml" : "application/ssml+xml", "st" : "application/vnd.sailingtracker.track", "stc" : "application/vnd.sun.xml.calc.template", "std" : "application/vnd.sun.xml.draw.template", "stf" : "application/vnd.wt.stf", "sti" : "application/vnd.sun.xml.impress.template", "stk" : "application/hyperstudio", "stl" : "application/vnd.ms-pki.stl", "str" : "application/vnd.pg.format", "stw" : "application/vnd.sun.xml.writer.template", "styl" : "text/x-styl", "sub" : "image/vnd.dvb.subtitle", "sus" : "application/vnd.sus-calendar", "susp" : "application/vnd.sus-calendar", "sv4cpio" : "application/x-sv4cpio", "sv4crc" : "application/x-sv4crc", "svc" : "application/vnd.dvb.service", "svd" : "application/vnd.svd", "svg" : "image/svg+xml", "svgz" : "image/svg+xml", "swa" : "application/x-director", "swf" : "application/x-shockwave-flash", "swi" : "application/vnd.aristanetworks.swi", "sxc" : "application/vnd.sun.xml.calc", "sxd" : "application/vnd.sun.xml.draw", "sxg" : "application/vnd.sun.xml.writer.global", "sxi" : "application/vnd.sun.xml.impress", "sxm" : "application/vnd.sun.xml.math", "sxw" : "application/vnd.sun.xml.writer", "t" : "text/troff", "t3" : "application/x-t3vm-image", "taglet" : "application/vnd.mynfc", "tao" : "application/vnd.tao.intent-module-archive", "tar" : "application/x-tar", "tcap" : "application/vnd.3gpp2.tcap", "tcl" : "application/x-tcl", "teacher" : "application/vnd.smart.teacher", "tei" : "application/tei+xml", "teicorpus" : "application/tei+xml", "tex" : "application/x-tex", "texi" : "application/x-texinfo", "texinfo" : "application/x-texinfo", "text" : "text/plain", "tfi" : "application/thraud+xml", "tfm" : "application/x-tex-tfm", "tga" : "image/x-tga", "tgz" : "application/x-gzip", "thmx" : "application/vnd.ms-officetheme", "tif" : "image/tiff", "tiff" : "image/tiff", "tmo" : "application/vnd.tmobile-livetv", "torrent" : "application/x-bittorrent", "tpl" : "application/vnd.groove-tool-template", "tpt" : "application/vnd.trid.tpt", "tr" : "text/troff", "tra" : "application/vnd.trueapp", "trm" : "application/x-msterminal", "tsd" : "application/timestamped-data", "tsv" : "text/tab-separated-values", "ttc" : "application/x-font-ttf", "ttf" : "application/x-font-ttf", "ttl" : "text/turtle", "twd" : "application/vnd.simtech-mindmapper", "twds" : "application/vnd.simtech-mindmapper", "txd" : "application/vnd.genomatix.tuxedo", "txf" : "application/vnd.mobius.txf", "txt" : "text/plain", "u32" : "application/x-authorware-bin", "udeb" : "application/x-debian-package", "ufd" : "application/vnd.ufdl", "ufdl" : "application/vnd.ufdl", "ulx" : "application/x-glulx", "umj" : "application/vnd.umajin", "unityweb" : "application/vnd.unity", "uoml" : "application/vnd.uoml+xml", "uri" : "text/uri-list", "uris" : "text/uri-list", "urls" : "text/uri-list", "ustar" : "application/x-ustar", "utz" : "application/vnd.uiq.theme", "uu" : "text/x-uuencode", "uva" : "audio/vnd.dece.audio", "uvd" : "application/vnd.dece.data", "uvf" : "application/vnd.dece.data", "uvg" : "image/vnd.dece.graphic", "uvh" : "video/vnd.dece.hd", "uvi" : "image/vnd.dece.graphic", "uvm" : "video/vnd.dece.mobile", "uvp" : "video/vnd.dece.pd", "uvs" : "video/vnd.dece.sd", "uvt" : "application/vnd.dece.ttml+xml", "uvu" : "video/vnd.uvvu.mp4", "uvv" : "video/vnd.dece.video", "uvva" : "audio/vnd.dece.audio", "uvvd" : "application/vnd.dece.data", "uvvf" : "application/vnd.dece.data", "uvvg" : "image/vnd.dece.graphic", "uvvh" : "video/vnd.dece.hd", "uvvi" : "image/vnd.dece.graphic", "uvvm" : "video/vnd.dece.mobile", "uvvp" : "video/vnd.dece.pd", "uvvs" : "video/vnd.dece.sd", "uvvt" : "application/vnd.dece.ttml+xml", "uvvu" : "video/vnd.uvvu.mp4", "uvvv" : "video/vnd.dece.video", "uvvx" : "application/vnd.dece.unspecified", "uvvz" : "application/vnd.dece.zip", "uvx" : "application/vnd.dece.unspecified", "uvz" : "application/vnd.dece.zip", "vcard" : "text/vcard", "vcd" : "application/x-cdlink", "vcf" : "text/x-vcard", "vcg" : "application/vnd.groove-vcard", "vcs" : "text/x-vcalendar", "vcx" : "application/vnd.vcx", "vis" : "application/vnd.visionary", "viv" : "video/vnd.vivo", "vob" : "video/x-ms-vob", "vor" : "application/vnd.stardivision.writer", "vox" : "application/x-authorware-bin", "vrml" : "model/vrml", "vsd" : "application/vnd.visio", "vsf" : "application/vnd.vsf", "vss" : "application/vnd.visio", "vst" : "application/vnd.visio", "vsw" : "application/vnd.visio", "vtu" : "model/vnd.vtu", "vxml" : "application/voicexml+xml", "w3d" : "application/x-director", "wad" : "application/x-doom", "wav" : "audio/x-wav", "wax" : "audio/x-ms-wax", "wbmp" : "image/vnd.wap.wbmp", "wbs" : "application/vnd.criticaltools.wbs+xml", "wbxml" : "application/vnd.wap.wbxml", "wcm" : "application/vnd.ms-works", "wdb" : "application/vnd.ms-works", "wdp" : "image/vnd.ms-photo", "weba" : "audio/webm", "webm" : "video/webm", "webp" : "image/webp", "wg" : "application/vnd.pmi.widget", "wgt" : "application/widget", "wks" : "application/vnd.ms-works", "wm" : "video/x-ms-wm", "wma" : "audio/x-ms-wma", "wmd" : "application/x-ms-wmd", "wmf" : "application/x-msmetafile", "wml" : "text/vnd.wap.wml", "wmlc" : "application/vnd.wap.wmlc", "wmls" : "text/vnd.wap.wmlscript", "wmlsc" : "application/vnd.wap.wmlscriptc", "wmv" : "video/x-ms-wmv", "wmx" : "video/x-ms-wmx", "wmz" : "application/x-ms-wmz", "woff" : "application/x-font-woff", "wpd" : "application/vnd.wordperfect", "wpl" : "application/vnd.ms-wpl", "wps" : "application/vnd.ms-works", "wqd" : "application/vnd.wqd", "wri" : "application/x-mswrite", "wrl" : "model/vrml", "wsdl" : "application/wsdl+xml", "wspolicy" : "application/wspolicy+xml", "wtb" : "application/vnd.webturbo", "wvx" : "video/x-ms-wvx", "x32" : "application/x-authorware-bin", "x3d" : "model/x3d+xml", "x3db" : "model/x3d+binary", "x3dbz" : "model/x3d+binary", "x3dv" : "model/x3d+vrml", "x3dvz" : "model/x3d+vrml", "x3dz" : "model/x3d+xml", "xaml" : "application/xaml+xml", "xap" : "application/x-silverlight-app", "xar" : "application/vnd.xara", "xbap" : "application/x-ms-xbap", "xbd" : "application/vnd.fujixerox.docuworks.binder", "xbm" : "image/x-xbitmap", "xdf" : "application/xcap-diff+xml", "xdm" : "application/vnd.syncml.dm+xml", "xdp" : "application/vnd.adobe.xdp+xml", "xdssc" : "application/dssc+xml", "xdw" : "application/vnd.fujixerox.docuworks", "xenc" : "application/xenc+xml", "xer" : "application/patch-ops-error+xml", "xfdf" : "application/vnd.adobe.xfdf", "xfdl" : "application/vnd.xfdl", "xht" : "application/xhtml+xml", "xhtml" : "application/xhtml+xml", "xhvml" : "application/xv+xml", "xif" : "image/vnd.xiff", "xla" : "application/vnd.ms-excel", "xlam" : "application/vnd.ms-excel.addin.macroenabled.12", "xlc" : "application/vnd.ms-excel", "xlf" : "application/x-xliff+xml", "xlm" : "application/vnd.ms-excel", "xls" : "application/vnd.ms-excel", "xlsb" : "application/vnd.ms-excel.sheet.binary.macroenabled.12", "xlsm" : "application/vnd.ms-excel.sheet.macroenabled.12", "xlsx" : "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "xlt" : "application/vnd.ms-excel", "xltm" : "application/vnd.ms-excel.template.macroenabled.12", "xltx" : "application/vnd.openxmlformats-officedocument.spreadsheetml.template", "xlw" : "application/vnd.ms-excel", "xm" : "audio/xm", "xml" : "application/xml", "xo" : "application/vnd.olpc-sugar", "xop" : "application/xop+xml", "xpi" : "application/x-xpinstall", "xpl" : "application/xproc+xml", "xpm" : "image/x-xpixmap", "xpr" : "application/vnd.is-xpr", "xps" : "application/vnd.ms-xpsdocument", "xpw" : "application/vnd.intercon.formnet", "xpx" : "application/vnd.intercon.formnet", "xsl" : "application/xml", "xslt" : "application/xslt+xml", "xsm" : "application/vnd.syncml+xml", "xspf" : "application/xspf+xml", "xul" : "application/vnd.mozilla.xul+xml", "xvm" : "application/xv+xml", "xvml" : "application/xv+xml", "xwd" : "image/x-xwindowdump", "xyz" : "chemical/x-xyz", "xz" : "application/x-xz", "yaml" : "text/yaml", "yang" : "application/yang", "yin" : "application/yin+xml", "yml" : "text/yaml", "z" : "application/x-compress", "z1" : "application/x-zmachine", "z2" : "application/x-zmachine", "z3" : "application/x-zmachine", "z4" : "application/x-zmachine", "z5" : "application/x-zmachine", "z6" : "application/x-zmachine", "z7" : "application/x-zmachine", "z8" : "application/x-zmachine", "zaz" : "application/vnd.zzazz.deck+xml", "zip" : "application/zip", "zir" : "application/vnd.zul", "zirz" : "application/vnd.zul", "zmm" : "application/vnd.handheld-entertainment+xml", "123" : "application/vnd.lotus-1-2-3"};
Background.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
