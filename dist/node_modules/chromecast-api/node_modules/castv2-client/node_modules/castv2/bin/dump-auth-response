#!/usr/bin/env node
var Client = require('../').Client;
var DeviceAuthMessage = require('../').DeviceAuthMessage;
var fs = require('fs');
var exec = require('child_process').exec;

var usage = 'Usage: ' + process.argv[0] + ' <host> [port]';

var host = process.argv[2];
var port = process.argv[3] || 8009;

if(!host) {
  console.error(usage)
  process.exit(1);
}

var client = new Client();

var opts = {
  host: host,
  port: port
};

client.connect(opts, function() {
  var deviceauth = client.createChannel('sender-0', 'receiver-0', 'urn:x-cast:com.google.cast.tp.deviceauth');

  deviceauth.send(DeviceAuthMessage.serialize({ challenge: {} }));
  deviceauth.on('message', function(data, broadcast) {
    var response = DeviceAuthMessage.parse(data).response;
    client.close();

    var sigFilename = 'auth-signature.sig';
    var certFilenameDer = 'auth-certificate.der';

    fs.writeFileSync(sigFilename, response.signature.toString("binary"), "binary");
    fs.writeFileSync(certFilenameDer, response.client_auth_certificate.toString("binary"), "binary");

    var certFilenamePem = 'auth-certificate.pem';

    exec('openssl x509 -in ' + certFilenameDer + ' -inform DER -out ' + certFilenamePem + ' -outform PEM; rm ' + certFilenameDer);

    console.log('output written to %s and %s', sigFilename, certFilenamePem);

    for(var i = 0; i < response.client_ca.length; i++) {
      var ca = response.client_ca[i];
      var ca_name = 'auth-ca' + (i + 1) + '.crt';

      fs.writeFileSync(ca_name, ca.toString("binary"), "binary");

      console.log('CA written to %s', ca_name);
    }
  });

});