#!/usr/bin/env node
/*
 Copyright 2013 Daniel Wirtz <dcode@dcode.io>

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/**
 * ProtoBuf.js: json2proto Command Line Utility (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/ProtoBuf.js for details
 */

var ProtoBuf = require(__dirname+"/../index.js"),
    Builder = ProtoBuf.Builder,
    Lang = ProtoBuf.Lang,
    fs = require("fs"),
    path = require("path"),
    pkg = require(__dirname+"/../package.json"),
    ascli = require("ascli");

if (!fs.existsSync) fs.existsSync = path.existsSync; // node 0.6

if (process.argv.length < 3) {
    ascli.banner("json".green.bold+"2".white.bold+"proto".green.bold, "ProtoBuf.js v"+pkg['version']+" "+"https://github.com/dcodeIO/ProtoBuf.js".grey);
    console.log("Usage: "+path.basename(process.argv[1]).green.bold+" jsonFile [> outFile]");
    process.exit(1);
}

// Parse options
var options = {};
for (var i=3; i<process.argv.length; i++) {
    var option = process.argv[i];
    if (option.substring(0,1) == "-") {
        var opt = option.split("=", 2), key = opt[0].substring(1);
        if (typeof options[key] === 'string' && typeof opt[1] === 'string') {
            options[key] = [options[key], opt[1]]; // Make it an array
        } else if (Array.isArray(options[key]) && typeof opt[1] === 'string') {
            options[key].push(opt[1]); // Add it
        } else {
            options[key] = opt.length == 2 ? opt[1] : true; // Create or overwrite
        }
    }
}

/**
 * Makes a single value.
 * @param {*} v Value
 * @returns {string} Value string
 * @throws {Error} If the value cannot be converted
 */
function makeVal(v) {
    switch (typeof v) {
        case 'boolean':
            return v ? 'true' : 'false';
        case 'number':
            return v.toString();
        case 'string':
            return '"'+v.replace(/"/g, '\\"')+'"';
        default:
            throw new Error("Illegal output value: "+typeof(v));
    }
}

/**
 * Makes an indentation string.
 * @param {number} n Indentation level
 * @returns {string} White space string
 */
function makeIndent(n) {
    var indent = "";
    while (n--) indent += "    ";
    return indent;
}

/**
 * Makes block level options.
 * @param {*} opt Options object
 * @param {number} indent Indentation level
 * @returns {string} Options string
 */
function makeOptions(opt, indent) {
    var keys = opt ? Object.keys(opt) : [],
        out = [];
    keys.forEach(function(key) {
        out.push(makeIndent(indent)+'option '+key+' = '+makeVal(opt[key])+';\n');
    });
    return out.join('');
}

/**
 * Makes an enum block.
 * @param {*} enm Enum definition
 * @param {number} indent Indentation level
 * @returns {string} Enum string
 * @throws {Error} If `enm` is not a valid enum definition
 */
function makeEnum(enm, indent) {
    if (!Builder.isValidEnum(enm))
        throw Error("Invalid enum definition");
    var out = [];
    out.push(makeIndent(indent)+'enum '+enm.name+' {\n');
    // options
    var opt; out.push(opt = makeOptions(enm.options, indent+1));
    if (opt !== "") out.push("\n");
    // values
    enm.values.forEach(function(value) {
        out.push(makeIndent(indent+1)+value.name+" = "+value.id+";\n");
    });
    out.push(makeIndent(indent)+"}\n");
    return out.join('');
}

/**
 * Makes a message fields block.
 * @param {!Array.<*>} fields Message fields definition
 * @param {number} indent Indentation level
 * @returns {string} Message fields string
 */
function makeMessageFields(fields, indent) {
    var out = [];
    fields.forEach(function(fld) {
        out.push(makeIndent(indent)+fld.rule+" "+fld.type+" "+fld.name+" = "+fld.id);
        var opt = fld.options ? Object.keys(fld.options) : [];
        if (opt.length > 0) {
            out.push(" [");
            var n = 0;
            opt.forEach(function(key) {
                var val = fld.options[key];
                if (n > 0) out.push(", ");
                if (fld.type !== 'string') {
                    out.push(key+"="+val);
                } else {
                    out.push(key+"="+makeVal(val));
                }
                n++;
            });
            out.push("]");
        }
        out.push(";\n");
    });
    return out.join('');
}

/**
 * Makes a message block.
 * @param {*} msg Message definition
 * @param {number} indent Indentation level
 * @returns {string} Message string
 * @throws {Error} If `msg` is not a valid message definition
 */
function makeMessage(msg, indent) {
    var out = [];
    if (!Builder.isValidMessage(msg))
        throw Error("Invalid message definition");
    out.push(makeIndent(indent)+(msg.isGroup ? "group" : "message")+" "+msg.name+" {\n");
    // options
    var opt; out.push(opt = makeOptions(msg.options, indent+1));
    if (opt !== "") out.push("\n");
    // inner enums
    msg.enums.forEach(function(enm) {
        out.push(makeEnum(enm, indent+1));
    });
    // inner messages
    msg.messages.forEach(function(msg) {
        if (msg.ref)
            out.push(makeExtend(msg, indent+1));
        else
            out.push(makeMessage(msg, indent+1));
    });
    // fields
    out.push(opt = makeMessageFields(msg.fields, indent+1));
    // extensions
    if (Array.isArray(msg.extensions) && msg.extensions.length === 2) {
        if (opt !== '') out.push("\n");
        out.push(makeIndent(indent+1)+"extensions "+msg.extensions[0]+" to "+msg.extensions[1]+";\n");
    }
    out.push(makeIndent(indent)+"}\n");
    return out.join('');
}

/**
 * Makes an extend block.
 * @param {*} ext Extend definition
 * @param {number} indent Indentation level
 * @returns {string} Extend string
 * @throws {Error} If `ext` is not a valid extend definition
 */
function makeExtend(ext, indent) {
    if (!Builder.isValidExtend(ext))
        throw Error("Invalid extend definition");
    var out = [];
    out.push(makeIndent(indent)+"extend "+ext.ref+" {\n");
    // fields
    out.push(makeMessageFields(ext.fields, indent+1));
    out.push(makeIndent(indent)+"}\n");
    return out.join('');
}

/**
 * Makes a service block.
 * @param {*} svc Service definition
 * @param {number} indent Indentation level
 * @returns {string} Service string
 * @throws {Error} If `svc` is not a valid service definition
 */
function makeService(svc, indent) {
    if (!Builder.isValidService(svc))
        throw Error("Invalid service definition");
    var out = [];
    out.push(makeIndent(indent)+'service '+svc.name+' {\n');
    // options
    var opt; out.push(opt = makeOptions(svc.options, indent+1));
    if (opt !== "") out.push("\n");
    // rpc
    var keys = Object.keys(svc.rpc);
    keys.forEach(function(key) {
        var rpc = svc.rpc[key];
        out.push(makeIndent(indent+1)+key+'('+rpc.request+') returns('+rpc.response+')');
        opt = makeOptions(rpc.options, indent+2);
        if (opt !== '') {
            out.push(' {\n');
            out.push(opt);
            out.push(makeIndent(indent+1)+'}\n');
        } else {
            out.push(';\n');
        }
    });
    out.push(makeIndent(indent)+'}\n');
    return out.join('');
}

// Read the JSON file and generate the .proto file
var sourceFile = process.argv[2],
    source = fs.readFileSync(sourceFile)+"",
    json = JSON.parse(source),
    out = [];

// package declaration
if (typeof json.package === 'string') {
    out.push('package '+makeVal(json.package)+';\n\n');
}

// global options
out.push(opt = makeOptions(json.options, 0));
if (opt !== "") out.push("\n");

// imports
if (Array.isArray(json.imports) && json.imports.length > 0) {
    json.imports.forEach(function(file) {
        if (typeof file !== 'string') return;
        out.push('import '+makeVal(file)+';\n');
    });
    out.push("\n");
}

// enums
if (Array.isArray(json.enums) && json.enums.length > 0) {
    json.enums.forEach(function(enm) {
        out.push(makeEnum(enm, 0));
        out.push('\n');
    });
}

// messages / extends
if (Array.isArray(json.messages) && json.messages.length > 0) {
    json.messages.forEach(function(msg) {
        if (msg.ref)
            out.push(makeExtend(msg, 0));
        else
            out.push(makeMessage(msg, 0));
        out.push("\n");
    });
}

// services
if (Array.isArray(json.services) && json.services.length > 0) {
    json.services.forEach(function(svc) {
        out.push(makeService(svc, 0));
    });
}

process.stdout.write(out.join('').trim()+"\n");
